<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>折腾派的由来</title>
    <link href="/2022/06/03/%E6%8A%98%E8%85%BE%E6%B4%BE/%E6%8A%98%E8%85%BE%E6%B4%BE%E7%9A%84%E6%9D%A5%E7%94%B1/"/>
    <url>/2022/06/03/%E6%8A%98%E8%85%BE%E6%B4%BE/%E6%8A%98%E8%85%BE%E6%B4%BE%E7%9A%84%E6%9D%A5%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么会有“折腾派”"><a href="#为什么会有“折腾派”" class="headerlink" title="为什么会有“折腾派”"></a>为什么会有“折腾派”</h2><p>众所周知，我是一个爱折腾的人，这在我的简介里也是有写的，相信大家来看这篇文章时，也都是抱着简介里“爱折腾”来的。</p><p>为什么我会做一个“折腾派”，我之所以做这个，是想把自己折腾出的东西分享给大家，让大家在做跟我类似的东西时，能少走一些不必要的弯路，节约时间，提高效率。</p><p>“爱折腾”有好也有坏，好处是你能探索出来很多新东西，得到自己意想不到的结果，也让自己很有成就感。坏处是，在折腾的同时也会浪费很多时间。</p><p>举个例子吧，其实这个博客就是我“爱折腾”捣鼓出来的，原本我完全可以在csdn、qq动态、微信朋友圈里分享自己的东西，但是我想拥有属于自己的一个平台，于是我开始折腾自己的博客搭建，我是一个懵懵懂懂的大一计算机新手，以前也是没有接触过编程，更不用说是前端的操作，但是我凭着爱折腾的劲，把我的博客搭建起来，并且不断让自己的网站美化，这是一个浪费时间的过程，但做出来也是一个很有成就感的结果，并且对自己以后的学习生活有一定的促进作用。</p><p>做自己的“折腾派”，记录自己，提升自己，帮助他人，是一个很好的过程！</p>]]></content>
    
    
    <categories>
      
      <category>折腾派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爱折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再见五月 你好六月</title>
    <link href="/2022/06/03/%E7%94%9F%E6%B4%BB%E6%B4%BE/%E5%86%8D%E8%A7%81%E4%BA%94%E6%9C%88%EF%BC%8C%E4%BD%A0%E5%A5%BD%E5%85%AD%E6%9C%88/"/>
    <url>/2022/06/03/%E7%94%9F%E6%B4%BB%E6%B4%BE/%E5%86%8D%E8%A7%81%E4%BA%94%E6%9C%88%EF%BC%8C%E4%BD%A0%E5%A5%BD%E5%85%AD%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天是端午节，先祝大家端午安康、幸福吉祥。</p><p>端午节，学校给放了三天假，封校大学生的放假当然也只能是一觉自然醒，所以我理所当然的饭点才起床，待我去食堂时，粽子早被一抢而空，于是我只能吃下面的平常菜了。</p><p><img src="/images/%E5%8D%88%E9%A5%AD.jpg" alt="午饭"></p><p>一个人在节假日时吃午饭，“每逢佳节倍思亲”的感觉越发浓烈，从开学到现在就没几次出过校，也与父母错过好几次见面机会，心里一直祈祷可以出校玩玩，可以回家看看。吃着吃着，突然猛的想起我的博客来，我已经快一个月没有上我的小破站，想想当时费好大劲才建起了，我现在居然把它给忘了，不禁暗暗自责起来。想想现在刚好六月初，又是端午节，五月除了期末考试复习生产了一篇文章，就再也没有过了，那我今天索性就写一篇记录生活的随笔吧，正好映合我建站时的初衷。吃饭之际，我正好回想了自己五月干了些什么，在六月之际又准备干什么。</p><p>夜晚我背上背包，走进图书馆坐定，细品<del>统一</del>绿茶，带上耳机，开始自己的随笔，伴随着仲夏的燥热，由此有了以下内容。</p><p><img src="/images/%E5%9B%BE%E4%B9%A6%E9%A6%86.jpg" alt="图书馆"></p><h2 id="再见五月"><a href="#再见五月" class="headerlink" title="再见五月"></a>再见五月</h2><p>五月之所以没有整理小破站，没有生产什么文章，当然也是有原因的。五月，我准备了四场考试，分别是体育考试、python期末考试、语文考试和人工智能考试。</p><p>体育考试还算完美，我的体育选课是乒乓球，我很爱乒乓球这项运动，从小学至今一直在打乒乓球，至今还记得我的第一块729乒乓球拍在哪儿买的、花多少钱买的，并保留至今，虽很少再将它拿出来驰骋疆场，但是我想一直保留它作为纪念。乒乓球考试是最简单的推挡，一分钟60个满分，有两次考试机会，我和我的搭档（感谢Xu Wu）发挥良好，第一场互推55个，老师给了90分<del>我认为应该给95</del>,第二次机会由于我们过于追求速度，中途断球了，也失去了节奏，就没再继续打下去，90分也算不错吧。说到乒乓球，不得不提2021奥运会马龙和奥恰的精彩比赛，奥恰作为德国的实力干将，却一次也没有赢过马龙，这一场比赛实在是精彩，最后双双打到局点，最后一球定胜负，战况焦灼，最后危急关头，马龙成功打败奥恰，顺利晋级决赛，创造11连胜奥恰，奥恰打完球拍从手中滑落，瘫倒在地，而马龙也呼出内心的呐喊，振臂高呼：“他赢不了我”，由衷佩服马龙这位老将，不论实力还是心态，都是强大的六边形战士，希望自己也能一直有“他赢不了我”的心态，在困难面前不低头，披荆斩棘，勇往直前。</p><p>python期末考试算是这四场我最紧张的考试吧，毕竟自己也是很喜欢python，花了很多时间在python上，不过最后还是考的不是很满意吧，总是有些细节自己没有学习到或者记住，其中有道编程题有问题也很是影响我的心情，不过考试终究也是一场测验罢了，找到自己的薄弱环节，再多多学习就好。</p><p>语文考试除了作文也算没什么比较折磨人的了，最后作文让以“平衡”写一篇文章，想到我上次写作文还是在高考，这个题目属实有点儿难为到我了，我在人与人、物与物、人与物到万物之间的平衡大做文章，把平衡当作一种美，也算是把字数填满了，结果如何，且看造化了吧。</p><p>人工智能导论是一门科普性质的课，考试是开卷模式，也只怪老师把“开卷”通知的晚了点，自己也复习一段时间了，不过不出所料，题目果然是很难搜到的东西，也算是有点搞人心态吧。总的来说，既然四门都已考完，再多想成绩也没什么意义了吧，接下来要做的是做好后面的考试。</p><p>五月对于我来说最重要的也不是复习这四门科目吧，这个五月对于我来说应该有着特殊意义，我参加了含金量巨高的第八届全国大学生互联网+创新创业大赛，是一个大学A类赛事，我保证试一试水的心态参加的，就想在大一试一下为大二做好准备，不过开始是这么想的，做着做着心里就有了一些变化，我想我这么用心的带团队一起做项目，好歹也得拿个奖吧。现在回想确实挺累的，从一开始拉人组建团队（感谢指导老师：Yong Yao和我一起并肩作战的好队友：Wenxuan Xu，Danni Wei，Yifei Du，Jie Ding，Tongyao Zhou），对要做什么项目无头无绪，到后来杀出一条血路，决定打造一款web app——HeartShine，到最后提交了一份一万多字的项目计划书，熬了很多夜，付出了很多时间。因为五月底要交项目，我们五月中旬才定下要做什么项目，做项目计划书的时间非常紧。项目计划书一共八章，最后几天是一直写到晚上一点，我们写好了给指导老师订正。指导老师也是以身作则，给我们订正了很多次，给了很多建议，陪我们一起熬到一点多，给我们改计划书，内心也是有要坚持下去的动力，同时感谢我的好朋友Yinglong Cheng和Zhengxiong Wu，为我提供了很多竞赛的相关材料，没有你们我最后也写不出这份计划书。</p><p><img src="/images/%E9%A1%B9%E7%9B%AElogo.jpg" alt="项目logo"></p><p>除了竞赛的个人荣誉，就是班级荣誉了——活力团支部，非常不巧的时，夹杂着考试和竞赛的五月，又迎来了活力团支部的评选，最重要的是我的团队两位女生要去策划节目，只剩下我们三个大男人主攻计划书，还要去排练节目，当时也很是崩溃，当班级第一次晋级后，我打心里是不想再继续第二场表演了，但是作为一班之长，不带头冲锋，以身作则，也实在是不合情理，说到数据二班，我不得不自豪一波，数据二班在院里是真的c，几乎稳在红黑榜的红榜榜首，力战院里15个班，大家也是非常的团结，一起为班里做贡献，不论是学习，还是纪律，永远都会是院里最优秀的班级！当然，活力团支部的结果，那必然是功夫不负有心人，我们再一次成功晋级，打入校赛，那也意味着六月我们要再次排练节目，为了班级荣誉，冲冲冲吧！</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E4%BA%8C%E7%8F%AD%E5%90%88%E7%85%A7.jpg" alt="数据二班合照"></p><p>总的来说，五月是很充实的一个月，我觉得自己过的非常有意义，重要的是又学到了很多东西，又锻炼了自己的毅力。</p><h2 id="你好六月"><a href="#你好六月" class="headerlink" title="你好六月"></a>你好六月</h2><p>六月又是新的一个月，从六一儿童节，让室友把别人摊位的照明灯当礼物给我买回来，我觉得我已经要快乐一个月，尽管室友一直吐槽我好<del>恶心</del>,不过我也确实很需要她那个台灯emm，对不住摆摊的两位小姐姐了吧哈哈哈。</p><p>六月我有很多展望，新的一个月，我也很想继续去做一些竞赛，不断提升自己的能力，当然，六月的到来也意味着考试周即将到来，六月里所有科目都将考完，我也将开始新一轮的考试复习，所以六月我可能也不会继续更新新文章。</p><p>六月中下旬也将是互联网+竞赛校赛的选拔，若我们成功晋级校赛金银铜的选拔，我们还将继续准备项目路演答辩。六月也会迎来活力团支部校赛评定，在此希望数据二班再获佳绩吧！</p><p>听闻六月七号是高三学生面对的高考，在端午佳节一并祝福高三学子才华出“粽”、一举高“粽”！</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>执笔至此，图书馆也将闭馆，想想也罢，今天就写到这儿吧，本人也没有什么很高的文学素养，文章没有那些华丽的辞藻，读起来也是枯燥无味，但也是作者心里想说的一些东西吧，过去的时间再回首，未来的生活再展望，活在当下，及时行乐，继续好好努力吧！</p><p><img src="/images/%E5%A4%9C%E6%99%9A.jpg" alt="夜晚"></p>]]></content>
    
    
    <categories>
      
      <category>生活派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>致青春</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2022/06/03/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/06/03/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="python面向对象"><a href="#python面向对象" class="headerlink" title="python面向对象"></a>python面向对象</h3><p>Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。</p><h3 id="面向对象技术简介"><a href="#面向对象技术简介" class="headerlink" title="面向对象技术简介"></a>面向对象技术简介</h3><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖，也称为方法的重写。</li><li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassName</span>:<br>   <span class="hljs-string">&#x27;类的帮助信息&#x27;</span>   <span class="hljs-comment">#类文档字符串</span><br>    class_suite  <span class="hljs-comment">#类体</span><br><span class="hljs-comment">#class_suite 由类成员，方法，数据属性组成。</span><br></code></pre></td></tr></table></figure><p>简单实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>   <span class="hljs-string">&#x27;所有员工的基类&#x27;</span><br>   empCount = <span class="hljs-number">0</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += <span class="hljs-number">1</span><br>   <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayCount</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount)<br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayEmployee</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name : &quot;</span>, self.name,  <span class="hljs-string">&quot;, Salary: &quot;</span>, self.salary)<br></code></pre></td></tr></table></figure><ul><li>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。</li><li>第一种方法__init__方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</li><li>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</li><li>self 代表的是类的实例，代表当前对象的地址，而 <strong>self.<strong>class</strong></strong> 则指向类。</li><li>类必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。self 不是 python 关键字，我们把他换成其他也是可以正常执行的</li></ul><h3 id="创建实例对象和访问类的属性"><a href="#创建实例对象和访问类的属性" class="headerlink" title="创建实例对象和访问类的属性"></a>创建实例对象和访问类的属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>   <span class="hljs-string">&#x27;所有员工的基类&#x27;</span><br>   empCount = <span class="hljs-number">0</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += <span class="hljs-number">1</span><br>   <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayCount</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount)<br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayEmployee</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span>(Name : <span class="hljs-string">&quot;, self.name,  &quot;</span>, Salary: <span class="hljs-string">&quot;, self.salary)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">#创建 Employee 类的第一个对象</span><br><span class="hljs-string">emp1 = Employee(&quot;</span>Zara<span class="hljs-string">&quot;, 2000)</span><br><span class="hljs-string">#创建 Employee 类的第二个对象</span><br><span class="hljs-string">emp2 = Employee(&quot;</span>Manni<span class="hljs-string">&quot;, 5000)</span><br><span class="hljs-string">#访问类的属性</span><br><span class="hljs-string">emp1.displayEmployee()</span><br><span class="hljs-string">emp2.displayEmployee()</span><br><span class="hljs-string">print(&quot;</span>Total Employee %d<span class="hljs-string">&quot; % Employee.empCount)</span><br><span class="hljs-string"></span><br><span class="hljs-string">#可以修改类的属性</span><br><span class="hljs-string">emp1.age = 7  # 添加一个 &#x27;age&#x27; 属性</span><br><span class="hljs-string">emp1.age = 8  # 修改 &#x27;age&#x27; 属性</span><br><span class="hljs-string">del emp1.age  # 删除 &#x27;age&#x27; 属性</span><br></code></pre></td></tr></table></figure><h3 id="python内置属性"><a href="#python内置属性" class="headerlink" title="python内置属性"></a>python内置属性</h3><ul><li><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成） </li><li><strong>doc</strong> :类的文档字符串 </li><li><strong>name</strong>: 类名 </li><li><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod） </li><li><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li></ul><h3 id="对象销毁"><a href="#对象销毁" class="headerlink" title="对象销毁"></a>对象销毁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"> self, x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span></span>):<br>      self.x = x<br>      self.y = y<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>      class_name = self.__class__.__name__<br>      <span class="hljs-built_in">print</span> class_name, <span class="hljs-string">&quot;销毁&quot;</span><br> <br>pt1 = Point()<br>pt2 = pt1<br>pt3 = pt1<br><span class="hljs-built_in">print</span>（<span class="hljs-built_in">id</span>(pt1), <span class="hljs-built_in">id</span>(pt2), <span class="hljs-built_in">id</span>(pt3)）<span class="hljs-comment"># 打印对象的id</span><br><span class="hljs-comment">#销毁对象</span><br><span class="hljs-keyword">del</span> pt1<br><span class="hljs-keyword">del</span> pt2<br><span class="hljs-keyword">del</span> pt3<br></code></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><ul><li>当我们创建一个新类时，我们可以重用一个现有的类并继承一个现有类的所有功能，然后添加一点来创建我们的新类</li><li>另一种形式的存储和重用</li><li>一次写入可在后面多次修改和重用</li><li>新类（子类）具有旧类（父类）的所有功能，还可以添加更多自己的功能</li><li>“子类”是类的更专业的版本，它从父类继承属性和行为，并可以引入自己的属性和行为</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>:        <span class="hljs-comment"># 定义父类</span><br>   parentAttr = <span class="hljs-number">100</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;调用父类构造函数&quot;</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">parentMethod</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;调用父类方法&#x27;</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setAttr</span>(<span class="hljs-params">self, attr</span>):<br>      Parent.parentAttr = attr<br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getAttr</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;父类属性 :&quot;</span>, Parent.parentAttr<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>(<span class="hljs-title class_ inherited__">Parent</span>): <span class="hljs-comment"># 定义子类</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;调用子类构造方法&quot;</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">childMethod</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;调用子类方法&#x27;</span><br> <br>c = Child()          <span class="hljs-comment"># 实例化子类</span><br>c.childMethod()      <span class="hljs-comment"># 调用子类的方法</span><br>c.parentMethod()     <span class="hljs-comment"># 调用父类方法</span><br>c.setAttr(<span class="hljs-number">200</span>)       <span class="hljs-comment"># 再次调用父类的方法 - 设置属性值</span><br>c.getAttr()          <span class="hljs-comment"># 再次调用父类的方法 - 获取属性值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python期末练习</title>
    <link href="/2022/05/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/python%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/05/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/python%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="应用continue，累加1–100之间能被3整除的整数"><a href="#应用continue，累加1–100之间能被3整除的整数" class="headerlink" title="应用continue，累加1–100之间能被3整除的整数"></a>应用continue，累加1–100之间能被3整除的整数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#应用continue，累加1--100之间能被3整除的整数</span><br><span class="hljs-comment">#1.设置一个和值变量</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-comment">#2.使用for循环遍历出1-100之间的数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>):<br><span class="hljs-comment">#3.不满足被3整除的条件就跳过，循环继续执行</span><br><span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-built_in">sum</span> += i<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h3 id="输入三位数逆序输出"><a href="#输入三位数逆序输出" class="headerlink" title="输入三位数逆序输出"></a>输入三位数逆序输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入三位数逆序输出</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个三位数：&#x27;</span>)<br><span class="hljs-built_in">print</span>(a[::-<span class="hljs-number">1</span>])<br><br></code></pre></td></tr></table></figure><h3 id="1，2，3，4，5，6，7，8八个数字组成多少个不相同且不重复的两位数"><a href="#1，2，3，4，5，6，7，8八个数字组成多少个不相同且不重复的两位数" class="headerlink" title="1，2，3，4，5，6，7，8八个数字组成多少个不相同且不重复的两位数"></a>1，2，3，4，5，6，7，8八个数字组成多少个不相同且不重复的两位数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1，2，3，4，5，6，7，8八个数字组成不相同且不重复的两位数</span><br>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>([i*<span class="hljs-number">10</span> + j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> l <span class="hljs-keyword">if</span> i != j]))<br></code></pre></td></tr></table></figure><h3 id="统计句子中各字符出现频数"><a href="#统计句子中各字符出现频数" class="headerlink" title="统计句子中各字符出现频数"></a>统计句子中各字符出现频数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计句子中各字符出现频数</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个句子：&#x27;</span>)<br>d = &#123;&#125;<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> &#123;i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a&#125;:<br>    d.update(&#123;j:<span class="hljs-number">0</span>&#125;)<br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> m <span class="hljs-keyword">in</span> d.keys():<br>        d[m] += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><h3 id="第一个字符串中删除第二个字符串"><a href="#第一个字符串中删除第二个字符串" class="headerlink" title="第一个字符串中删除第二个字符串"></a>第一个字符串中删除第二个字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一个字符串中删除第二个字符串</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入第一个字符串: &#x27;</span>)<br>b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入第二个字符串: &#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> b:<br>        <span class="hljs-keyword">if</span> j == i:<br>            a = a.replace(j,<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h3 id="规则n边形的点的坐标"><a href="#规则n边形的点的坐标" class="headerlink" title="规则n边形的点的坐标"></a>规则n边形的点的坐标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算规则n边形的点的坐标</span><br><span class="hljs-comment">#列表存储给定的坐标公式</span><br><span class="hljs-comment">#不理解出题意图到底是要干什么。。。</span><br></code></pre></td></tr></table></figure><h3 id="原列表为素数直接加入新列表，否则平方加入新列表"><a href="#原列表为素数直接加入新列表，否则平方加入新列表" class="headerlink" title="原列表为素数直接加入新列表，否则平方加入新列表"></a>原列表为素数直接加入新列表，否则平方加入新列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#原列表为素数直接加入新列表，否则平方加入新列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isprime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;素数返回素数，非素数返回平方&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> n**<span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n//<span class="hljs-number">2</span>+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> n % j == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> n**<span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n<br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(isprime,a)))<br></code></pre></td></tr></table></figure><h3 id="原列表为偶数直接加入新列表，否则三次方加入"><a href="#原列表为偶数直接加入新列表，否则三次方加入" class="headerlink" title="原列表为偶数直接加入新列表，否则三次方加入"></a>原列表为偶数直接加入新列表，否则三次方加入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">iseven</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;偶数返回偶数，奇数三次方加入&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n**<span class="hljs-number">3</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(iseven,a)))<br></code></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#异常处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prompt_integer</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">try</span>:<br>        b = <span class="hljs-built_in">int</span>(a)<br>        <span class="hljs-keyword">return</span> b<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;重新输入&#x27;</span>)<br><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个整数：&#x27;</span>)<br>prompt_integer(a)<br></code></pre></td></tr></table></figure><h3 id="字典练习"><a href="#字典练习" class="headerlink" title="字典练习"></a>字典练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#字典练习</span><br>li = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>,<span class="hljs-number">88</span>,<span class="hljs-number">99</span>,<span class="hljs-number">90</span>]<br>dic = &#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x &lt; <span class="hljs-number">66</span>,li)),<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> y: y &gt; <span class="hljs-number">66</span>,li))&#125;<br><span class="hljs-built_in">print</span>(dic)<br></code></pre></td></tr></table></figure><h3 id="字典套字典"><a href="#字典套字典" class="headerlink" title="字典套字典"></a>字典套字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字典套字典</span><br>cities =  &#123;<span class="hljs-string">&#x27;wuhan&#x27;</span>:&#123;<span class="hljs-string">&#x27;country&#x27;</span>:<span class="hljs-string">&#x27;China&#x27;</span>,<br>                    <span class="hljs-string">&#x27;populations&#x27;</span>:<span class="hljs-number">0</span>,<br>                    <span class="hljs-string">&#x27;fact&#x27;</span>:<span class="hljs-number">0</span>&#125;,<br>           <span class="hljs-string">&#x27;shanghai&#x27;</span>:&#123;<span class="hljs-string">&#x27;country&#x27;</span>:<span class="hljs-string">&#x27;China&#x27;</span>,<br>                        <span class="hljs-string">&#x27;populations&#x27;</span>:<span class="hljs-number">0</span>,<br>                        <span class="hljs-string">&#x27;fact&#x27;</span>:<span class="hljs-number">0</span>&#125;,<br>           <span class="hljs-string">&#x27;guangzhou&#x27;</span>:&#123;<span class="hljs-string">&#x27;country&#x27;</span>:<span class="hljs-string">&#x27;China&#x27;</span>,<br>                         <span class="hljs-string">&#x27;populations&#x27;</span>:<span class="hljs-number">0</span>,<br>                         <span class="hljs-string">&#x27;fact&#x27;</span>:<span class="hljs-number">0</span>&#125;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cities.keys():<br>    <span class="hljs-built_in">print</span>(i,end = <span class="hljs-string">&#x27;:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> m,n <span class="hljs-keyword">in</span> cities[i].items():<br>        <span class="hljs-built_in">print</span>(m,n,end = <span class="hljs-string">&#x27;,&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cal.txt&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-comment">#设计算法...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tkinter控件基本属性</title>
    <link href="/2022/04/19/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/tkinter%E6%8E%A7%E4%BB%B6%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/04/19/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/tkinter%E6%8E%A7%E4%BB%B6%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>下表列出了 Tkinter 中常用的 15 个控件：</p><table><thead><tr><th>控件类型</th><th>控件名称</th><th>控件作用</th></tr></thead><tbody><tr><td>Button</td><td>按钮</td><td>点击按钮时触发&#x2F;执行一些事件（函数）</td></tr><tr><td>Canvas</td><td>画布</td><td>提供绘制图，比如直线、矩形、多边形等</td></tr><tr><td>Checkbutton</td><td>复选框</td><td>多项选择按钮，用于在程序中提供多项选择框</td></tr><tr><td>Entry</td><td>文本框输入框</td><td>用于接收单行文本输入</td></tr><tr><td>Frame</td><td>框架（容器）控件</td><td>定义一个窗体（根窗口也是一个窗体），用于承载其他控件，即作为其他控件的容器</td></tr><tr><td>Lable</td><td>标签控件</td><td>用于显示单行文本或者图片</td></tr><tr><td>LableFrame</td><td>容器控件</td><td>一个简单的容器控件，常用于复杂的窗口布局。</td></tr><tr><td>Listbox</td><td>列表框控件</td><td>以列表的形式显示文本</td></tr><tr><td>Menu</td><td>菜单控件</td><td>菜单组件（下拉菜单和弹出菜单）</td></tr><tr><td>Menubutton</td><td>菜单按钮控件</td><td>用于显示菜单项</td></tr><tr><td>Message</td><td>信息控件</td><td>用于显示多行不可编辑的文本，与 Label控件类似，增加了自动分行的功能</td></tr><tr><td>messageBox</td><td>消息框控件</td><td>定义与用户交互的消息对话框</td></tr><tr><td>OptionMenu</td><td>选项菜单</td><td>下拉菜单</td></tr><tr><td>PanedWindow</td><td>窗口布局管理组件</td><td>为组件提供一个框架，允许用户自己划分窗口空间</td></tr><tr><td>Radiobutton</td><td>单选框</td><td>单项选择按钮，只允许从多个选项中选择一项</td></tr><tr><td>Scale</td><td>进度条控件</td><td>定义一个线性“滑块”用来控制范围，可以设定起始值和结束值，并显示当前位置的精确值</td></tr><tr><td>Spinbox</td><td>高级输入框</td><td>Entry 控件的升级版，可以通过该组件的上、下箭头选择不同的值</td></tr><tr><td>Scrollbar</td><td>滚动条</td><td>默认垂直方向，鼠标拖动改变数值，可以和 Text、Listbox、Canvas等控件配合使用</td></tr><tr><td>Text</td><td>多行文本框</td><td>接收或输出多行文本内容</td></tr><tr><td>Toplevel</td><td>子窗口</td><td>在创建一个独立于主窗口之外的子窗口，位于主窗口的上一层，可作为其他控件的容器</td></tr></tbody></table><p>在后续内容中，我们会陆续对上表中涉及的控件进行介绍。当然，除了上述控件外，还有一些高级控件，比如 PanedWindow、messagebox、LableFrame、Spinbox，在后续章节也会讲解。</p><h2 id="控件基本属性"><a href="#控件基本属性" class="headerlink" title="控件基本属性"></a>控件基本属性</h2><p>从上表来看，每个控件都有着各自不同的功能，即使有些控件功能相似，但它们的适用场景也不同。</p><p>在 Tkinter 中不同的控件受到各自参数的约束（即参数），所有控件既有相同属性，也有各自独有的属性。本节内容，先对这些控件的共用属性做简单介绍，如下表所示：</p><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>anchor</td><td>定义控件或者文字信息在窗口内的位置</td></tr><tr><td>bg</td><td>bg 是 background 的缩写，用来定义控件的背景颜色，参数值可以颜色的十六进制数，或者颜色英文单词</td></tr><tr><td>bitmap</td><td>定义显示在控件内的位图文件</td></tr><tr><td>borderwidth</td><td>定于控件的边框宽度，单位是像素</td></tr><tr><td>command</td><td>该参数用于执行事件函数，比如单击按钮时执行特定的动作，可将执行用户自定义的函数</td></tr><tr><td>cursor</td><td>当鼠标指针移动到控件上时，定义鼠标指针的类型，字符换格式，参数值有 crosshair（十字光标）watch（待加载圆圈）plus（加号）arrow（箭头）等</td></tr><tr><td>font</td><td>若控件支持设置标题文字，就可以使用此属性来定义，它是一个数组格式的参数 (字体,大小，字体样式)</td></tr><tr><td>fg</td><td>fg 是 foreground 的缩写，用来定义控件的前景色，也就是字体的颜色</td></tr><tr><td>height</td><td>该参数值用来设置控件的高度，文本控件以字符的数目为高度（px），其他控件则以像素为单位</td></tr><tr><td>image</td><td>定义显示在控件内的图片文件</td></tr><tr><td>justify</td><td>定义多行文字的排列方式，此属性可以是 LEFT&#x2F;CENTER&#x2F;RIGHT</td></tr><tr><td>padx&#x2F;pady</td><td>定义控件内的文字或者图片与控件边框之间的水平&#x2F;垂直距离</td></tr><tr><td>relief</td><td>定义控件的边框样式，参数值为FLAT（平的）&#x2F;RAISED（凸起的）&#x2F;SUNKEN（凹陷的）&#x2F;GROOVE（沟槽桩边缘）&#x2F;RIDGE（脊状边缘）</td></tr><tr><td>text</td><td>定义控件的标题文字</td></tr><tr><td>state</td><td>控制控件是否处于可用状态，参数值默认为 NORMAL&#x2F;DISABLED，默认为 NORMAL（正常的）</td></tr><tr><td>width</td><td>用于设置控件的宽度，使用方法与 height 相同</td></tr></tbody></table><p>注意：对于上述属性先做大体的了</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2022/04/07/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/"/>
    <url>/2022/04/07/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>数学中的函数</p><ul><li>只是描述变量之间的关系变化</li></ul><p>编程中的函数</p><ul><li>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</li><li>函数能提高应用的模块性，代码的重复利用率，以及提高代码阅读性，降低维护成本；</li><li>当然，编程中的函数也可描述变量之间的计算（一些特定的函数）</li></ul><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>关键字：函数代码块以 def 关键词开头</li><li>函数名：后接函数标识符名称和圆括号()</li><li>参数列表：任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数体：实现特定功能的代码块</li><li>返回值：return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li><li>函数内容以冒号起始，并且缩进。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li></ul><p>定义语法：</p><p>def functionname( parameters ):</p><p>···”函数_文档字符串”</p><p>···function_suite</p><p>···return [expression]</p><p>函数先定义才可以被调用，如同变量先声明后使用。一个函数只可以定义一次，但可以多次调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义函数实现简单的四则运算</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span><br>    a = x + y<br>    <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><p>函数调用语句格式：</p><p>函数名</p><p>实际变量列表（实参列表），如果存在； 如是无参数，直接一对小括号 ()</p><p>如果存在返回值，可通过 赋值语句进行保存与某变量中  a  &#x3D; input()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入第一个整数: &quot;</span>))<br>b = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入第二个整数: &quot;</span>))<br>c = myadd(a, b)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h3 id="assert调试"><a href="#assert调试" class="headerlink" title="assert调试"></a>assert调试</h3><p>ASSERT ()是一个调试程序时经常使用的宏，在程序运行时它计算括号内的表达式，如果表达式为FALSE (0), 程序将报告错误，并终止执行。 如果表达式不为0，则继续执行后面的语句。</p><p>每个assert只检验一个条件,因为同时检验多个条件时,如果断言失败,无法直观的判断是哪个条件失败</p><p>语法格式如下：</p><p>assert expression</p><p>assert expression [, arguments]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> myadd(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>) == <span class="hljs-number">8</span><br><span class="hljs-keyword">assert</span> myadd(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>) == <span class="hljs-number">13</span>,<span class="hljs-string">&#x27;运算错误&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="函数调用时的传参类型"><a href="#函数调用时的传参类型" class="headerlink" title="函数调用时的传参类型"></a>函数调用时的传参类型</h3><p>位置参数：位置参数(必备)须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p><p>关键字参数：显式地指定参数的值：使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p><p>默认参数：可以在函数定义的时候给参数设定默认值。</p><p>不定长参数：可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述几种参数不同，声明时不会命名。使用变量名加 *，可以使函数接受不定数目的参数，其中，加了星号 *的变量名会存放所有未命名的变量参数,相当于元组类型，**表示参数数目不定，相当于一个字典，关键词和值对应于键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span><br>    a = x + y<br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-built_in">print</span>(myadd(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<span class="hljs-comment">#位置参数</span><br><span class="hljs-built_in">print</span>(myadd(x=<span class="hljs-number">2</span>, y=<span class="hljs-number">3</span>))<span class="hljs-comment">#关键字参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quad</span>(<span class="hljs-params">x, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">return</span> a * x ** <span class="hljs-number">2</span> + b * x + c<br>quad(<span class="hljs-number">2.0</span>)<span class="hljs-comment">#默认参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd2</span>(<span class="hljs-params">x, *args</span>):<br>    <span class="hljs-string">&quot;不定长参数实例&quot;</span><br>    total = x<br><br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:<br>        total += arg<br><br>    <span class="hljs-keyword">return</span> total<br><span class="hljs-built_in">print</span>(myadd2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<span class="hljs-comment">#不定长参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">*args, **kwargs</span>):<br>    <span class="hljs-built_in">print</span>(args, kwargs)<br><br>foo(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, x=<span class="hljs-string">&#x27;bar&#x27;</span>, z=<span class="hljs-number">10</span>)<span class="hljs-comment">#不定长参数</span><br><span class="hljs-comment">#输出：(2, 3) &#123;&#x27;x&#x27;: &#x27;bar&#x27;, &#x27;z&#x27;: 10&#125;</span><br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>在数学与计算机科学中，递归(Recursion)是指在函数的定义中使用函数自身的方法。实际上，递归，顾名思义，其包含了两个意思：<code>递</code>和<code>归</code>，这正是递归思想的精华所在。</p><p>递：递归的问题必须可以分解为若干规模较小，与原问题相同的子问题，这些子问题可以用相同的解题思路解决&#96;归： 这些问题的演化过程是一个从小到大、由远及近的过程，并且会有一个明确的终点，一旦到了这个明确的终点后，就需要从原路返回到原点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#经典应用：欧几里得算法</span><br><span class="hljs-comment">#任意两个数 a 和 b，从大数中减去小数，这两个数的 最大公约数GCD 保持不变</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>) :<br>    <span class="hljs-keyword">if</span> a &lt; b :<br>        <span class="hljs-keyword">return</span> gcd(a,b-a)<br>    <span class="hljs-keyword">elif</span> b &lt; a :<br>        <span class="hljs-keyword">return</span> gcd(a-b,b)<br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">return</span> a<br>gcd(<span class="hljs-number">68</span>,<span class="hljs-number">119</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嵌套</title>
    <link href="/2022/03/31/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%AD%97%E5%85%B8/%E5%AD%97%E5%85%B8%EF%BC%8C%E5%88%97%E8%A1%A8%E7%9A%84%E5%B5%8C%E5%A5%97/"/>
    <url>/2022/03/31/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%AD%97%E5%85%B8/%E5%AD%97%E5%85%B8%EF%BC%8C%E5%88%97%E8%A1%A8%E7%9A%84%E5%B5%8C%E5%A5%97/</url>
    
    <content type="html"><![CDATA[<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>在字典中嵌套列表，在列表中嵌套字典，在字典中嵌套字典，在列表中嵌套列表（二维列表）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在字典中存储列表</span><br>a = &#123;<span class="hljs-string">&#x27;电影名&#x27;</span>: [<span class="hljs-string">&#x27;雄狮少年&#x27;</span>, <span class="hljs-string">&#x27;孤味&#x27;</span>, <span class="hljs-string">&#x27;你好，李焕英&#x27;</span>, <span class="hljs-string">&#x27;悬崖之上&#x27;</span>, <span class="hljs-string">&#x27;拆弹专家2&#x27;</span>],<br>        <span class="hljs-string">&#x27;导演&#x27;</span>: [<span class="hljs-string">&#x27;孙海鹏&#x27;</span>, <span class="hljs-string">&#x27;许勇杰&#x27;</span>, <span class="hljs-string">&#x27;贾玲&#x27;</span>, <span class="hljs-string">&#x27;张艺谋&#x27;</span>, <span class="hljs-string">&#x27;邱礼涛&#x27;</span>],<br>        <span class="hljs-string">&#x27;评分&#x27;</span>: [<span class="hljs-string">&#x27;8.3&#x27;</span>, <span class="hljs-string">&#x27;8.0&#x27;</span>, <span class="hljs-string">&#x27;7.7&#x27;</span>, <span class="hljs-string">&#x27;7.6&#x27;</span>, <span class="hljs-string">&#x27;7.5&#x27;</span>],<br>        <span class="hljs-string">&#x27;片长&#x27;</span>: [<span class="hljs-string">&#x27;104&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;128&#x27;</span>, <span class="hljs-string">&#x27;120&#x27;</span>, <span class="hljs-string">&#x27;121&#x27;</span>],<br>        <span class="hljs-string">&#x27;语言&#x27;</span>: [<span class="hljs-string">&#x27;汉化普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>],<br>        <span class="hljs-string">&#x27;上映日期&#x27;</span>: [<span class="hljs-string">&#x27;2021&#x27;</span>, <span class="hljs-string">&#x27;2020&#x27;</span>, <span class="hljs-string">&#x27; 2021&#x27;</span>, <span class="hljs-string">&#x27;2021&#x27;</span>, <span class="hljs-string">&#x27;2020&#x27;</span>]&#125;<br><span class="hljs-comment">#在字典中嵌套字典</span><br>b = &#123;<br>    <span class="hljs-string">&#x27;name1&#x27;</span>:&#123;<br>        <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<br>        <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;zhi&#x27;</span>,<br>        <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;ying&#x27;</span>&#125;,<br><br>     <span class="hljs-string">&#x27;name2&#x27;</span>:&#123;<br>         <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<br>         <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;wen&#x27;</span>,<br>         <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xuan&#x27;</span>&#125;&#125;<br><span class="hljs-comment">#二维列表,矩阵</span><br>c = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>     [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],<br>     [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br>c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>c[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="字典嵌套列表，判断某个值是否在字典中的列表中"><a href="#字典嵌套列表，判断某个值是否在字典中的列表中" class="headerlink" title="字典嵌套列表，判断某个值是否在字典中的列表中"></a>字典嵌套列表，判断某个值是否在字典中的列表中</h3><p>不能直接用in判断是否在字典嵌套的所有列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-string">&#x27;电影名&#x27;</span>: [<span class="hljs-string">&#x27;雄狮少年&#x27;</span>, <span class="hljs-string">&#x27;孤味&#x27;</span>, <span class="hljs-string">&#x27;你好，李焕英&#x27;</span>, <span class="hljs-string">&#x27;悬崖之上&#x27;</span>, <span class="hljs-string">&#x27;拆弹专家2&#x27;</span>],<br>        <span class="hljs-string">&#x27;导演&#x27;</span>: [<span class="hljs-string">&#x27;孙海鹏&#x27;</span>, <span class="hljs-string">&#x27;许勇杰&#x27;</span>, <span class="hljs-string">&#x27;贾玲&#x27;</span>, <span class="hljs-string">&#x27;张艺谋&#x27;</span>, <span class="hljs-string">&#x27;邱礼涛&#x27;</span>],<br>        <span class="hljs-string">&#x27;评分&#x27;</span>: [<span class="hljs-string">&#x27;8.3&#x27;</span>, <span class="hljs-string">&#x27;8.0&#x27;</span>, <span class="hljs-string">&#x27;7.7&#x27;</span>, <span class="hljs-string">&#x27;7.6&#x27;</span>, <span class="hljs-string">&#x27;7.5&#x27;</span>],<br>        <span class="hljs-string">&#x27;片长&#x27;</span>: [<span class="hljs-string">&#x27;104&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;128&#x27;</span>, <span class="hljs-string">&#x27;120&#x27;</span>, <span class="hljs-string">&#x27;121&#x27;</span>],<br>        <span class="hljs-string">&#x27;语言&#x27;</span>: [<span class="hljs-string">&#x27;汉化普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>],<br>        <span class="hljs-string">&#x27;上映日期&#x27;</span>: [<span class="hljs-string">&#x27;2021&#x27;</span>, <span class="hljs-string">&#x27;2020&#x27;</span>, <span class="hljs-string">&#x27; 2021&#x27;</span>, <span class="hljs-string">&#x27;2021&#x27;</span>, <span class="hljs-string">&#x27;2020&#x27;</span>]&#125;<br><span class="hljs-comment"># 错误示例</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;雄狮少年&#x27;</span> <span class="hljs-keyword">in</span> a.keys()：<br><span class="hljs-comment"># 正确示例</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;雄狮少年&#x27;</span> <span class="hljs-keyword">in</span> a[<span class="hljs-string">&#x27;电影名&#x27;</span>]：<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2022/03/29/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88/"/>
    <url>/2022/03/29/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合（set）属于python无序可变序列，使用一对大括号作为定界符，元素之间使用逗号分隔，同一个集合内的每个元素都是唯一的，不允许重复，集合中只能包含数字、字符串、元组等不可变类型的数据，而不能包含列表、字典、集合等可变类型的数据</p><h3 id="集合对象的创建与删除"><a href="#集合对象的创建与删除" class="headerlink" title="集合对象的创建与删除"></a>集合对象的创建与删除</h3><p>1.直接给集合赋值</p><p>2.使用set（）创建，set（）将列表、元组、字符串、range对象等其他可迭代对象转化为集合，如果有重复元素只保留一个</p><p>3.用del删除整个集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#集合对象的创建和删除</span><br>s = &#123;<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br>s = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">del</span> s<br></code></pre></td></tr></table></figure><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><p>1.add（）增加新元素，如果元素已存在，则被忽略</p><p>2.update（）用于合并另外一个集合中的元素到当前集合中，并自动去除重复元素</p><p>3.pop（）用于随机删除一个元素并返回集合中的一个元素</p><p>4.remove（）删除集合中的元素</p><p>5.discard（）用于从集合中删除一个特定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#集合元素增加和删除</span><br>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>a.add(<span class="hljs-number">4</span>)<br>a.update(&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;)<br>a.discard(<span class="hljs-number">1</span>)<br>a.remove(<span class="hljs-number">1</span>)<br>a.pop()<br></code></pre></td></tr></table></figure><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><p>并集｜</p><p>交集&amp;</p><p>差集 -</p><p>对称差集 </p><p>&lt; &gt; &gt;&#x3D; &lt;&#x3D;作用于集合时表示集合之间的包含关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 集合运算</span><br>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>b = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>a &amp; b <span class="hljs-comment">#交集</span><br>a | b <span class="hljs-comment">#并集</span><br>a - b <span class="hljs-comment">#差集</span><br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; &lt; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125; <span class="hljs-comment">#真子集</span><br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; &lt;= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-comment">#子集</span><br></code></pre></td></tr></table></figure><ul><li>集合中的每个元素都是独一无二的,这一特点在某些情况下使用会使问题简单化</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用字典</title>
    <link href="/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%AD%97%E5%85%B8/%E4%BD%BF%E7%94%A8%E5%AD%97%E5%85%B8/"/>
    <url>/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%AD%97%E5%85%B8/%E4%BD%BF%E7%94%A8%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<p>Python 内置了字典(dict)的支持，使用键-值（key-value）存储，具有极快的查找速度。字典是另一种可变容器模型，且可存储任意类型对象。字典的每个键值对(key&#x3D;&gt;value)用冒号(:)分割，每对之间用逗号(,)分割，整个字典包括在花括号({})中 ，语法格式如下： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;key1 : value1, key2 : value2 &#125;<br></code></pre></td></tr></table></figure><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建字典</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br>name = &#123;&#125;<br>name = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure><p><img src="/images/hexo2.jpg"></p><h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#删除键值对</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br><span class="hljs-keyword">del</span> name[<span class="hljs-number">1</span>]<br>name<br></code></pre></td></tr></table></figure><p><img src="/images/hexo3.jpg"></p><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#修改字典中的值</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>&#125;<br>name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;xiong&#x27;</span><br><span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><p><img src="/images/hexo4.jpg"></p><h3 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#删除键值对</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br><span class="hljs-keyword">del</span> name[<span class="hljs-number">1</span>]<br>name<br></code></pre></td></tr></table></figure><p><img src="/images/hexo5.jpg"></p><p>删除的键值会永远消失</p><h3 id="使用get（）来访问值"><a href="#使用get（）来访问值" class="headerlink" title="使用get（）来访问值"></a>使用get（）来访问值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用get（）来访问值</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br>names = name.get(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>)<br>names<br></code></pre></td></tr></table></figure><p><img src="/images/hexo6.jpg"></p><p>get()的第一个参数用于指定键，是必不可少的，第二个参数为指定的键不存在时要返回的值，是可选的，如果指定的键可能不存在，应该考虑使用方法get(),如果说没有指定第二个参数且指定的键不存在，返回值为None。</p><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><p>for循环; items(); keys(); sorted(); values()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#for循环遍历字典</span><br><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;man&#x27;</span>&#125;<br><br><span class="hljs-comment">#遍历所有键值对 items()</span><br><span class="hljs-comment">#items()返回一个包含键和值的列表</span><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键：&#x27;</span>,k)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;值：&#x27;</span>,v)<br>    <br><span class="hljs-comment">#遍历字典中所有键 key()</span><br><span class="hljs-comment">#keys()其实返回的是一个列表，其中包含字典中的所有键</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键：&#x27;</span>,k)<br>    <br><span class="hljs-comment">#按特定的顺序方式返回键 sorted()</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dict</span>.keys()):<br>    <span class="hljs-built_in">print</span>(k)<br>    <br><span class="hljs-comment">#遍历字典中所有值 values()</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.values():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;值：&#x27;</span>，v)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择结构</title>
    <link href="/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E5%92%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/"/>
    <url>/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E5%92%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="单分支结构：if语句"><a href="#单分支结构：if语句" class="headerlink" title="单分支结构：if语句"></a>单分支结构：if语句</h3><p>Python中if语句的语法格式如下：</p><blockquote><p><font color="blue">if</font>  <font color="orange">&lt;条件&gt;</font>:</p></blockquote><blockquote><blockquote><p>语句块</p></blockquote></blockquote><ul><li>语句块是<font color="blue">if</font>条件满足后执行的一个或多个语句序列</li><li>语句块中语句通过与<font color="blue">if</font>所在行形成缩进表达包含关系</li><li><font color="blue">if</font>语句首先评估<font color="orange">&lt;条件&gt;</font>的结果值，如果结果为<font color="red">True</font>，则执行语句块里的语句序列，然后控制转向程序的下一条语句。如果结果为<font color="lightgreen">False</font>，语句块里的语句会被跳过。</li><li><font color="blue">if</font>语句中语句块执行与否依赖于条件判断。但无论什么情况，控制都会转到<font color="blue">if</font>语句后与该语句同级别的下一条语句</li><li><font color="blue">if</font>语中<font color="orange">&lt;条件&gt;</font>部分可以使用任何能够产生<font color="red">True</font>或<font color="lightgreen">False</font>的语句</li><li>形成判断条件最常见的方式是采用关系操作符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#判断输入的数是不是正数</span><br>x = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hey!&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is positive&quot;</span>)<br>’‘’<br>在这里，如果 x &gt; <span class="hljs-number">0</span> 为 <span class="hljs-literal">False</span> ，那么程序将不会执行两条 <span class="hljs-built_in">print</span> 语句。<br>虽然都是用 <span class="hljs-keyword">if</span> 关键词定义判断，但与C，Java等语言不同，Python不使用 &#123;&#125; 将 <span class="hljs-keyword">if</span> 语句控制的区域包含起来。<br>‘’‘<br></code></pre></td></tr></table></figure><h3 id="二分支结构：if-else语句"><a href="#二分支结构：if-else语句" class="headerlink" title="二分支结构：if-else语句"></a>二分支结构：if-else语句</h3><p>Python中if-else语句用来形成二分支结构，语法格式如下：</p><blockquote><p>if  &lt;条件&gt;:</p></blockquote><blockquote><blockquote><p>  &lt;语句块1&gt;</p></blockquote></blockquote><blockquote><p>else:</p></blockquote><blockquote><blockquote><p>  &lt;语句块2&gt;</p></blockquote></blockquote><ul><li>&lt;语句块1&gt;是在if条件满足后执行的一个或多个语句序列</li><li>&lt;语句块2&gt;是if条件不满足后执行的语句序列</li><li>二分支语句用于区分&lt;条件&gt;的两种可能True或者False，分别形成执行路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">PM = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入PM2.5数值: &quot;</span>))<br><span class="hljs-keyword">if</span> PM &gt;= <span class="hljs-number">75</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空气存在污染，请小心！&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空气没有污染，可以开展户外运动!&quot;</span>)<br></code></pre></td></tr></table></figure><p>二分支结构还有一种更简洁的表达方式，适合通过判断返回特定值，语法格式如下：</p><p>&lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">PM = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入PM2.5数值: &quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空气&#123;&#125;污染!&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;存在&quot;</span> <span class="hljs-keyword">if</span> PM &gt;= <span class="hljs-number">75</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;没有&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="多分支结构：if-elif-else"><a href="#多分支结构：if-elif-else" class="headerlink" title="多分支结构：if-elif-else"></a>多分支结构：if-elif-else</h3><p>Python的if-elif-else描述多分支结构，语句格式如下：</p><blockquote><p>if &lt;条件1&gt;:</p></blockquote><blockquote><blockquote><p>   &lt;语句块1&gt;</p></blockquote></blockquote><blockquote><p>elif &lt;条件2&gt;:</p></blockquote><blockquote><blockquote><p>   &lt;语句块2&gt;</p></blockquote></blockquote><blockquote><p>… </p></blockquote><blockquote><p>else: </p></blockquote><blockquote><blockquote><p>   &lt;语句块N&gt;</p></blockquote></blockquote><ul><li>多分支结构是二分支结构的扩展，这种形式通常用于设置同一个判断条件的多条执行路径。</li><li>Python依次评估寻找第一个结果为True的条件，执行该条件下的语句块，同时结束后跳过整个if-elif-else结构，执行后面的语句。如果没有任何条件成立，else下面的语句块被执行。</li><li>elif 的个数没有限制，可以是1个或者多个，也可以没有。</li><li>else 最多只有1个，也可以没有，即else子句是可选的。</li><li>可以使用 and ， or , not 等关键词结合多个判断条件。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#经典应用：判断某一年份是否为闰年</span><br>year = <span class="hljs-number">1900</span><br><span class="hljs-keyword">if</span> year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a leap year!&quot;</span>)<br><span class="hljs-comment"># 两个条件都满足才执行</span><br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a leap year!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is not a leap year.&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="值的测试"><a href="#值的测试" class="headerlink" title="值的测试"></a>值的测试</h3><p>Python不仅仅可以使用布尔型变量作为条件，它可以直接在if中使用任何表达式作为条件</p><p>大部分表达式的值都会被当作True，但以下表达式值会被当作False：</p><ul><li>False</li><li>None</li><li>0</li><li>空字符串，空列表，空字典，空集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>]<br><span class="hljs-keyword">if</span> mylist:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表不为空&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表为空&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>元组</title>
    <link href="/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%85%83%E7%BB%84/"/>
    <url>/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%85%83%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义元组</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br>name = ()<br>name = (<span class="hljs-number">1</span>,)<br>name = <span class="hljs-built_in">tuple</span>()<br><span class="hljs-comment">#遍历元组中的所有值</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment">#修改元组变量</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>)<br>name<br></code></pre></td></tr></table></figure><h3 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h3><p>元组是轻量级别的列表，功能不如列表强大，如果元组中只有一个元素，则必须在末尾增加一个逗号，试图修改元组的操作是被禁止的,元组的访问速度比列表更快，元组比列表更安全，元组可做字典的键和集合的元素，而列表不可以.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义元组</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br>name = ()<br>name = (<span class="hljs-number">1</span>,)<br>name = <span class="hljs-built_in">tuple</span>()<br><span class="hljs-comment">#遍历元组中的所有值</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h3 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h3><p>给元组变量重新赋值是允许的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#修改元组变量</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>)<br>name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>列表</title>
    <link href="/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%88%97%E8%A1%A8/%E5%88%97%E8%A1%A8/"/>
    <url>/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%88%97%E8%A1%A8/%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。Python有6个序列的内置类型，但最常见的是列表和元组。序列都可以进行的操作包括索引，切片，加，乘，检查成员。此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。列表的数据项不需要具有相同的类型。</p><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建列表</span><br>a = []<br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a = <span class="hljs-built_in">list</span>()<br><span class="hljs-comment">#range（）创建数字列表</span><br>a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><hr><h2 id="访问列表中的值"><a href="#访问列表中的值" class="headerlink" title="访问列表中的值"></a>访问列表中的值</h2><p>与字符串的索引一样，列表索引从0开始,使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;physics&#x27;</span>, <span class="hljs-string">&#x27;chemistry&#x27;</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">2000</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span> ]<br> <br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;list1[0]: &quot;</span>, list1[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;list2[1:5]: &quot;</span>, list2[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>以上输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1[<span class="hljs-number">0</span>]:  physics<br>list2[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]:  [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><hr><h2 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h2><p>你可以对列表的数据项进行修改或更新，你也可以使用append()、insert()、extend()方法来添加列表项，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在列表末尾添加元素</span><br>name.append[<span class="hljs-string">&#x27;li&#x27;</span>]<br><span class="hljs-comment">#在列表中插入元素</span><br>name.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;li&#x27;</span>)<br><span class="hljs-comment">#目标列表元素添加到本列表末尾</span><br>a = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a的地址:&#x27;</span>,a)<br>b = [<span class="hljs-number">40</span>,<span class="hljs-number">50</span>]<br>a.extend(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a列表的元素&#x27;</span>,a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a的地址:&#x27;</span>,<span class="hljs-built_in">id</span>(a))<br></code></pre></td></tr></table></figure><hr><h2 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h2><p>可以使用 del 语句、remove()、pop()、clear()来删除列表的元素，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#del列表删除元素</span><br><span class="hljs-keyword">del</span> name[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#pop删除元素</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>name = names.pop()<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(names)<br><span class="hljs-comment">#根据值删除元素</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>name = names.remove(<span class="hljs-string">&#x27;xiao&#x27;</span>)<br>names<br><span class="hljs-comment">#清空列表元素</span><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>name.clear()<br>name<br></code></pre></td></tr></table></figure><hr><h2 id="Python列表脚本操作符"><a href="#Python列表脚本操作符" class="headerlink" title="Python列表脚本操作符"></a>Python列表脚本操作符</h2><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p><p>如下所示：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h2 id="Python列表切片"><a href="#Python列表切片" class="headerlink" title="Python列表切片"></a>Python列表切片</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>从start开始（包括start），到end结束（不包括end），step表示切片的步长</p><p>[start: end: step]</p><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><p>1.要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引</p><p>2.使用copy()复制列表</p><p>Python 的列表截取实例如下：</p><p>L &#x3D; [‘Google’, ‘Runoob’, ‘Taobao’] </p><p>L[2]&#x3D; ‘Taobao’ </p><p>L[-2] &#x3D;’Runoob’ </p><p>L[1:] &#x3D;[‘Runoob’, ‘Taobao’]</p><p>描述：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">L[2]</td><td align="left">‘Taobao’</td><td align="left">读取列表中第三个元素</td></tr><tr><td align="left">L[-2]</td><td align="left">‘Runoob’</td><td align="left">读取列表中倒数第二个元素</td></tr><tr><td align="left">L[1:]</td><td align="left">[‘Runoob’, ‘Taobao’]</td><td align="left">从第二个元素开始截取列表</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用切片获取列表部分元素</span><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>]<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(name[:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>:])<br><span class="hljs-built_in">print</span>(name[:])<br><span class="hljs-built_in">print</span>(name[-<span class="hljs-number">2</span>:-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment">#使用切片为列表增加元素</span><br>num = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>]<br>num[:<span class="hljs-number">0</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] <span class="hljs-comment"># 在列表头部插入多个元素</span><br>num[<span class="hljs-number">3</span>:<span class="hljs-number">3</span>] = [<span class="hljs-number">4</span>] <span class="hljs-comment"># 在列表中间位置插入元素</span><br>num[<span class="hljs-built_in">len</span>(num):] = [<span class="hljs-number">9</span>] <span class="hljs-comment">#在列表尾部插入元素</span><br><br><span class="hljs-comment">#使用切片替换和修改列表中的元素</span><br>num = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>num[:<span class="hljs-number">3</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <br>num[<span class="hljs-number">4</span>:] = [<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]<br>num[::<span class="hljs-number">2</span>] = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>] <span class="hljs-comment"># 隔一个修改一个</span><br><br><span class="hljs-comment">#使用切片删除元素</span><br>num = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>num[:<span class="hljs-number">3</span>] = [] <span class="hljs-comment">#删除列表前三个元素</span><br><span class="hljs-keyword">del</span> num[:<span class="hljs-number">3</span>]<br><span class="hljs-keyword">del</span> num[::<span class="hljs-number">2</span>] <span class="hljs-comment">#隔一个删一个</span><br><br><span class="hljs-comment">#遍历切片</span><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment">#复制列表</span><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>]<br>names = name[:]<br><span class="hljs-built_in">print</span>(names)<br><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>]<br>names = name.copy()<br>names<br></code></pre></td></tr></table></figure><h2 id="Python列表函数-amp-方法"><a href="#Python列表函数-amp-方法" class="headerlink" title="Python列表函数&amp;方法"></a>Python列表函数&amp;方法</h2><p>Python包含以下函数:</p><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-list-cmp.html">cmp(list1, list2)</a> 比较两个列表的元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-list-len.html">len(list)</a> 列表元素个数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-list-max.html">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-list-min.html">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-list-list.html">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法:</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">[list.pop(<a href="https://www.runoob.com/python/att-list-pop.html">index&#x3D;-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-list-reverse.html">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python/att-list-sort.html">list.sort(cmp&#x3D;None, key&#x3D;None, reverse&#x3D;False)</a> 对原列表进行排序</td></tr></tbody></table><h2 id="对数字列表执行简单的统计计算"><a href="#对数字列表执行简单的统计计算" class="headerlink" title="对数字列表执行简单的统计计算"></a>对数字列表执行简单的统计计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(a)) <span class="hljs-comment">#统计最小值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(a)) <span class="hljs-comment">#统计最大值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(a)) <span class="hljs-comment">#求和</span><br></code></pre></td></tr></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><p>sort()对列表永久排序</p><p>sorted()对列表临时排序</p><p>倒着打印列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sort()对列表永久排序</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>names.sort()<br><span class="hljs-built_in">print</span>(names)<br>names.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(names)<br><span class="hljs-comment">#sorted()对列表临时排序</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(names))<br><span class="hljs-built_in">print</span>(names)<br><span class="hljs-comment">#倒着打印列表</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>names.reverse()<br>names<br></code></pre></td></tr></table></figure><h2 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h2><h4 id="列表解析-x2F-列表推导式"><a href="#列表解析-x2F-列表推导式" class="headerlink" title="列表解析&#x2F;列表推导式"></a>列表解析&#x2F;列表推导式</h4><p>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素，列表推导式可以使用非常简洁的方式对列表或其他可迭代对象的元素进行遍历、过滤或再次计算，快速生成满足需求的新列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">[expression <span class="hljs-keyword">for</span> expr1 <span class="hljs-keyword">in</span> sequence1 <span class="hljs-keyword">if</span> condition1<br>            <span class="hljs-keyword">for</span> expr2 <span class="hljs-keyword">in</span> sequence2 <span class="hljs-keyword">if</span> condition2<br>            <span class="hljs-keyword">for</span> expr3 <span class="hljs-keyword">in</span> sequence3 <span class="hljs-keyword">if</span> condition3<br>            ...<br>            <span class="hljs-keyword">for</span> exprN <span class="hljs-keyword">in</span> sequenceN <span class="hljs-keyword">if</span> conditionN]<br><span class="hljs-comment">#列表解析/列表推导式</span><br>squares = [value**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)]<br><span class="hljs-comment">#例：使用列表推导式实现嵌套列表（二维列表）的平铺</span><br>a = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br>b = [j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i]<br><span class="hljs-comment">#例：在列表推导式中使用if过滤不符合条件的元素</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>b = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">5</span>]<br><span class="hljs-comment">#例：在列表推导式中同时遍历多个列表或可迭代对象</span><br>[(x,y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-keyword">if</span> x ==<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>] <span class="hljs-keyword">if</span> y != x]<br><span class="hljs-comment">#对包含多个循环的列表推导式，要清楚多个循环的执行顺序和嵌套关系</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串格式化</title>
    <link href="/2022/02/27/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/2022/02/27/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="f字符串"><a href="#f字符串" class="headerlink" title="f字符串"></a>f字符串</h3><p>f字符串，亦称为格式化<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>常量（formatted string literals），是Python3.6新引入的一种字符串格式化方法，f-字符串在形式上是以 f 或 F 修饰符引领的字符串（f’xxx’ 或 F’xxx’），以大括号 {} 标明被替换的字段；f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式：f字符串在功能方面不逊于传统的%-formatting语句和str.format()函数，同时性能又优于二者，且使用起来也更加简洁明了，因此对于Python3.6及以后的版本，推荐使用f-string进行字符串格式化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">first_name = <span class="hljs-string">&quot;ada&quot;</span><br><br>last_name = <span class="hljs-string">&quot;lovelace&quot;</span><br><br>full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span>&quot;</span><br><br><span class="hljs-built_in">print</span>(full_name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello,<span class="hljs-subst">&#123;full_name.title()&#125;</span>&quot;</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">1234</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;a is <span class="hljs-subst">&#123;a:^#10X&#125;</span>&#x27;</span>      <span class="hljs-comment"># 居中，宽度10位，十六进制整数（大写字母），显示0X前缀</span><br><span class="hljs-string">&#x27;a is   0X4D2   &#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">1234.5678</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;b is <span class="hljs-subst">&#123;b:&lt;+<span class="hljs-number">10.2</span>f&#125;</span>&#x27;</span>    <span class="hljs-comment"># 左对齐，宽度10位，显示正号（+），定点数格式，2位小数</span><br><span class="hljs-string">&#x27;b is +1234.57  &#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>c = <span class="hljs-number">12345678</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;c is <span class="hljs-subst">&#123;c:015,d&#125;</span>&#x27;</span>      <span class="hljs-comment"># 高位补零，宽度15位，十进制整数，使用,作为千分分割位</span><br><span class="hljs-string">&#x27;c is 000,012,345,678&#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>d = <span class="hljs-number">0.5</span> + <span class="hljs-number">2.5j</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;d is <span class="hljs-subst">&#123;d:<span class="hljs-number">30.3</span>e&#125;</span>&#x27;</span>      <span class="hljs-comment"># 宽度30位，科学计数法，3位小数</span><br><span class="hljs-string">&#x27;d is           5.000e-01+2.500e+00j&#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datetime<br><span class="hljs-meta">&gt;&gt;&gt; </span>e = datetime.datetime.today()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;the time is <span class="hljs-subst">&#123;e:%Y-%m-%d (%a) %H:%M:%S&#125;</span>&#x27;</span>   <span class="hljs-comment"># datetime时间格式</span><br><span class="hljs-string">&#x27;the time is 2018-07-14 (Sat) 20:46:02&#x27;</span><br></code></pre></td></tr></table></figure><p>![截屏2022-03-23 下午8.27.56](&#x2F;Users&#x2F;xiaozhiying&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2022-03-23 下午8.27.56.png)</p><h3 id="format格式化字符串"><a href="#format格式化字符串" class="headerlink" title="format格式化字符串"></a>format格式化字符串</h3><p>Python用字符串的format()方法来格式化字符串。</p><p>具体用法如下，字符串中花括号 {} 的部分会被format传入的参数替代，传入的值可以是字符串，也可以是数字或者别的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><br><span class="hljs-comment">#可以用数字指定传入参数的相对位置</span><br><span class="hljs-string">&#x27;&#123;2&#125; &#123;1&#125; &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><br><span class="hljs-comment">#还可以指定传入参数的名称</span><br><span class="hljs-string">&#x27;&#123;color&#125; &#123;n&#125; &#123;x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(n=<span class="hljs-number">10</span>, x=<span class="hljs-number">1.5</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br><br><span class="hljs-comment">#可以在一起混用</span><br><span class="hljs-string">&#x27;&#123;color&#125; &#123;0&#125; &#123;x&#125; &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, x = <span class="hljs-number">1.5</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br><br><span class="hljs-comment">#可以用&#123;&lt;相对位置&gt;:&lt;格式&gt;&#125;指定输出格式</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi<br><span class="hljs-string">&#x27;&#123;0:10&#125;&#123;1:10d&#125; &#123;2:10.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span> * pi)<br><br></code></pre></td></tr></table></figure><h3 id="使用旧式的-方法进行格式化"><a href="#使用旧式的-方法进行格式化" class="headerlink" title="使用旧式的 % 方法进行格式化"></a>使用旧式的 % 方法进行格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;some numbers:&quot;</span><br>x = <span class="hljs-number">1.34</span><br>y = <span class="hljs-number">2</span><br><span class="hljs-comment"># 用百分号隔开，括号括起来</span><br>t = <span class="hljs-string">&quot;%s %f, %d&quot;</span> % (s, x, y)<br>t<br></code></pre></td></tr></table></figure><h3 id="Python字符串格式化符号"><a href="#Python字符串格式化符号" class="headerlink" title="Python字符串格式化符号"></a>Python字符串格式化符号</h3><table><thead><tr><th>符 号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整型</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f 和 %E 的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><h3 id="格式化操作符辅助指令"><a href="#格式化操作符辅助指令" class="headerlink" title="格式化操作符辅助指令"></a>格式化操作符辅助指令</h3><table><thead><tr><th>符 号</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>定义宽度或者小数点精度</td></tr><tr><td>-</td><td>用做左对齐</td></tr><tr><td>+</td><td>在正数前面显示加号( + )</td></tr><tr><td>《sp》</td><td>在正数前面显示空格</td></tr><tr><td>#</td><td>在八进制前显示零，十六进制前显示’0x’或’0X’</td></tr><tr><td>0</td><td>显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td>%</td><td>‘%%’输出一个单一的’%’</td></tr><tr><td>(var)</td><td>映射变量(字典参数)</td></tr><tr><td>m.n.</td><td>m显示最小总宽度,n是小数点后的位数</td></tr></tbody></table><h3 id="格式化输出浮点数"><a href="#格式化输出浮点数" class="headerlink" title="格式化输出浮点数"></a>格式化输出浮点数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">pi = <span class="hljs-number">3.141592653</span>  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%10.3f&#x27;</span> % pi)        <span class="hljs-comment"># 字段宽10，精度3  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pi = %.*f&quot;</span> % (<span class="hljs-number">3</span>,pi)) <span class="hljs-comment"># 用*从后面的元组中读取字段宽度或精度  </span><br>pi = <span class="hljs-number">3.142</span>  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%010.3f&#x27;</span> % pi)       <span class="hljs-comment">#  用0填充空白  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%-10.3f&#x27;</span> % pi)       <span class="hljs-comment">#  左对齐     </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%+f&#x27;</span> % pi)           <span class="hljs-comment">#   显示正负号</span><br></code></pre></td></tr></table></figure><h3 id="print自动换行与不换行"><a href="#print自动换行与不换行" class="headerlink" title="print自动换行与不换行"></a>print自动换行与不换行</h3><p>print 会自动在行末加上回车, 如果不需回车，只需在 print 语句的结尾添加一个end()，就可以改变它的行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br><span class="hljs-comment"># 经典应用</span><br><span class="hljs-comment">#读入层数和使用字母两个变量，打印一个倒三角</span><br><span class="hljs-comment">#注：读入字母为单字</span><br><span class="hljs-comment">#以下为示例</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">请输入你的三角高度：6</span><br><span class="hljs-string">请输入你想用的填充符：e</span><br><span class="hljs-string">以下是输出结果：</span><br><span class="hljs-string">eeeeeeeeeee</span><br><span class="hljs-string"> eeeeeeeee</span><br><span class="hljs-string">  eeeeeee</span><br><span class="hljs-string">   eeeee</span><br><span class="hljs-string">    eee</span><br><span class="hljs-string">     e</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 提示：三角底部为 层数 * 2 - 1，三角顶部为 1</span><br><span class="hljs-comment"># 提示：使用end中的空格和\n控制空格和换行</span><br><span class="hljs-comment"># 请在这里填写您的代码</span><br>h = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的三角高度:&quot;</span>))<br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你想用的填充字符：&quot;</span>)<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> h&gt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>*i + a*(h*<span class="hljs-number">2</span>-<span class="hljs-number">1</span>),end = <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    h -= <span class="hljs-number">1</span><br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="print-format用法"><a href="#print-format用法" class="headerlink" title="print.format用法"></a>print.format用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125;,&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;zhiying&#x27;</span>, <span class="hljs-number">18</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;,&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;zhiying&#x27;</span>,<span class="hljs-string">&#x27;boy&#x27;</span>,<span class="hljs-number">18</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;name&#125;,&#123;sex&#125;,&#123;age&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(age=<span class="hljs-number">32</span>,sex=<span class="hljs-string">&#x27;male&#x27;</span>,name=<span class="hljs-string">&#x27;zhiying&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="格式限定符"><a href="#格式限定符" class="headerlink" title="格式限定符"></a>格式限定符</h3><ul><li>它有着丰富的的“格式限定符”（语法是{}中带:号），比如：</li></ul><p>填充与对齐</p><ul><li>填充常跟对齐一起使用</li><li>^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度</li><li>:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:a&lt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:p^10&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运算符</title>
    <link href="/2022/02/26/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <url>/2022/02/26/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>运算符说明</th><th>Python运算符</th><th>优先级</th><th align="center">结合性</th><th>优先级顺序</th></tr></thead><tbody><tr><td>小括号</td><td>( )</td><td>19</td><td align="center">无</td><td>高 ︿  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   |  | 低</td></tr><tr><td>索引运算符</td><td>x[i] 或 x[i1: i2 [:i3]]</td><td>18</td><td align="center">左</td><td></td></tr><tr><td>属性访问</td><td>x.attribute</td><td>17</td><td align="center">左</td><td></td></tr><tr><td>乘方</td><td>**</td><td>16</td><td align="center">右</td><td></td></tr><tr><td>按位取反</td><td>~</td><td>15</td><td align="center">右</td><td></td></tr><tr><td>符号运算符</td><td>+（正号）、-（负号）</td><td>14</td><td align="center">右</td><td></td></tr><tr><td>乘除</td><td>*、&#x2F;、&#x2F;&#x2F;、%</td><td>13</td><td align="center">左</td><td></td></tr><tr><td>加减</td><td>+、-</td><td>12</td><td align="center">左</td><td></td></tr><tr><td>位移</td><td>&gt;&gt;、&lt;&lt;</td><td>11</td><td align="center">左</td><td></td></tr><tr><td>按位与</td><td>&amp;</td><td>10</td><td align="center">右</td><td></td></tr><tr><td>按位异或</td><td>^</td><td>9</td><td align="center">左</td><td></td></tr><tr><td>按位或</td><td>|</td><td>8</td><td align="center">左</td><td></td></tr><tr><td>比较运算符</td><td>&#x3D;&#x3D;、!&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;</td><td>7</td><td align="center">左</td><td></td></tr><tr><td>is 运算符</td><td>is、is not</td><td>6</td><td align="center">左</td><td></td></tr><tr><td>in 运算符</td><td>in、not in</td><td>5</td><td align="center">左</td><td></td></tr><tr><td>逻辑非</td><td>not</td><td>4</td><td align="center">右</td><td></td></tr><tr><td>逻辑与</td><td>and</td><td>3</td><td align="center">左</td><td></td></tr><tr><td>逻辑或</td><td>or</td><td>2</td><td align="center">左</td><td></td></tr><tr><td>逗号运算符</td><td>exp1, exp2</td><td>1</td><td align="center">左</td><td></td></tr></tbody></table><p>Python 中大部分运算符都具有左结合性，也就是从左到右执行；只有 ** 乘方运算符、单目运算符（例如 not 逻辑非运算符）、赋值运算符和三目运算符例外，它们具有右结合性，也就是从右向左执行。</p><h2 id="lt-lt-左移运算符"><a href="#lt-lt-左移运算符" class="headerlink" title="&lt;&lt;左移运算符"></a>&lt;&lt;左移运算符</h2><p>Python 左移运算符<code>&lt;&lt;</code>用来把操作数的各个二进制位全部左移若干位，高位丢弃，低位补 0。</p><p>例如，<code>9&lt;&lt;3</code>可以转换为如下的运算：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;&lt;</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">1001</span>  <span class="hljs-string">（9</span> <span class="hljs-string">在内存中的存储）</span><br><span class="hljs-string">-----------------------------------------------------------------------------------</span><br>   <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0100 </span><span class="hljs-number">1000</span>  <span class="hljs-string">（72</span> <span class="hljs-string">在内存中的存储）</span><br></code></pre></td></tr></table></figure><p>所以<code>9&lt;&lt;3</code>的结果为 72。</p><p>又如，<code>(-9)&lt;&lt;3</code>可以转换为如下的运算：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;&lt;</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">0111</span>  <span class="hljs-string">（-9</span> <span class="hljs-string">在内存中的存储）</span><br><span class="hljs-string">-----------------------------------------------------------------------------------</span><br>   <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1011 </span><span class="hljs-number">1000</span>  <span class="hljs-string">（-72</span> <span class="hljs-string">在内存中的存储）</span><br></code></pre></td></tr></table></figure><p>所以<code>(-9)&lt;&lt;3</code>的结果为 -72</p><p>如果数据较小，被丢弃的高位不包含 1，那么左移 n 位相当于乘以 2 的 n 次方。</p><p>使用 Python 代码对上面的分析进行验证：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">print(<span class="hljs-string">&quot;%X&quot;</span> % (<span class="hljs-number">9</span>&lt;&lt;3) )print(<span class="hljs-string">&quot;%X&quot;</span> % ((<span class="hljs-name">-9</span>)&lt;&lt;3) )<br></code></pre></td></tr></table></figure><p>运行结果：<br>48<br>-48</p><h2 id="gt-gt-右移运算符"><a href="#gt-gt-右移运算符" class="headerlink" title="&gt;&gt;右移运算符"></a>&gt;&gt;右移运算符</h2><p>Python 右移运算符<code>&gt;&gt;</code>用来把操作数的各个二进制位全部右移若干位，低位丢弃，高位补 0 或 1。如果数据的最高位是 0，那么就补 0；如果最高位是 1，那么就补 1。</p><p>例如，<code>9&gt;&gt;3</code>可以转换为如下的运算：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;&gt;</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">1001</span>  <span class="hljs-string">（9</span> <span class="hljs-string">在内存中的存储）</span><br><span class="hljs-string">-----------------------------------------------------------------------------------</span><br>   <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0001</span>  <span class="hljs-string">（1</span> <span class="hljs-string">在内存中的存储）</span><br></code></pre></td></tr></table></figure><p>所以<code>9&gt;&gt;3</code>的结果为 1。</p><p>又如，<code>(-9)&gt;&gt;3</code>可以转换为如下的运算：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;&gt;</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">0111</span>  <span class="hljs-string">（-9</span> <span class="hljs-string">在内存中的存储）</span><br><span class="hljs-string">-----------------------------------------------------------------------------------</span><br>   <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1110</span>  <span class="hljs-string">（-2</span> <span class="hljs-string">在内存中的存储）</span><br></code></pre></td></tr></table></figure><p>所以<code>(-9)&gt;&gt;3</code>的结果为 -2</p><p>如果被丢弃的低位不包含 1，那么右移 n 位相当于除以 2 的 n 次方（但被移除的位中经常会包含 1）。</p><p>使用 Python 代码对上面的分析进行验证：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">print(<span class="hljs-string">&quot;%X&quot;</span> % (<span class="hljs-number">9</span>&gt;&gt;3) )print(<span class="hljs-string">&quot;%X&quot;</span> % ((<span class="hljs-name">-9</span>)&gt;&gt;3) )<br></code></pre></td></tr></table></figure><p>运行结果：<br>1<br>-2</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串操作</title>
    <link href="/2022/02/26/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/02/26/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><p>字符串可以使用+、—、*进行拼接操作</p><ul><li>字符串和字符串可以拼接，但是不能直接和其他数据进行拼接，需要用 <code>str()</code> 来转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello &#x27;</span> + <span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-string">&#x27;hello&#x27;</span> * <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="split分割操作"><a href="#split分割操作" class="headerlink" title="split分割操作"></a>split分割操作</h3><p>s.split()将s按照空格（包括多个空格，制表符\t，换行符\n等）分割，并返回所有分割得到的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">line = <span class="hljs-string">&quot;1 2 3 4  5&quot;</span><br>numbers = line.split() <span class="hljs-comment">#默认按空格分隔</span><br><span class="hljs-built_in">print</span>(numbers)<br></code></pre></td></tr></table></figure><p>s.split(sep)以给定的sep为分隔符对s进行分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">line = <span class="hljs-string">&quot;1,2,3,4,5&quot;</span><br>numbers = line.split(<span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-comment">#如果有写分隔符，按指示分隔符分隔</span><br><span class="hljs-built_in">print</span>(numbers)<br></code></pre></td></tr></table></figure><h3 id="join连接操作"><a href="#join连接操作" class="headerlink" title="join连接操作"></a>join连接操作</h3><p>与分割相反，s.join(str_sequence)的作用是以s为连接符将字符串序列str_sequence中的元素连接起来，并返回连接后得到的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">number = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-string">&#x27; &#x27;</span>.join(number) <span class="hljs-comment"># 产生新的字符串，原本s并没有被修改</span><br><span class="hljs-built_in">print</span>(number)<br>news = <span class="hljs-string">&#x27;,&#x27;</span>.join(number)<br><span class="hljs-built_in">print</span>(news)<br></code></pre></td></tr></table></figure><h3 id="replace替换操作"><a href="#replace替换操作" class="headerlink" title="replace替换操作"></a>replace替换操作</h3><p>s.replace(part1, part2)将字符串s中指定的部分part1替换成想要的部分part2，并返回新的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello world&quot;</span><br>s.replace(<span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>)<br><span class="hljs-comment">#此时，s的值并没有变化，替换方法只是生成了一个新的字符串。</span><br></code></pre></td></tr></table></figure><h3 id="count统计操作"><a href="#count统计操作" class="headerlink" title="count统计操作"></a>count统计操作</h3><p>s.count(sub) 返回子字符串在字符串中出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">web = <span class="hljs-string">&#x27;http://www.dolphin-labs.com/&#x27;</span><br>web.count(<span class="hljs-string">&#x27;w&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="去除多余空格"><a href="#去除多余空格" class="headerlink" title="去除多余空格"></a>去除多余空格</h3><p>s.strip()返回一个将s两端的多余空格除去的新字符串。</p><p>s.lstrip()返回一个将s开头的多余空格除去的新字符串。</p><p>s.rstrip()返回一个将s结尾的多余空格除去的新字符串。</p><ul><li>还可以使用replace去掉空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;  hello world   &quot;</span><br>s.strip()<br>s.lstrip()<br>s.rstrip()<br>s.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="大小写转化"><a href="#大小写转化" class="headerlink" title="大小写转化"></a>大小写转化</h3><p>s.upper()方法返回一个将s中的字母全部大写的新字符串。</p><p>s.lower()方法返回一个将s中的字母全部小写的新字符串。</p><p>s.title()方法返回一个将s中的首字母大写的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;hello world&quot;</span>.upper()<br><span class="hljs-string">&quot;HELLO WORLD&quot;</span>.lower()<br><span class="hljs-string">&quot;hello world&quot;</span>.title()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
