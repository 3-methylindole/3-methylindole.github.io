<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据类型的性质</title>
    <link href="/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%80%A7%E8%B4%A8/"/>
    <url>/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%80%A7%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="数据类型的性质"><a href="#数据类型的性质" class="headerlink" title="数据类型的性质"></a>数据类型的性质</h2><p>typeof()返回一个变量或表达式的类型</p><p>table()输出变量中每个不同值出现次数，简称频数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> table<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 1 2 3</span><br><span class="hljs-comment"># 3 2 1</span><br></code></pre></td></tr></table></figure><p>结果第一行表示元素，第二行表示元素的频数。</p><p>attributes()输出变量对象的所有属性，也可以修改属性。</p><p><strong>class()返回变量类型的类属</strong></p><ul><li>mode</li></ul><p>mode中将integer和double显示为numeric</p><ul><li>class</li></ul><p>mode是指变量的类型如：数值型、字符型、逻辑型等<br>class是指变量的类别如：矩阵、列表、数据框等</p><ul><li>typeof</li></ul><p>typeof是对变量类型的细分</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符型数据及其处理</title>
    <link href="/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%90%91%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97/"/>
    <url>/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%90%91%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="字符型数据及其处理"><a href="#字符型数据及其处理" class="headerlink" title="字符型数据及其处理"></a>字符型数据及其处理</h2><h4 id="字符型向量"><a href="#字符型向量" class="headerlink" title="字符型向量"></a>字符型向量</h4><p>字符型向量是元素为字符串的向量。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">s1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;abc&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&#x27;a cat&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&#x27;李明&#x27;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>原始字符串 (raw string)，方法是用 r”(…)” 的格式</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">print<span class="hljs-punctuation">(</span>r<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;/asdf/ad,/a,gd/as/df,.af&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># /asdf/ad,/a,gd/as/df,.af</span><br></code></pre></td></tr></table></figure><p>原始字符串如果内容中包含了圆括号，可以将边界的圆括号改为方括号 [] 或者大括号 {}。</p><h4 id="paste-连接"><a href="#paste-连接" class="headerlink" title="paste()连接"></a>paste()连接</h4><p>paste（）函数用来连接两个字符型向量，元素一一对应连接，默认用空格连接。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;ab&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;cd&#x27;</span><span class="hljs-punctuation">)</span><br>y <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;ef&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;mn&#x27;</span><span class="hljs-punctuation">)</span><br>paste<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">#&quot;ab ef&quot; &quot;cd mn&quot;</span><br></code></pre></td></tr></table></figure><p>paste()连接字符型变量可以一对多，使用collapse参数可以把字符向量的各个元素连接成单一的字符串。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">paste<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>collapse<span class="hljs-operator">=</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># &#x27;ab&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="转换大小写"><a href="#转换大小写" class="headerlink" title="转换大小写"></a>转换大小写</h4><p>toupper()把字符型向量内容转化为大写；</p><p>tolower()把字符型向量内容转化为小写；</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">toupper<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># &quot;A&quot; &quot;B&quot;</span><br>tolower<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;B&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># &quot;a&quot; &quot;b&quot;</span><br></code></pre></td></tr></table></figure><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><p>nchar(x, type &#x3D; ‘bytes’)计算字符型向量x中每个字符串以字节为单位的长度；</p><p>nchar(x,type &#x3D; ‘chars’)计算字符型向量x中每个字符串的以字符个数为单位的长度，此时一个汉字为一个单位。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">nchar<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bytes&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1 1</span><br>nchar<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;字符串长度&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;chars&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 5 1</span><br></code></pre></td></tr></table></figure><h4 id="substr-取子串"><a href="#substr-取子串" class="headerlink" title="substr()取子串"></a>substr()取子串</h4><p>substr(x,start,stop)从字符串中取出从start到stop的子串</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">substr<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;abcde&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># &#x27;abc&#x27;</span><br></code></pre></td></tr></table></figure><p>若x为字符型向量，则对每个元素取子串</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">substr<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;abcde&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;fghj&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># &quot;abc&quot; &quot;fgh&quot;</span><br></code></pre></td></tr></table></figure><p>substring(x,start)取从start到末尾的子串</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">substring<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;abcde&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;fghj&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># &quot;cde&quot; &quot;hj&quot;</span><br></code></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li>as.numeric()：内容为数字的字符型转化为数值</li><li>as.character()：把数值型转化为字符型</li></ul><h4 id="gsub-字符串替换功能"><a href="#gsub-字符串替换功能" class="headerlink" title="gsub()字符串替换功能"></a>gsub()字符串替换功能</h4><p>gsub()可以替换字符串中的子串，<strong>数据清理中常用</strong>，如中文标点改英文标点，去掉空格等。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&#x27;1,3;5&#x27;</span><br>gsub<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;;&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-punctuation">,</span>x<span class="hljs-punctuation">,</span>fix <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># &#x27;1,3,5&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逻辑型向量和运算</title>
    <link href="/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E9%80%BB%E8%BE%91%E5%9E%8B%E5%90%91%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97/"/>
    <url>/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E9%80%BB%E8%BE%91%E5%9E%8B%E5%90%91%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="逻辑型向量及其运算"><a href="#逻辑型向量及其运算" class="headerlink" title="逻辑型向量及其运算"></a>逻辑型向量及其运算</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">sele <span class="hljs-operator">&lt;-</span> <span class="hljs-punctuation">(</span>log10<span class="hljs-punctuation">(</span><span class="hljs-number">15</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span>; print<span class="hljs-punctuation">(</span>sele<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># TRUE</span><br><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><br><span class="hljs-comment"># FALSE TRUE TRUE</span><br><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-operator">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># FALSE FALSE TRUE TRUE</span><br></code></pre></td></tr></table></figure><p><strong>向量与标量的运算是向量每个元素与标量都分别运算一次，等长向量的运算时对应元素的运算，不等长但长度为倍数关系的向量运算是把短的从头重复利用。</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment">#NA与NA比较</span><br><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><br><span class="hljs-comment"># FALSE NA TRUE</span><br><span class="hljs-literal">NA</span> <span class="hljs-operator">==</span> <span class="hljs-literal">NA</span><br><span class="hljs-comment"># NA</span><br><span class="hljs-comment">#为了判断向量每个元素是否 NA，用 is.na() 函数</span><br><span class="hljs-built_in">is.na</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># FALSE TRUE FALSE</span><br></code></pre></td></tr></table></figure><p>除is.na()检测外，其他运算都为NA</p><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><p>逻辑运算符为 &amp;, | 和!, 分别表示 “同时成立”、“两者至少其一成立”、“条件的反面”。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;</span> y <span class="hljs-operator">==</span> <span class="hljs-number">0</span><br>x <span class="hljs-operator">==</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span> y <span class="hljs-operator">==</span> <span class="hljs-number">1</span><br><span class="hljs-operator">!</span><span class="hljs-punctuation">(</span>x <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;</span> y <span class="hljs-operator">==</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>&amp;&amp; 和 || 分别为短路的标量逻辑与和短路的标量逻辑或，仅对两个标量进行运算，如果有向量也仅使用第一个元素。一般用在 if 语句、while 语句中，且只要第一个比较已经决定最终结果就不计算第二个比较。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-keyword">if</span><span class="hljs-punctuation">(</span><span class="hljs-literal">TRUE</span> <span class="hljs-operator">||</span> <span class="hljs-built_in">sqrt</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span> <span class="hljs-keyword">next</span><br><span class="hljs-comment">#其中的 sqrt(-1) 部分不会执行。其中条件的结果为 TRUE, 第二部分没有参加计算，否则第二部分的计算会发生函数自变量范围错误。</span><br></code></pre></td></tr></table></figure><h4 id="逻辑运算函数"><a href="#逻辑运算函数" class="headerlink" title="逻辑运算函数"></a>逻辑运算函数</h4><p>all()测试所有向量是否为真，any()测试向量至少一个元素为真，向量中可以存在缺失值，结果可能为缺失值。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">all</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] FALSE</span><br><span class="hljs-built_in">any</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] TRUE</span><br><span class="hljs-built_in">all</span><span class="hljs-punctuation">(</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] NA</span><br><span class="hljs-built_in">any</span><span class="hljs-punctuation">(</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] NA</span><br></code></pre></td></tr></table></figure><p>函数 which() 返回真值对应的所有下标。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">which<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 2 3</span><br>which<span class="hljs-punctuation">(</span><span class="hljs-punctuation">(</span><span class="hljs-number">11</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">12</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 3 4 5</span><br></code></pre></td></tr></table></figure><p>函数 identical(x,y) 比较两个 R 对象 x 与 y 的内容是否完全相同，结果只会取标量 TRUE 与 FALSE 两种。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">identical<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] FALSE</span><br>identical<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1L</span><span class="hljs-punctuation">,</span><span class="hljs-number">2L</span><span class="hljs-punctuation">,</span><span class="hljs-number">3L</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] FALSE</span><br></code></pre></td></tr></table></figure><p>函数 duplicated() 返回每个元素是否为重复值的结果，</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">duplicated<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] FALSE FALSE TRUE FALSE FALSE FALSE TRUE</span><br></code></pre></td></tr></table></figure><p>用函数 unique() 可以返回去掉重复值的结果。</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>向量下标及子集</title>
    <link href="/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E5%90%91%E9%87%8F%E4%B8%8B%E6%A0%87%E5%8F%8A%E5%AD%90%E9%9B%86/"/>
    <url>/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E5%90%91%E9%87%8F%E4%B8%8B%E6%A0%87%E5%8F%8A%E5%AD%90%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="向量下标及子集"><a href="#向量下标及子集" class="headerlink" title="向量下标及子集"></a>向量下标及子集</h2><p>对于向量x，在后面加方括号和下标可以访问向量元素和子集</p><p>x[2]表示取出第二个元素，x[c(1,3)]表示取出第一个和第三号元素。</p><p><strong>负下标表示删除对应正下标元素</strong></p><p>例如x[-2]表示删除第二个元素</p><p><strong>x[]表示取全部元素作为子集，与x本身不同</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">6.25</span><span class="hljs-punctuation">)</span><br>x<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">999</span><br>x<br><span class="hljs-comment">## [1] 999 999 999</span><br>x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">6.25</span><span class="hljs-punctuation">)</span> x <span class="hljs-operator">&lt;-</span> 999<br>x<br><span class="hljs-comment">## [1] 999</span><br></code></pre></td></tr></table></figure><p><strong>如果下标访问超界，R不会报错，超界部分用NA表示</strong></p><p>逻辑下标表示取出符合条件的下标元素</p><p>which()用来查找符合满足条件的<strong>下标</strong>，例如which(x&gt;5)</p><p>向量可以为每个元素命名</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">ages <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot; 李明&quot;</span><span class="hljs-operator">=</span><span class="hljs-number">30</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; 张聪&quot;</span><span class="hljs-operator">=</span><span class="hljs-number">25</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; 刘颖&quot;</span><span class="hljs-operator">=</span><span class="hljs-number">28</span><span class="hljs-punctuation">)</span><br><br>ages <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">30</span><span class="hljs-punctuation">,</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span> <span class="hljs-number">28</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>ages<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot; 李明&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; 张聪&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; 刘颖&quot;</span><span class="hljs-punctuation">)</span><br><br>ages <span class="hljs-operator">&lt;-</span> setNames<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">30</span><span class="hljs-punctuation">,</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span> <span class="hljs-number">28</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot; 李明&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; 张聪&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; 刘颖&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>这样可以通过名字访问元素</p><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><p>unique()取出向量重复元素</p><p>in判断是否属于关系</p><p>函数 match(x, table) 对向量 x 的每个元素，从向量 table 中查找其<strong>首次</strong>出现位置并<strong>返回这些位置</strong>。没有匹配到的元素位置返回 NA_integer_(整数型缺失值)。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">match<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 2</span><br>match<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 2</span><br>match<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 3 2</span><br>match<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 3 2 NA</span><br></code></pre></td></tr></table></figure><ul><li>intersect(x,y)求交集</li><li>union()求并集</li><li>setdiff(x,y)求差集</li><li>setequal(x,y)判断集合是否相等，不受次序的影响</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于百度百科的爬虫实战</title>
    <link href="/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/%E5%AE%9E%E6%88%981%20%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91/"/>
    <url>/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/%E5%AE%9E%E6%88%981%20%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91/</url>
    
    <content type="html"><![CDATA[<h1 id="基于百度百科的爬虫实战"><a href="#基于百度百科的爬虫实战" class="headerlink" title="基于百度百科的爬虫实战"></a>基于百度百科的爬虫实战</h1><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>以“网络爬虫”的百度百科词条为起始网页，随机爬取该页面中的20个词条信息（包括词条名称，链接）。</p><h2 id="使用的python库"><a href="#使用的python库" class="headerlink" title="使用的python库"></a>使用的python库</h2><p>requests, bs4, re,  openpyxl</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h4 id="步骤1-打开“网络爬虫”的百度百科词条页面，如下图1所示"><a href="#步骤1-打开“网络爬虫”的百度百科词条页面，如下图1所示" class="headerlink" title="步骤1:打开“网络爬虫”的百度百科词条页面，如下图1所示"></a>步骤1:打开“网络爬虫”的百度百科词条页面，如下图1所示</h4><p><img src="/images/%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E5%AE%9E%E6%88%98.png" alt="百度百科实战"></p><p>页面中出现了很多名词解释，每一条解释都对应一个链接。当点击这些链接，我们就去到了其他页面。下面，我们用爬虫来实现这个操作：爬取图1页面正文中的前20个链接。</p><h4 id="步骤2-找链接标签的规律"><a href="#步骤2-找链接标签的规律" class="headerlink" title="步骤2:找链接标签的规律"></a>步骤2:找链接标签的规律</h4><p>以图1中的第1段为例，在“开发者模式”下的elements中定位到标签，如下图2所示。可以看到，第1段中出现的带有链接的文本都出现在了&lt;a target&#x3D;’_blank’&gt;标签中，具体地，该标签的href属性值即为我们想要爬取的信息。</p><p><img src="/images/%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E5%AE%9E%E6%88%982.png" alt="百度百科实战"></p><p>但是，在该标签中除了我们需要的如&#x2F;item&#x2F;%E7%A8%8B%E5%BA%8F&#x2F;13831935的链接外，还有其他不需要的链接。</p><p>于是，<strong>整个项目的关键是过滤掉这些链接，保留形如’&#x2F;item&#x2F;%E7%A8%8B%E5%BA%8F&#x2F;13831935’（对应中文词条）的链接以及形如’&#x2F;item&#x2F;FOAF’（对应英文词条）的链接</strong>。</p><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests,re<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment">#首先伪装爬虫</span><br>headers = &#123;<br>  <span class="hljs-string">&#x27;User-Agent&#x27;</span> = <span class="hljs-string">&#x27;巴拉巴拉&#x27;</span><br>&#125;<br>url = <span class="hljs-string">&#x27;https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711&#x27;</span><br><span class="hljs-comment">#使用requests.get()获得响应数据</span><br>res = requests.get(url,headers = headers)<br><span class="hljs-comment">#使用BeautifulSoup解析数据</span><br>soup = BeautifulSoup(res.text,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><span class="hljs-comment">#匹配中文词条</span><br>tags1 = soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>,&#123;target = <span class="hljs-string">&#x27;_blank&#x27;</span>,<span class="hljs-string">&#x27;href&#x27;</span>:re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;^/item/(%.&#123;2&#125;)+$&#x27;</span>)&#125;)<br><span class="hljs-comment">#匹配英文词条</span><br>tags2 = soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>,&#123;target = <span class="hljs-string">&#x27;_blank&#x27;</span>,<span class="hljs-string">&#x27;href&#x27;</span>:re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;^/item/[a-zA-Z]&#x27;</span>)&#125;)<br><br>url_list = []<br><span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> tags1:<br>  url1 = <span class="hljs-string">&#x27;https://baike.baidu.com&#x27;</span> + tag[<span class="hljs-string">&#x27;href&#x27;</span>]<br>  url_list.append([tag.text,url1])<br><span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> tags2:<br>  url2 = <span class="hljs-string">&#x27;https://baike.baidu.com&#x27;</span> + tag[<span class="hljs-string">&#x27;href&#x27;</span>]<br>  url_list.append([tag.text,url2])<br>  <br><span class="hljs-built_in">print</span>(url_list)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页数据解析提取</title>
    <link href="/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E6%8F%90%E5%8F%96/"/>
    <url>/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E6%8F%90%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="网页数据解析提取"><a href="#网页数据解析提取" class="headerlink" title="网页数据解析提取"></a>网页数据解析提取</h1><p>使用正则表达式提取信息难度较大，虽然功能强大但是写起来复杂，很容易出错。</p><p>对于网页中有很多标签和属性，可以通过它们定位到我们需要的数据，然后进行解析。</p><p>本文介绍XPath和BeautifulSoup。</p><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p>XPath(XML Path Language)，即XML路径语言，最初用来在XML文档中查找信息，但同样适用HTML文档。</p><p>XPath常用规则如下：</p><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">nodename</td><td align="center">选择此节点的所有子节点</td></tr><tr><td align="center">&#x2F;</td><td align="center">从当前节点选择直接子节点</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">从当前节点选取子孙节点</td></tr><tr><td align="center">.</td><td align="center">选取当前节点</td></tr><tr><td align="center">..</td><td align="center">选取当前节点的父节点</td></tr><tr><td align="center">@</td><td align="center">选取属性</td></tr></tbody></table><p>我们使用python的lxml库，利用XPath对HTML解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br>text = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;span class=&quot;text_vKdaI&quot; data-text=&quot;true&quot;&gt;&lt;a class=&quot;innerLink_kUstz&quot; href=&quot;/item/网页蜘蛛/15696186?fromModule=lemma_inlink&quot; target=&quot;_blank&quot;&gt;网页蜘蛛&lt;/a&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#首先实例化一个对象，将需要被解析的源码数据加载到对象</span><br>html = etree.HTML(text)<br><span class="hljs-comment">#tostring可以修正html里面存在的错误,例如text中末尾缺少&lt;/span&gt;</span><br>result = etree.tostring(html)<br><span class="hljs-comment">#利用decode方法将其转换为str类型</span><br><span class="hljs-built_in">print</span>(result.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;&lt;body&gt;&lt;span class=&quot;text_vKdaI&quot; data-text=&quot;true&quot;&gt;&lt;a class=&quot;innerLink_kUstz&quot; href=&quot;/item/&amp;#32593;&amp;#39029;&amp;#34584;&amp;#34523;/15696186?fromModule=lemma_inlink&quot; target=&quot;_blank&quot;&gt;&amp;#32593;&amp;#39029;&amp;#34584;&amp;#34523;&lt;/a&gt;</span><br><span class="hljs-string">&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#也可以直接读取文本文件进行解析</span><br>html = etree.parse(<span class="hljs-string">&#x27;./test.html&#x27;</span>,etree.HTMLParser)<br><span class="hljs-comment">#利用xpath获取所有节点</span><br>result = html.xpath(<span class="hljs-string">&#x27;//*&#x27;</span>)<br><span class="hljs-comment">#获取子节点</span><br>result = html.xpath(<span class="hljs-string">&#x27;//span/a&#x27;</span>)<br><span class="hljs-comment">#获取孙节点</span><br>result = html.xpath(<span class="hljs-string">&#x27;//html//span&#x27;</span>)<br><span class="hljs-comment">#获取父节点</span><br>result = html.xpath(<span class="hljs-string">&#x27;//a/..&#x27;</span>)<br><br><span class="hljs-comment">#可以使用@进行属性限制，选取想要的标签</span><br>result = html.xpath(<span class="hljs-string">&#x27;//a[@class=&quot;innerLink_kUstz&quot;]&#x27;</span>)<br><span class="hljs-comment">#利用text方法可以获取标签中的文本,返回列表</span><br>result = html.xpath(<span class="hljs-string">&#x27;//a/text()&#x27;</span>)<br><span class="hljs-built_in">print</span>(result) <span class="hljs-comment">#[&#x27;网页蜘蛛&#x27;]</span><br><span class="hljs-comment">#利用@获取属性,返回列表</span><br>result = html.xpath(<span class="hljs-string">&#x27;//a/@href&#x27;</span>)<br><span class="hljs-built_in">print</span>(result) <span class="hljs-comment">#[&#x27;/item/网页蜘蛛/15696186?fromModule=lemma_inlink&#x27;]</span><br><br></code></pre></td></tr></table></figure><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p><a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a> 是一个可以从HTML或XML文件中提取数据的Python库，因为简单所以无需写很多代码就可以完成操作，并且可以自动将输入文档转化为Unicode编码，将输出文档转化为utf-8编码。</p><p>总的来说，它可以省去很多繁琐的提取工作，提高解析网页效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-comment">#首先伪装爬虫</span><br>headers = &#123;<br>  <span class="hljs-string">&#x27;User-Agent&#x27;</span> = <span class="hljs-string">&#x27;巴拉巴拉&#x27;</span><br>&#125;<br><span class="hljs-comment">#request.get()获得响应数据</span><br>res = request.get(<span class="hljs-string">&#x27;url&#x27;</span>,headers = headers)<br><span class="hljs-comment">#将re文本化</span><br>res_text = re.text()<br><span class="hljs-comment">#首先实例化一个bs对象，并将源码数据加载到这个对象</span><br><span class="hljs-comment">#bs对象 = BeautifulSoup(request.get()对象,解析器),request.get()对象必须是文本。</span><br><span class="hljs-comment">#解析器不唯一，也可以是lxml。</span><br>soup = BeautifulSoup(res_text,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-comment">#接下来使用bs对象的方法进行提取数据</span><br><span class="hljs-comment">#find方法返回第一个匹配到的标签及其内容。</span><br>item1 = soup.find(<span class="hljs-string">&#x27;标签&#x27;</span>)<br><span class="hljs-comment">#find_all方法返回所有匹配到的标签及其内容，返回结果为列表</span><br>item2 = soup.find_all(<span class="hljs-string">&#x27;标签&#x27;</span>)<br><span class="hljs-comment">#利用属性限制提取想要的标签及其内容</span><br>item3 = soup.find(<span class="hljs-string">&#x27;标签&#x27;</span>，class_ = <span class="hljs-string">&#x27;属性&#x27;</span>)<br><span class="hljs-comment">#直接利用标签名提取，例如提取标签‘span’</span><br>item4 = soup.span<br><br><span class="hljs-comment">#bs还提供另一种选择器-CSS选择器，只需要调用select方法</span><br>text = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;div class=&quot;itemWrapper_G6uJp&quot;&gt;</span><br><span class="hljs-string">  &lt;dt class=&quot;basicInfoItem_Phlad itemName__U2pO&quot;&gt;</span><br><span class="hljs-string">    中文名</span><br><span class="hljs-string">  &lt;/dt&gt;</span><br><span class="hljs-string">  &lt;dt class=&quot;basicInfoItem_Phlad itemValue_DVXO_&quot;&gt;</span><br><span class="hljs-string">    &lt;span class=&quot;text_vKdaI&quot; data-text=&quot;true&quot;&gt;</span><br><span class="hljs-string">      网络爬虫</span><br><span class="hljs-string">    &lt;/span&gt;</span><br><span class="hljs-string">  &lt;/dt&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>soup = BeautifulSoup(text,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><span class="hljs-comment">#选择所有div标签下的dt标签及其内容</span><br>item = soup.select(<span class="hljs-string">&#x27;div dt&#x27;</span>)<br><span class="hljs-comment">#选择所有class=&quot;itemWrapper_G6uJp&quot;属性下的class=&quot;basicInfoItem_Phlad itemValue_DVXO_&quot;的标签内容</span><br>item = soup.select(<span class="hljs-string">&#x27;.itemWrapper_G6uJp .basicInfoItem_Phlad itemValue_DVXO_&#x27;</span>)<br><br><span class="hljs-comment">#值得注意的是，find方法、find_all方法、select方法和name方法返回的结果都是tag（列表）类型</span><br><span class="hljs-comment">#tag类型可以继续使用find或find_all提取标签中的标签</span><br><span class="hljs-comment">#也可以使用text/string/[&#x27;属性名&#x27;]提取标签中的文本或是属性值</span><br>item.text<br>item.string<br>item[<span class="hljs-string">&#x27;class&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h2 id="你，学废了吗？"><a href="#你，学废了吗？" class="headerlink" title="你，学废了吗？^_^"></a>你，学废了吗？^_^</h2>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈与队列</title>
    <link href="/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%20/"/>
    <url>/2023/10/30/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%20/</url>
    
    <content type="html"><![CDATA[<h1 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h1><p>1.栈的定义</p><p>（1）栈：栈实际上是一种线性表，它只允许在固定的一段进行插入或者删除元素，在进行数据插入或者删除的一段称之为栈顶，剩下的一端称之为栈底。其遵循的原则是后进先出。<br>（2）栈的核心操作：入栈，出栈，取栈顶元素<br>（3）对于栈的形象理解：子弹的弹夹，子弹在被压入的时候就相当于是一个个元素，而弹夹就相当于是栈。先被压入的子弹是最后被打出的，先压入的元素是最后出来的，也就是后进先出。</p><p>2.队列的定义</p><p>（1）队列：首先队列也是一种特殊的线性表，它允许在一端进行插入数据，在另一端进行删除数据的。队列里边有队首，队尾，队首元素。其遵循的原则是先进先出。<br>（2）队列的核心操作：入队列，出队列，取队首元素。<br>（3）对于队列的形象理解：火车穿越隧道，火车的头相当于是队列的首，火车的尾相当于是队列的尾部。火车在穿越隧道的时候，头部先进入隧道头部也先出隧道，尾部后进入尾部后出隧道。队列也就是先入的元素先出队列，后进入的元素后出队列。</p><p>3.栈和队列的区别</p><p>（1）栈和队列的出入方式不同：栈是后进先出、队列是先进先出。</p><p>（2）栈和队列在具体实现的时候操作的位置不同：因为栈是后进先出，它在一段进行操作；而队列是先进先出，实现的时候在两端进行。</p><h2 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h2><p>栈的顺序存储结构简称为顺序栈，和线性表类似，用一维数组来存储栈。根据数组是否可以根据需要增大，又可分为静态顺序栈和动态顺序栈。</p><p>静态顺序栈实现简单，但不能根据需要增大栈的存储空间；</p><p>动态顺序栈可以根据需要增大栈的存储空间，但实现稍微复杂。</p><h3 id="采用静态一维数组来存储栈"><a href="#采用静态一维数组来存储栈" class="headerlink" title="采用静态一维数组来存储栈"></a>采用静态一维数组来存储栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sqstack</span>&#123;</span><br>    <span class="hljs-comment">//存放栈中元素的一维数组空间</span><br>    ElemType a[MaxSize];<br>    <span class="hljs-type">int</span> top,bottom;<span class="hljs-comment">//栈顶指针变量</span><br>&#125;SqStack;<br><br><span class="hljs-comment">//栈的初始化</span><br>Status <span class="hljs-title function_">Init_stack</span><span class="hljs-params">(SqStack &amp;S)</span><br>&#123;<br>    S.bottom = S.top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> True;<br>&#125;<br><br><span class="hljs-comment">//压栈（元素进栈）</span><br>Status <span class="hljs-title function_">push</span><span class="hljs-params">(SqStack &amp;S,ElemType e)</span><br>&#123;<br>    <span class="hljs-comment">//使数据元素e进栈成为新的栈顶</span><br>    <span class="hljs-keyword">if</span>(S.top == MaxSize)<br>        <span class="hljs-keyword">return</span> Error;<br>    S.top++;<br>    S.a[S.top] = e;<br>    <span class="hljs-keyword">return</span> ok;  <span class="hljs-comment">//压栈成功</span><br>&#125;<br><br><span class="hljs-comment">//弹栈（元素出栈）</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(s.top ==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> Error;<br>    *e = S.a[S.top];<br>    S.top--;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="采用动态一维数组来存储栈"><a href="#采用动态一维数组来存储栈" class="headerlink" title="采用动态一维数组来存储栈"></a>采用动态一维数组来存储栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STACK_SIZE 100 <span class="hljs-comment">/* 栈初始向量大小*/</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STACKINCREMENT 10 <span class="hljs-comment">/* 存储空间分配增量*/</span></span><br><span class="hljs-meta">#typedef int ElemType;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sqstack</span></span><br><span class="hljs-class">&#123;</span> ElemType *bottom;  <span class="hljs-comment">/* 栈不存在时值为NULL*/</span><br>  ElemType *top;     <span class="hljs-comment">/*栈顶指针*/</span><br>  <span class="hljs-type">int</span> stacksize;     <span class="hljs-comment">/*当前已分配空间，以元素为单位*/</span><br>&#125;SqStack;<br><br><span class="hljs-comment">//栈的初始化</span><br>Status <span class="hljs-title function_">Init_Stack</span><span class="hljs-params">(SqStack &amp;S)</span><br>&#123;  <br>   S.bottom = (ElemType*)<span class="hljs-built_in">malloc</span>(STACK_SIZE*<span class="hljs-keyword">sizeof</span>(ElemType));<br>   <span class="hljs-keyword">if</span>(!S.bottom) <span class="hljs-keyword">return</span> ERROR;<br>   S.top = S.bottom ;   <span class="hljs-comment">/*栈空时栈顶和栈底指针相同*/</span><br>   S.stacksize = STACK_SIZE;<br>   <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//压栈（元素进栈）</span><br>Status <span class="hljs-title function_">Push</span><span class="hljs-params">(SaStack &amp;S,ElemType e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(S.top-S.bottom&gt;=S.stacksize<span class="hljs-number">-1</span>)<br>    &#123;<br>        S.bottom = (ElemType*)<span class="hljs-built_in">realloc</span>((S.STACKINCREMENT+STACK_SIZE)*<span class="hljs-keyword">sizeof</span>(ElemType));<br>        <span class="hljs-comment">/*栈满，追加存储空间*/</span><br>        <span class="hljs-keyword">if</span>(!S.bottom) <span class="hljs-keyword">return</span> ERROR;<br>        S.top = S.bottom + S.stacksize;<br>        S.stacksize += STACKINCREMENT;<br>    &#125;<br>    *S.top = e;S.top++;<span class="hljs-comment">/*栈顶指针加1，e成为新的栈顶*/</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//弹栈（元素出栈）</span><br>Status <span class="hljs-title function_">pop</span><span class="hljs-params">(SaStack &amp;S,ElemType *e)</span><br><span class="hljs-comment">/*弹出栈顶元素*/</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(S.top==S.bottom)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    S.top--;e = S.top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈的链式存储"><a href="#栈的链式存储" class="headerlink" title="栈的链式存储"></a>栈的链式存储</h3><p><img src="/images/%E9%93%BE%E6%A0%88%E5%AD%98%E5%82%A8%E5%BD%A2%E5%BC%8F.png" alt="链栈存储形式"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack_Node</span></span><br><span class="hljs-class">&#123;</span> ElemType data;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack_Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;Stack_Node;<br><br><span class="hljs-comment">//初始化</span><br>Stack_Node *<span class="hljs-title function_">Init_Link_Stack</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;  Stack_Node *top;<br>   top=(Stack_Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Stack_Node));<br>   top-&gt;next=<span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">return</span>(top);<br>&#125;<br><br><span class="hljs-comment">//压栈（元素进栈）</span><br>Status <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack_Node *top,ElemType e)</span><br><span class="hljs-comment">/*使数据元素e进栈成为新的栈顶*/</span><br>&#123; <br>    Stack_Node *p;<br>    p=(Stack_Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Stack_Node));<br>    <span class="hljs-keyword">if</span>(!p)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-comment">/*申请新结点失败，返回错误标志*/</span><br>    p-&gt;data=e;<br>    p-&gt;next=top-&gt;next;<br>    top-&gt;next=p;     <span class="hljs-comment">/*钩链*/</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//弹栈（元素出栈）</span><br>Status <span class="hljs-title function_">pop</span><span class="hljs-params">(Stack_Node *top,ElemType e)</span><br><span class="hljs-comment">/*弹出栈顶元素*/</span><br>&#123;  Stack_Node *p;<br>    <span class="hljs-keyword">if</span>(top-&gt;next==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> ERROR;      <span class="hljs-comment">/*栈空，返回失败标志*/</span><br>    p=top-&gt;next;<br>    e=p-&gt;data;        <span class="hljs-comment">/*取栈顶元素*/</span><br>    p-&gt;next=p-&gt;next;<span class="hljs-comment">/*修改栈顶指针*/</span><br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列的顺序存储"><a href="#队列的顺序存储" class="headerlink" title="队列的顺序存储"></a>队列的顺序存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    ElemType data[MAXSIZE];<br>    <span class="hljs-type">int</span> front,rear;<br>&#125; SqQueue;<br><br><span class="hljs-comment">/*初始状态（队空）：Q.front == Q.rear == 0;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  进队操作：队不满时，先送值到队尾元素，将队尾指针加1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  出队操作：队非空时，先删除队头元素，再将队头指针加1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  队满：rear == MAXSIZE - 1;</span><br><span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>由上可知，Q.front &#x3D;&#x3D; Q.rear &#x3D;&#x3D; 0 可以作为队列的判空条件，但能否能用 Q.rear &#x3D;&#x3D; MAXSIZE 作为队列已满的条件呢？显然是不行的，因为队尾指针可能已经到了最尾端，但是队头指针可能不在初始位置，而是在队列的中间，这时入队出现“上溢”，但这种溢出并不是真正的溢出，data数组中仍存在可以放置元素的位置，所以为“假溢出”。<br>前面指出了队列的缺点，这里就引出循环队列的概念。将队列臆造成一个环状的空间，即把存储队列元素的表从按逻辑上视为一个环，称为循环队列。当队首指针 Q.front &#x3D;&#x3D; MAXSIZE - 1,再前景一个位置就自动到0，这可以利用除法取余运算（%） 来实现。</p><p><img src="/images/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E8%BF%87%E7%A8%8B.png" alt="循环队列过程"></p><p>初始化时：Q.front &#x3D; Q.rear &#x3D; 0；</p><p>队首指针进1：Q.front &#x3D; （Q.front + 1) % MAXSIZE；</p><p>队尾指针进1：Q.rear &#x3D; （Q.rear + 1）% MAXSIZE；</p><p>队列长度：（Q.front + MAXSIZE - Q.rear) % MAXSIZE；</p><p>循环队列如何判断队满还是队空？</p><p>1）一般的做法是：入队时少入对一个队列单元，约定“队尾指针的下一个标志是队头指针 作为 队满的标志“：</p><p>队空条件：Q.front &#x3D;&#x3D; Q.rear</p><p>队满条件：(Q.rear + 1) % MAXSIZE &#x3D;&#x3D; Q.front</p><p>队列长度：（Q.rear - Q.front + MAXSIZE ）% MAXSIZE</p><p>2）在类型中添加表示成员个数的数据成员。队空时 Q.size &#x3D;&#x3D; 0；队满时 Q.size &#x3D;&#x3D; MAXSIZE</p><p>3）类型中添加tag 数据成员，以区分是队满还是对空。tag &#x3D;&#x3D;0 ，若因删除导致Q.front &#x3D;&#x3D; Q.rear ,则为队空；若tag &#x3D;&#x3D; 1，若因添加导致Q.front &#x3D;&#x3D; Q.rear，则为队满。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//初始化</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitQueue</span><span class="hljs-params">(SqQueue&amp; Q)</span>&#123;<br>    Q.front = Q.rear = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//判队空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">QueueEmpty</span><span class="hljs-params">(SqQueue Q)</span>&#123;<br>    <span class="hljs-keyword">if</span>( Q.front == Q.rear)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//入队</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(SqQueue&amp; Q, ElemType x)</span>&#123;<br>    <span class="hljs-keyword">if</span>( (Q.rear + <span class="hljs-number">1</span>) % MAXSIZE == Q.front )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    Q.data[Q.rear] = x;<br>    Q.rear = ( Q.rear + <span class="hljs-number">1</span>) % MAXSIZE;<span class="hljs-comment">//队尾指针加1取模，这步操作很容易写错</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <br>&#125;<br><br><span class="hljs-comment">//出队</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(SqQueue&amp; Q, ElemType &amp;x)</span>&#123;<br>    <span class="hljs-keyword">if</span>( Q.rear == Q.front )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = Q.data[Q.front];<br>    Q.front = (Q.front + <span class="hljs-number">1</span>) % MAXSIZE;<span class="hljs-comment">//队头指针加1取模</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h3><p><img src="/images/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="链式存储结构"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span>&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span>* <span class="hljs-title">next</span>;</span><br>&#125;LinkNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    LinkNode *front, *rear;<br>&#125;LinkQueue;<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitQueue</span><span class="hljs-params">(LinkQueue&amp; Q)</span>&#123;<br>    <span class="hljs-comment">//初始化时，Q.front 和 Q.rear 同时指向头结点</span><br>    Q.front = Q.rear = (LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    Q.front-&gt;next = nullptr;<br>&#125;<br><br><span class="hljs-comment">//入队</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(LinkQueue&amp; Q, ElemType x)</span>&#123;<br>    LinkNode* s = (LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    s-&gt;data = x;<br>    s-&gt;next = nullptr;<br>    Q.rear-&gt;next = s;<br>    Q.rear = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <br>&#125;<br><br><span class="hljs-comment">//出队</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(LinkQueue&amp; Q, ElemType &amp;x)</span>&#123;<br>    <span class="hljs-keyword">if</span>( Q.rear == Q.front )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LinkNode* p = Q.front-&gt;next; <span class="hljs-comment">//因为有头结点，所以队头节点为Q.front-&gt;next</span><br>    x = p-&gt;data;<br>    Q.front-&gt;next = p-&gt;next;<br>    <span class="hljs-keyword">if</span>( Q.rear == p )&#123;           <span class="hljs-comment">//只剩一个结点，删除后变空只剩头结点</span><br>        Q.rear = Q.front;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第三章 栈和队列</strong></p><p><strong>一、选择题</strong></p><p>1．已知栈的最大容量为4。若进栈序列为1，2，3，4，5，6，且进栈和出栈可以穿插进行,则可能出现的出栈序列为（ c ）</p><p>A.5，4，3，2，1，6 B.2，3，5，6，1，4</p><p>C.3，2，5，4，1，6 D.1，4，6，5，2，3</p><p>2．在一个具有n个单元的顺序栈中，假定以地址低端（即0单元）作为栈底，以top作为栈顶指针，当做出栈处理时，top变化为（ c）</p><p>A．top不变    B．top&#x3D;0    C．top–     D．top++</p><p>3．向一个栈顶指针为hs的链栈中插入一个s结点时，应执行（  b）</p><p>A．hs-&gt;next&#x3D;s;</p><p>B．s-&gt;next&#x3D;hs;   hs&#x3D;s;</p><p>C．s-&gt;next&#x3D;hs-&gt;next;hs-&gt;next&#x3D;s;</p><p>D．s-&gt;next&#x3D;hs; hs&#x3D;hs-&gt;next;</p><p>4．在具有n个单元的顺序存储的循环队列中，假定front和rear分别为队头指针和队尾指针，则判断队满的条件为（ d  ）</p><p>A．rear％n&#x3D; &#x3D; front       B．（front+l）％n&#x3D; &#x3D; rear</p><p>C．rear％n -1&#x3D; &#x3D; front    D．(rear+l)％n&#x3D; &#x3D; front</p><p>5．在具有n个单元的顺序存储的循环队列中，假定front和rear分别为队头指针和队尾指针，则判断队空的条件为（ c  ）</p><p>A．rear％n&#x3D; &#x3D; front       B．front+l&#x3D; rear</p><p>C．rear&#x3D; &#x3D; front       D．(rear+l)％n&#x3D; front</p><p>6．在一个链队列中，假定front和rear分别为队首和队尾指针，则删除一个结点的操作为（ a ）</p><p>A．front&#x3D;front-&gt;next   　 B．rear&#x3D;rear-&gt;next</p><p>C．rear&#x3D;front-&gt;next     　D．front&#x3D;rear-&gt;next</p><p>7．某堆栈的输入序列为1，2，3，…，n，输出序列的第一个元素是n，则第i个输出元素为（ c ）</p><p>A．i     B．n-i     C．n-i+1   D．哪个元素无所谓</p><p>8．用不带头结点的单链表存储队列时,其队头指针指向队头结点,其队尾指针指向队尾结点，则在进行删除操作时(   d  )。</p><p>A．仅修改队头指针          B. 仅修改队尾指针</p><ol><li>队头、队尾指针都要修改D. 队头,队尾指针都可能要修改</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20分钟，20年</title>
    <link href="/2023/10/29/%E7%94%9F%E6%B4%BB%E6%B4%BE/20%E5%88%86%E9%92%9F%EF%BC%8C20%E5%B9%B4/"/>
    <url>/2023/10/29/%E7%94%9F%E6%B4%BB%E6%B4%BE/20%E5%88%86%E9%92%9F%EF%BC%8C20%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="20分钟，20年"><a href="#20分钟，20年" class="headerlink" title="20分钟，20年"></a>20分钟，20年</h1><p>今天下班回家，叫了一辆滴滴，司机是位大叔，看起来年纪不大，也很有精神，我们上车后用，他用很洪亮的声音询问手机尾号是否正确，然后就启动了车。</p><p>随后老板开始跟我讲业务有关问题，我也询问了一些公司情况，然后车内陷入沉默，老板在看手机，我在看窗外风景，司机在开车。突然司机环顾了一下周围，问道：“这里是松岗吗？”</p><p>老板听见后回复说，“不是，这是福永”</p><p>“福永很大啊，松岗离这里很近吧”</p><p>“嗯”…然后车内又陷入沉默。车行驶到一个红绿灯停了下来，周围是一大片在建的房子。</p><p>大叔见状说，“建这么多房子可不好卖啊，房地产的时代要过去了”</p><p>老板听完说，“嗯…不是房地产要完，是现在经济萧条，老百姓把钱揣兜里不花，要是经济好，赚的钱多，这房子都会卖完”</p><p>“对啊，这里的房子都不好卖，那像五六线城市更不好卖了，像我们那种小县城”</p><p>“嗯，深圳都卖不出，其他地方不用说了”绿灯亮起，大叔启动车子继续走。</p><p>“现在在这买套房子不如在老家做栋别墅舒服”</p><p>“你在老家住医疗教育怎么办，这里晚上一两点医院都有人，你在老家晚上还没送到医院就挂了怎么办”大叔笑了两声不作声，车内又进入沉默。</p><p>随后老板突然问起，“你在深圳做了多久？”</p><p>“20年”</p><p>“20年？”</p><p>“你之前做什么的？”</p><p>“我刚来深圳是做报刊的”</p><p>大叔声音突然洪亮起来，“你不知道，那个时候报刊可赚钱了，一份报赚几毛钱，一天卖几百份，每天报纸不一样，每天都可以赚…”</p><p>“后来呢，后来做什么？”</p><p>大叔意犹未尽，又说了很久自己卖报的故事，老板又重新问了一遍，大叔才说道，</p><p>“后来啊，后来互联网起来了，报刊行业就不赚钱了，没做这行了，回家做生意去了，然后就亏了，一切从头开始”</p><p>老板听了后笑着问道</p><p>“做什么生意能一下亏这么多”</p><p>大叔没有继续说…老板又问道，“然后呢，又做什么？”</p><p>“然后又来深圳了，做了一年快递，做了一年货拉拉”</p><p>“货拉拉可以啊”</p><p>“哎，也不行，再后来又跑这个滴滴”大叔说的很无奈，还特意锤了一下方向盘。</p><p>“这个车是我自己买的你知道吧，期限是八年，18年买的，再过几年就不能开了，我准备跑完回家了。”大叔说的很心酸，又继续说道</p><p>“这就是我刚刚为什么跟你说回农村住好，在这里我这个年纪已经做不动了，拼不过那些小年轻，这么多年为了混口饭吃也做累了，不想做啦”</p><p>老板问，“那你回去准备做什么呢”，</p><p>大叔没有直接回答，而是开始发起牢骚，</p><p>“ 那时我做报刊赚了钱准备在深圳买套房子，但是我老婆不允许，我想，买套房子两口天天吵架也不好吧，就没买”</p><p>“嗯”</p><p>“这个每个人眼光都不同，谁都不会想到现在房子涨这么厉害，这么值钱”</p><p>大叔话语间没有丝毫怪罪老婆的意思，他的老婆一定很幸福。</p><p>老板又重新问“回去准备做啥”，</p><p>“准备做餐饮”老板笑了起来，“我家楼下几家餐馆都不知道换了几次了，做餐饮要有特色，你认识好的厨师吗”，</p><p>“小地方那不一样，我请两个厨师，口味可以控制”，</p><p>此时车已到站，我和老板准备下车，老板最后笑着说了一句，</p><p>“那成本多高，你别到时候两个厨师都跑了”，</p><p>老板没有再回复，而是说了一句我让我印象深刻的话，</p><p>“谢谢！”</p><p>声音很洪亮，我在马路边都能听到，大叔离开了。</p><p>老板对我说，“听见了没，你不前进就会被时代抛弃，他当时讲卖报的时候都风光，人一旦只要满足于现状就会被时代抛弃，要时刻创新。”</p><p>老板随后又补了一句。</p><p>“他嘴上说农村好，这么多年不也没回去，回去能赚多少钱？”</p><p>这段车内对话让我难以忘怀，躺在床上一直在想也睡不着，还是决定记录下来，我想里面包含很多内容，需要我们去慢慢体会，心里真的是五味陈杂，不知道如何表达，留给大家自己体会吧。</p>]]></content>
    
    
    <categories>
      
      <category>生活派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表</title>
    <link href="/2023/10/18/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2023/10/18/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p><strong>线性表（List）：零个或多个数据元素的有限序列。</strong></p><p>除第一个元素a1外，每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="1-顺序表的基本概念"><a href="#1-顺序表的基本概念" class="headerlink" title="1.顺序表的基本概念"></a><strong>1.顺序表的基本概念</strong></h3><p><strong>概念：用一组地址连续的存储单元依次存储线性表的数据元素，这种存储结构的线性表称为顺序表。</strong></p><p><strong>特点：逻辑上相邻的数据元素，物理次序也是相邻的。</strong></p><p>只要确定好了存储线性表的起始位置，线性表中任一数据元素都可以随机存取，所以线性表的顺序存储结构是一种随机存取的存储结构，因为高级语言中的数组类型也是有随机存取的特性，所以通常我们都使用数组来描述数据结构中的顺序储存结构，用动态分配的一维数组表示线性表。</p><h3 id="2-顺序表的运算"><a href="#2-顺序表的运算" class="headerlink" title="2**.顺序表的运算**"></a>2**.顺序表的运算**</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    ElemType data[MaxSize];<br>    <span class="hljs-type">int</span> length;<br>&#125;sqlist;<span class="hljs-comment">//声明顺序表类型</span><br><br><span class="hljs-comment">//整体建立顺序表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateList</span><span class="hljs-params">(sqlist *&amp;L,ElemType a[],<span class="hljs-type">int</span> n)</span><br>&#123;<br>    L =(sqlist * )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(sqlist));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)<br>    &#123;<br>        L -&gt; data[i] = a[i];<br>    &#125;<br>    L -&gt; length = n;<br>&#125;<br><br><span class="hljs-comment">//初始化顺序表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(sqlist *&amp;L)</span><br>&#123;<br>    L =(sqlist * )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(sqlist));<br>    L -&gt; length = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//销毁线性表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DestroyList</span><span class="hljs-params">(sqlist *&amp;L)</span><br>&#123;<br>    <span class="hljs-built_in">free</span>(L);<br>&#125;<br><br><span class="hljs-comment">//判断线性表是否为空表</span><br><span class="hljs-comment">//status ListEmpty(sqlist *L)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//    return (L -&gt; length == 0);</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//求线性表的长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListLength</span><span class="hljs-params">(sqlist *L)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (L -&gt; length);<br>&#125;<br><br><span class="hljs-comment">//输出线性表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DispList</span><span class="hljs-params">(sqlist *L)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; L -&gt; length;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,L -&gt; data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//求线性表中的第i个元素值</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetList</span><span class="hljs-params">(sqlist *L,ElemType &amp;e,<span class="hljs-type">int</span> i)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span> || i &gt; L -&gt; length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    e = L -&gt; data[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//查找第一个值域为e的元素序号</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LocateList</span><span class="hljs-params">(sqlist *L,ElemType e)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; L -&gt; length &amp;&amp; L -&gt; data[i] != e)<br>    &#123;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i &gt;= L -&gt; length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//插入第i个元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(sqlist *&amp;L,ElemType e,<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt; L-&gt;length + <span class="hljs-number">1</span> || L-&gt;length == MaxSize) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    i--;<br>    <span class="hljs-keyword">for</span>(j = L-&gt;length;j &gt;= i;j--) &#123;<br>        L-&gt;data[j] = L-&gt;data[j - <span class="hljs-number">1</span>];<br>    L-&gt;data[i] = e;<br>    L-&gt;length = L-&gt;length + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//删除第i个元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(sqlist *&amp;L,ElemType &amp;e,<span class="hljs-type">int</span> i)</span><br>&#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; L -&gt; length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    i--;<br>    e = L -&gt;data[i];<br>    <span class="hljs-keyword">for</span>(j = i;j &lt; L -&gt; length<span class="hljs-number">-1</span>;j++)<br>    &#123;<br>        L -&gt; data[j] = L -&gt; data[j+<span class="hljs-number">1</span>];<br>    &#125;<br>    L -&gt; length--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    sqlist *L;<br>    ElemType e;<br>    InitList(L);<br>    ListInsert(L, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>);<br>    ListInsert(L, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>);<br>    ListInsert(L, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>);<br>    ListInsert(L, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>);<br>    DispList(L);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ListLength(L));<br>    ListDelete(L,e,<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    DispList(L);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>小结 </p><ol><li><p>顺序表时间复杂度 从以上代码可以很明显的看出，线性表的顺序存储结果在读、存数据是的时间复杂度是O(1)，插入、删除操作的时间复杂度是O(n)。</p></li><li><p>顺序表的优缺点 优点：无须为表中元素之间的逻辑关系而增加额外的存储空间；可以快速的存取表中任一位置的元素。 缺点：插入和删除操作需要移动大量元素；当线性表长度较大时，难以确定存储空间的容量；造成存储空间的“碎片”。</p></li></ol><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a><strong>单链表</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span></span><br><span class="hljs-class">&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//指向后继结点</span><br>&#125;LinkNode;<span class="hljs-comment">//声明单链表结构类型</span><br><br><span class="hljs-comment">//尾插法建立单链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreatLink</span><span class="hljs-params">(LinkNode *&amp;L,ElemType a[],<span class="hljs-type">int</span> n)</span><br>&#123;<br>    LinkNode *r,*s;<br>    L = (LinkNode*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    L -&gt; next = <span class="hljs-literal">NULL</span>;<br>    r = L;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>        s = (LinkNode*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>        s -&gt; data = a[i];<br>        r -&gt; next = s;<br>        r = s;<br>    &#125;<br>    r -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化线性表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(LinkNode *&amp;L)</span><br>&#123;<br>    L = (LinkNode*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    L -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//销毁单链表</span><br><span class="hljs-comment">//一个一个的向后free</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DestroyList</span><span class="hljs-params">(LinkNode *&amp;L)</span><br>&#123;<br>    LinkNode *a,*b;<br>    a = L;<br>    b = a -&gt; next;<br>    <span class="hljs-keyword">while</span>(b != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">free</span>(a);<br>        a = b;<br>        b = a -&gt; next;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(a);<br>&#125;<br><br><span class="hljs-comment">//判断线性表是否为空</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ListEmpty</span><span class="hljs-params">(LinkNode *L)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (L -&gt; next == <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">//求线性表的长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListLength</span><span class="hljs-params">(LinkNode *L)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    LinkNode *p = L;<br>    <span class="hljs-keyword">while</span>(p -&gt; next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        i++;<br>        p = p -&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">//输出线性表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DispList</span><span class="hljs-params">(LinkNode *L)</span><br>&#123;<br>    LinkNode *p = L;<br>    <span class="hljs-keyword">while</span>(p -&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\t&quot;</span>,p -&gt; data);<br>        p = p -&gt; next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//求线性表中的第i个元素值</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetElem</span><span class="hljs-params">(LinkNode *L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span><br>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    LinkNode *p = L;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(j &lt; i &amp;&amp; p != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        j++;<br>        p = p -&gt; next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        e = p -&gt; data;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//链表插入值操作</span><br>Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkNode *L, ElemType e, <span class="hljs-type">int</span> pos)</span>&#123;<br>    <span class="hljs-keyword">if</span>(pos&lt;<span class="hljs-number">1</span> || pos &gt; (*L)-&gt;lenght+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-comment">//寻找第pos个结点</span><br>    Node *p = (*L)-&gt;next; <span class="hljs-comment">//头结点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;pos; i++)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//生成一个新结点</span><br>    LinkNode *q = (LinkNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    q-&gt;data = e;<br>    q-&gt;next = p-&gt;next;  <span class="hljs-comment">//将p的后继赋值给q的后继</span><br>    p-&gt;next = q;    <span class="hljs-comment">//将q赋值给p的后继</span><br>    (*L)-&gt;lenght += <span class="hljs-number">1</span>;  <span class="hljs-comment">//链表长度加1</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//链表删除值操作</span><br>Status <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(LinkList *L, ElemType *elem, <span class="hljs-type">int</span> pos)</span>&#123;<br>    <span class="hljs-keyword">if</span>(pos &lt; <span class="hljs-number">1</span> || pos&gt;(*L)-&gt;lenght)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-comment">//寻找到第pos个结点</span><br>    Node *p = (*L)-&gt;next, *q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;pos; i++)&#123;<br>        p=p-&gt;next;<br>    &#125;<br>    q = p-&gt;next;    <span class="hljs-comment">//要删除的结点</span><br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>    (*L) -&gt; lenght -= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表插入"><a href="#链表插入" class="headerlink" title="链表插入"></a>链表插入</h3><p><img src="/images/%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5.jpg" alt="链表插入"></p><h3 id="链表删除"><a href="#链表删除" class="headerlink" title="链表删除"></a>链表删除</h3><p><img src="/images/%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4.jpg" alt="链表删除"></p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p><strong>将单链表中终端节点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。</strong></p><p>仅设头节点的循环链表：可以用O(1)的时间访问第一个节点，但对于最后一个节点，却需要O(n)的时间</p><p><img src="/images/%E5%BE%AA%E7%8E%AF%E5%88%97%E8%A1%A81.png" alt="循环列表1"></p><p>仅设尾节点的循环链表：终端节点用尾指针rear指示，则查找终端节点是O(1)，而开始节点，其实就是rear-&gt;next-&gt;next，其时间复杂度也是O(1)。</p><p><img src="/images/%E5%BE%AA%E7%8E%AF%E5%88%97%E8%A1%A82.png" alt="循环列表2"></p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向链表（double linked list）是在单链表的每个结点中，再设置一个指向其前驱结点的指针域 。所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱.</p><p><img src="/images/%E5%8F%8C%E5%90%91%E5%88%97%E8%A1%A8.jpg" alt="双向列表"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*双向链表存储结构*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DulNode</span>&#123;</span><br>ElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DulNode</span> *<span class="hljs-title">prior</span>;</span><span class="hljs-comment">//直接前驱指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DulNode</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//直接后继指针</span><br>&#125; DulNode;<br><br><span class="hljs-comment">//插入操作</span><br><span class="hljs-comment">//第一步：把p赋值给s的前驱</span><br>s-&gt;prior = p;<br><span class="hljs-comment">//第二步：把p-&gt;next赋值给s的后继</span><br>s-&gt;next = p-&gt;next<br><span class="hljs-comment">//第三步：把s赋值给p-&gt;next的前驱</span><br>p-&gt;next-&gt;prior = s;<br><span class="hljs-comment">//第四步：把s赋值给p的后继</span><br>p-&gt;next = s;<br><br><span class="hljs-comment">//删除操作</span><br><span class="hljs-comment">//第一步</span><br>p-&gt;next = q-&gt;next;<br><span class="hljs-comment">//第二步</span><br>q-&gt;next-&gt;prior = p;<br><span class="hljs-built_in">free</span>(q);<br></code></pre></td></tr></table></figure><p>双向链表插入值</p><p><img src="/images/%E5%8F%8C%E5%90%91%E6%8F%92%E5%80%BC.jpg" alt="双向插值"></p><p>双向链表删除值</p><p><img src="/images/%E5%8F%8C%E5%90%91%E5%88%A0%E5%80%BC.jpg" alt="双向删值"></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>一、选择题</p><p>1．下述哪一条是顺序存储结构的优点？（ A）</p><p>A．存储密度大 B．插入运算方便 C．删除运算方便 D．可方便地用于各种逻辑结构的存储表示</p><p>2．下面关于线性表的叙述中，错误的是哪一个？（ b ）</p><p>A．线性表采用顺序存储，必须占用一片连续的存储单元。</p><p>B．线性表采用顺序存储，便于进行插入和删除操作。</p><p>C．线性表采用链接存储，不必占用一片连续的存储单元。</p><p>D．线性表采用链接存储，便于插入和删除操作。</p><p>3．若某线性表最常用的操作是存取任一指定序号的元素和在最后进行插入和删除运算，则利用（ a ）存储方式最节省时间。</p><p>A．顺序表 B．双链表 C．带头结点的双循环链表 D．单循环链表</p><p>4．某线性表中最常用的操作是在最后一个元素之后插入一个元素和删除第一个元素，则采用（ d ）存储方式最节省运算时间。</p><p>A．单链表 B．仅有头指针的单循环链表 C．双链表 D．仅有尾指针的单循环链表</p><p>5．在一个长度为n的顺序表中删除第i个元素(0&lt;&#x3D;i&lt;&#x3D;n)时，需向前移动（ a）个元素</p><p>A．n-i  B．n-i+l  C．n-i-1  D．i</p><p>6．从一个具有n个结点的单链表中查找其值等于x的结点时，在查找成功的情况下，需平均比较（ c ）个元素结点</p><p>A．n&#x2F;2    B．n   C．（n+1）&#x2F;2  D．（n-1）&#x2F;2</p><p>7．设单链表中指针p指向结点m，若要删除m之后的结点（若存在），则需修改指针的操作为（A ）</p><p>A．p-&gt;next&#x3D;p-&gt;next-&gt;next;  B．p&#x3D;p-&gt;next;</p><p>C．p&#x3D;p-&gt;next-&gt;next;      D．p-&gt;next&#x3D;p;</p><p>8．在一个单链表中，已知q结点是p结点的前趋结点，若在q和p之间插入s结点，则须执行（ B ）</p><p>A．s-&gt;next&#x3D;p-&gt;next;  p-&gt;next&#x3D;s</p><p>B．q-&gt;next&#x3D;s;  s-&gt;next&#x3D;p</p><p>C．p-&gt;next&#x3D;s-&gt;next;  s-&gt;next&#x3D;p</p><p>D．p-&gt;next&#x3D;s;  s-&gt;next&#x3D;q</p><p>9．线性表的顺序存储结构是一种（ A ）的存储结构。</p><p>A．随机存取  B．顺序存取  C．索引存取  D．散列存取</p><p>二、填空</p><p>1．在线性表的顺序存储中，元素之间的逻辑关系是通过  <u>物理位置相邻</u>  决定的；在线性表的链接存储中，元素之间的逻辑关系是通过  <strong>指针</strong> 决定的。</p><p>2．在双向链表中，每个结点含有两个指针域，一个指向  <strong>前驱</strong>  结点，另一个指向  <strong>后继</strong>  结点。</p><p>3．当对一个线性表经常进行存取操作，而很少进行插入和删除操作时，则采用 **顺序 ** 存储结构为宜。相反，当经常进行的是插入和删除操作时，则采用  <strong>链式</strong>   存储结构为宜。</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《隐入尘烟》有感</title>
    <link href="/2023/10/17/%E7%94%9F%E6%B4%BB%E6%B4%BE/%E3%80%8A%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <url>/2023/10/17/%E7%94%9F%E6%B4%BB%E6%B4%BE/%E3%80%8A%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F%E3%80%8B%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="《隐入尘烟》有感"><a href="#《隐入尘烟》有感" class="headerlink" title="《隐入尘烟》有感"></a>《隐入尘烟》有感</h1><h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>2011年冬，老四马有铁在政府和热心村民的帮助下，乔迁新居，过上了新生活。</p><p>马有铁是在2011年冬去世的。马老铁排行老四，两个哥哥都已经去世，尽管三个马有铜日子过的不错，但从来没有照护过他，相反，还把老四住的老家给卖了。那个时候，马老四才刚和心爱的贵英过上幸福的生活，但命运好像从来不会放过憨厚老实的马老四。</p><p>那天贵英莫名其妙发烧了，马老四望着发晕的贵英，放心不下，决定让贵英睡在刚建不久的新炕上，是的，整个屋子都是新的，是马老四给贵英建的新家，然后自己一个人去下田干活。</p><p>在家的贵英看不到老四一直是不放心的，贵英对老四一直很关心，以前老四出门无偿给别人帮忙拉搬家的行李，晚上很晚才回家，甘肃的冬天是很冷的，贵英就站在村口等老四，怀里揣着给老四已经换过四趟的的热水。村里的老板病了，只有马老四是熊猫血可以救老板，马老四为了让老板还上村民的债，无偿去献血，贵英一直都在旁边守着老四，还不停劝阻护士不要再继续抽血了。这一天也不例外，已经是饭点了，老四却还没回家，于是贵英想拿着一窝刚生的鸡蛋给老四送吃的，路过村里不及腰的小溪时，一阵发晕掉进了水里，村民们把她当做瘟神只是冷漠的看着她落水被淹死。</p><p>老四干完农活太阳已经快下山了，路过村子里的八卦场所时，得知贵英在路上突然发晕落水的消息时，马老四吓得一激灵，抛下驴绳，就下河找贵英去了，可是，一切都已经晚了，在远处夕阳的照耀下，水面上波光粼粼，就连风也吹的很温柔，只有马老四站在静静流淌的小溪里，抱着失去呼吸的贵英，失声痛哭。</p><p>一直对命运的捉弄不以为然的马老四，遭受丧妻之痛后终于还是对生活失去了信心，马老四一个人收割卖掉了所有和贵英一起种下的小麦，还了从邻居借的鸡蛋，放走了陪伴自己半辈子的小毛驴，回到家用仅剩的一个鸡蛋拌着一瓶农药，看着贵英最后的面容隐入尘烟。</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>马有铜把马老四新建的房子又卖了。马有铜收下拆迁房子的补偿款，以贫困户马有铁的名义，住进了县城政府补贴的新房子。</p><p>马有铜一直没有把老四去世的消息传出去，而是准备借着老四的名义，安稳的在县城里生活。日子过的很幸福，马有铜每天在县城干一些小本生意补贴家用，他的妻子则在家做做家务，照护孩子，周末还能和家人一起在小县城里面逛逛，买一些好吃的、好玩的。</p><p>2015年冬，天气和2011年的冬天一样的冷，寒风凌烈，西北风像镰刀一样，割掉了树上的叶子，割掉了田地里的麦茬，割掉了人们的心，一切都敷上了一层白皑皑的积雪。</p><p>马有铜向手心不停的呼着热气，抖掉身上的积雪，走进了家门，倒上一杯热牛奶，打开电视，坐上柔软的沙发，像往常一样，开始悠闲的下班时间。这时，门外响起咚咚咚声，马有铜没想太多，就去开门了，是一对陌生人，还没等马有铜询问他们是干什么的，陌生人就先发话了，他们告诉马有铜，他们是社区人口登记的，需要家里的本人带着身份证去社区办理登记。听到这话，马有铜可急了，匆匆回复了一声就把门关上，找妻子去了。</p><p>妻子不停的骂马有铜笨，有人敲门不先问问谁开什么门，马有铜一脸委屈，说这再怎么躲也躲不掉了，现在不像以前，人口登记越来越严，这能怎么办。两人商量好长时间，最后决定杳无音讯的搬家，但他们却没想到，这样只是加快他们落入法网的脚步。</p><p>马有铜一家在当天晚上就搬走了。他们去了另一个县城，由于马有铜之前仅靠两万元的拆迁补偿款，和小本生意补贴家用，没有多余的存款，他们只能在县城的郊区买一间小房子勉强住下，马有铜还需要重新找工作，一家在这个寒冷的冬天，很难熬过去。</p><p>社区还是知道马有铜搬走了，但是马有铜没有考虑这是马老四的房子，后事没有解决终究是跑不掉的，政府在吊销房产证时，会想办法找到马老四，果然，政府很快就找到马有铜的踪迹，询问马有铜他的弟弟马有铁的消息，没有办法的马有铜只能拖着想办法解决问题，那一夜，马有铜的头发像窗外的雪一样，白了头。</p><p>马有铜的妻子带着孩子走了。马有铜的妻子知道这一出肯定解决不了，马有铜最后肯定会上法庭进监狱，于是跟马有铜离了婚，带着孩子离开了原本幸福的家庭。马有铜去买了些纸钱，到马有铁的墓烧了些，希望弟弟马老四可以救他，坐在坟前哭的泣不成声。</p><p>最后，马有铜还是进了监狱，后悔莫及的马有铜坐在牢房里，看着外面的天空，雪花从空中缓慢落下，外面很冷，马有铜的心也很冷，也许，他现在很想弟弟马有铁吧。</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>张永福没有熬过2011年的冬天，马老四去世后不久，张永福因为病情突然恶化，没能抢救过来，在医院离开了这个世界。他的儿子接管了父亲老板的职务，每天开着心爱的宝马车在村里跑来跑去，风光的很，村里的人遇见就说，瞧，张永福的儿子又开着宝马来压榨我们了。</p><p>张永福的儿子在张永福去世后，收买了村里所有的田，雇了村民当劳动力，因为留在村里的农民都是上了年纪的人，张永福的儿子想尽办法压榨他们，让他们做最多的活，给最少的钱，他因此赚了不少钱，不管在城里还是在村里，人人都知道他的大名。</p><p>2016的夏天，天气异常炎热，一连几周都没有下雨，田地里的小麦苗晒弯了腰，显得无精打采，小溪里的水蒸发了不少，据说就连村子里的老人都热死了好几个。张永福的儿子急了，几百亩的田还需要浇水，现在要水没水，要人没人，眼看着粮食都要荒废，他决定召集村民劝说他们更加努力的干活。村民当然不愿意了，骂张永福是流氓，张永福却说，今年要是没收成，你们也一分钱都没有，能不能撑过年末你们自己想清楚吧，说完就开着宝马车洋洋洒洒的走了，只留下村民们坐在原地，没了声。他们清楚，要是没有收成他们活不下去，这么热的天继续干，也活不下去…</p><p>村民还是选择了继续下田干活，毒辣的太阳炙烤着他们的背，皮肤黝黑的闪闪发光，不出意外，今晚他们的皮肤就要退一层皮，有时他们还会因为抢水而打起架，家家都想让自己负责的那块地收成好，拿到更多的粮食和钱，这一年夏天，田地里热死了很多老人，却没有人关心，他们知道张永福的儿子赔钱是不可能的，邻居之间也互不关心，自己的子女也没有空回来守丧，就老伴处理一下后事，然后接着干活去了。</p><p>夏天过去了，张永福的儿子感受到了种田受天气影响严重，再加上村里已经没有几户人家，决定不继续干这行了，他丢下村里的老人和田地，去其他地方创业，村里仅剩的几户人家又骂他狼心狗肺，然而这都是徒劳的，他们在村子里也只能贫穷的度过最后的日子。</p><p>张永福的儿子出了车祸。那是一个雨天，张永福刚在饭馆谈完生意，生意谈的很好，很高兴，喝了很多酒，准备开着宝马车回家，却因为暴雨视线模糊和意识模糊，开进了一条河沟里，第二天早上人们发现时，他已经没有生命体征，只有破损不堪的宝马和他冰冷的尸体挂在河沟里。</p><p>人们说，那晚下了很大的暴雨，打了很大的雷，从来没遇到过这种天气。</p><h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p>钱流向了不差钱的人，爱流向了不缺爱的人，唯有苦难一直伴随着努力生活的人，马老四吃过那么多的苦，怎么会怕农药的苦，他吃鸡蛋不说要压压农药的苦，是为了告诉贵英，她送的鸡蛋他吃了，苦难从来不值得被歌颂，值得被歌颂的是在苦难中挣扎的人。</p><p>善有善报，恶有恶报，不是不报，时候未到。</p><p>细心的村民会发现，马老四和贵英的坟前，总有他们生前最爱的小麦花。</p>]]></content>
    
    
    <categories>
      
      <category>生活派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《羚羊木雕》</title>
    <link href="/2023/10/17/%E7%94%9F%E6%B4%BB%E6%B4%BE/%E3%80%8A%E7%BE%9A%E7%BE%8A%E6%9C%A8%E9%9B%95%E3%80%8B/"/>
    <url>/2023/10/17/%E7%94%9F%E6%B4%BB%E6%B4%BE/%E3%80%8A%E7%BE%9A%E7%BE%8A%E6%9C%A8%E9%9B%95%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="《羚羊木雕》"><a href="#《羚羊木雕》" class="headerlink" title="《羚羊木雕》"></a>《羚羊木雕》</h1><p><strong>“那只羚羊哪儿去啦？”妈妈突然问我。</strong></p><p> 妈妈说的羚羊是一件用黑色硬木雕成的工艺品。那是爸爸从非洲带回来给我的。它一直放在我桌子角上。 　 这会儿，我的心怦怦地跳了起来，因为昨天我已经把它送给我的好朋友万芳了。</p><p> “爸爸不是说给我了吗？”我小声地说。</p><p> “我知道给你了，可是现在它在哪儿？”妈妈的目光紧紧地盯着我。我发现事情不像我想的那么简单。</p><p> “我把它收起来了。”</p><p> “放在哪儿了？拿来我看看。”妈妈好像看出我在撒谎。因为我站在那儿一动不动，低着头不敢看她。</p><p> “要说实话……是不是拿出去卖啦？”妈妈变得十分严厉。</p><p> “没有卖……我送人了。”我觉得自己的声音有些发抖。</p><p> “送给谁了？告诉我。”妈妈把手搭在我的肩膀上。</p><p> “送给万芳了，她是我最好的朋友。” </p><p>“你现在就去把它要回来！”妈妈坚定地说，“那么贵重的东西怎么能随便送人呢？要不我和你一起去！”</p><p> “不！”我哭着喊了起来。 </p><p>爸爸走了进来，听妈妈讲完事情的经过，他静静地点燃一支烟，慢慢地对我说：”小朋友之间不是不可以送东西，但是，要看什么样的东西。这样贵重的东西不像一块点心一盒糖，怎么能自作主张呢？”爸爸的声音一直很平静，不过带着一种不可抗拒的力量。</p><p> “您已经给我了。”</p><p> “是的，这是爸爸给你的，可并没有允许你拿去送人啊！”</p><p> 我没有理由了。我想到他们马上会逼我去向万芳要回羚羊，心里难过极了。他们不知道，万芳是个多么仗义的好朋友。 </p><p>上幼儿园的时候我们就在一起。她学习很好，人一点也不自私。我们俩形影不离，语文老师管我俩叫“合二而一”。 </p><p>上星期一次体育课，我们全班都穿上刚买的新运动裤。跳完山羊，我们围着小树逮着玩。一不小心，我的裤子被树杈划了一道长长的口子。 我坐在树底下偷偷地抹眼泪，又心疼裤子，又怕回家挨说。万芳也不玩了，坐在我旁边一个劲地叹气。忽然，她跳起来拍着屁股说：”咱俩先换过来，我妈是高级裁缝，她能把裤子上的大口子缝得一点儿都看不出来。”</p><p> 当时，我觉得自己得救了，就把裤子和万芳换了。后来，我听说为了这件事，她妈妈让她对着墙站了一个钟头。</p><p> “为什么你不说裤子是我的？”</p><p> 她嘿嘿地笑着：”我妈是婆婆嘴，她要是知道，早晚也会让你妈知道。” </p><p>我要把裤子换过来。她却满不在乎地说：”算了吧，反正我已经站了一个钟头，要是再换过来，你还得站两个钟头……”直到现在，我身上还穿着她的运动裤。每次上体育课，看见她裤子上的那条长长的“伤疤”，我就觉得对不住她。</p><p> 昨天，万芳到我家来玩。我见她特别喜欢我桌上的羚羊，就拿起来递到她的手上说：“送给你，咱俩永远是好朋友……永远！”她也挺激动，从兜里掏出一把弯弯的小藏刀送给我。 </p><p>不知什么时候，奶奶站在门口。她一定想说什么，可是，她没有说。这时，妈妈从柜子里拿出一铁盒糖果对我说：“不是妈妈不懂道理，你把这盒糖送给你的好朋友，那只羚羊，就是爸爸妈妈也舍不得送人啊！”我从妈妈的眼睛里看出了羚羊的贵重。 她和爸爸一起看着我，像是在等待着什么。我知道事情已经无可挽回了，眼泪顺着我的脸颊流下来。屋子里静极了。奶奶突然说：“算了吧，这样多不好。”妈妈一边递过糖盒一边说：“您不知道那是多么名贵的木雕！”</p><p> 我再也受不了了，推开妈妈的糖盒，冒着雨飞快地跑出门去。</p><p> 我手里攥着万芳送给我的小刀一路走一路想，叫我怎么说呢？她还会像以前一样和我要好吗？一定不会了。 我轻轻地敲了敲门。门开了，万芳伸出头来，一把拉了我进去。 </p><p>“你怎么啦？也不打伞，是不是挨揍了？”万芳奇怪地看着我。 </p><p>“没有……”我慢慢从口袋里掏出小刀，“你能不能把羚羊还我……”我几乎听 不见自己的声音。</p><p> 万芳愣了一下，没有接小刀，只是咬着嘴唇看着我，我垂下眼睛不敢看她。</p><p> “昨天不是说得好好的，你怎么能这样呢？” </p><p>我努力不让自己哭出来。这时，她的妈妈从屋里出来了。看见我手里的小刀，又看看我们的样子，立刻明白了：“万芳，你是不是拿了人家什么东西？”</p><p> 万芳看了我一眼，跑进屋去。过了一会儿，她拿着那只羚羊出来了。她妈妈接过来一看说：“哎呀！你怎么能拿人家这么贵重的东西哪！”她把羚羊递到我的手上:“好好拿着，别难受，看我呆会儿揍她！” </p><p>我把小刀递到她的手上说：“阿姨！羚羊是我送她的，都怪我……”当我抬起头来的时候，万芳已经不见了，我知道她不会再跟我好了…… </p><p><strong>我一个人慢慢地走在路上。月亮出来了，冷冷的，我不禁打了个寒战。路上一点声音也没有。</strong>忽然，我听见有人在喊我的名字，我回过头，只见万芳跑了过来。她把小刀塞到我的手里说：“你拿着，咱俩还是好朋友……”</p><p> 我呆呆地望着她，止不住流下了眼泪。我觉得我是世界上最伤心的人！因为我对朋友后悔了。我做了一件多么不光彩的事啊！</p><h3 id="有感"><a href="#有感" class="headerlink" title="有感"></a>有感</h3><p>本文讲的是父母与子女之间发生的一场矛盾，“我”把贵重的羚羊木雕在父母不知情的情况下送给了好朋友，父母要“我”从好朋友那儿把木雕拿回来，“我”以为她再也不会和我做朋友，最后“我们”却和解，但“我”感到很惭愧。</p><p>个人认为，本文重在歌颂友情，讲述的是父母与子女之间的”代沟“。</p><p>批评的是父母重财轻义的行为，赞美的是小朋友真诚无私的友谊。</p><p>这篇文章的写作手法我很喜欢，也是我唯一还记忆犹新的初中文章，可能是当时老沈（语文老师）讲的很棒。</p><p>值得一提的是，高考成绩出来后，老沈还给我打电话询问情况，真的很感动，没想到老沈真的一直记着他的学生。</p><p>我的语文一直中等水平，甚至偏下，所以写的不好，望谅解！</p><h4 id="开门见山"><a href="#开门见山" class="headerlink" title="开门见山"></a>开门见山</h4><blockquote><p>“那只羚羊哪儿去啦？”妈妈突然问我。</p></blockquote><p>直奔主题，设置悬念，激发读者阅读兴趣。同时“不见其人，先闻其声“，“啦？”、“突然”很有效的吸引了读者的眼球，记叙文里面用绝对爽。</p><h4 id="语言描写"><a href="#语言描写" class="headerlink" title="语言描写"></a>语言描写</h4><p>本文大篇幅的写对话，很鲜明的塑造出人物的形象，可以更生动形象的表现出人物的思想感情。</p><h4 id="肖像描写"><a href="#肖像描写" class="headerlink" title="肖像描写"></a>肖像描写</h4><p>本文对人物的刻画</p><blockquote><p> “放在哪儿了？拿来我看看。”妈妈好像看出我在撒谎。因为我站在那儿一动不动，低着头不敢看她。</p><p> “要说实话……是不是拿出去卖啦？”妈妈变得十分严厉。</p><p> “没有卖……我送人了。”我觉得自己的声音有些发抖。</p><p> “送给谁了？告诉我。”妈妈把手搭在我的肩膀上。</p></blockquote><p>表现的是紧张的气氛，描绘出了妈妈的严厉和我的害怕。</p><blockquote><p>“你怎么啦？也不打伞，是不是挨揍了？”万芳奇怪地看着我。 </p><p>“没有……”我慢慢从口袋里掏出小刀，“你能不能把羚羊还我……”我几乎听 不见自己的声音。</p><p> 万芳愣了一下，没有接小刀，只是咬着嘴唇看着我，我垂下眼睛不敢看她。</p></blockquote><p>表现出万芳的不解和“我”的难过、无助。</p><h4 id="动作描写"><a href="#动作描写" class="headerlink" title="动作描写"></a>动作描写</h4><blockquote><p> 我再也受不了了，推开妈妈的糖盒，冒着雨飞快地跑出门去。</p></blockquote><p>“推开”、“飞快地跑”，这些动词生动的表现出“我”难过的心情，没有得到家人尊重的失望。</p><blockquote><p>我手里攥着万芳送给我的小刀一路走一路想，叫我怎么说呢？她还会像以前一样和我要好吗？一定不会了。 我轻轻地敲了敲门。门开了，万芳伸出头来，一把拉了我进去。</p></blockquote><p>”攥着“、“一路走一路想”、“轻轻地敲”表现出我不知道如何面对万芳的心情，紧张、焦虑、自责、不知所措，像极了做错事的小孩。</p><p>文中还有很多动词能精准的刻画出人物的心情。</p><h4 id="心理描写"><a href="#心理描写" class="headerlink" title="心理描写"></a>心理描写</h4><blockquote><p>叫我怎么说呢？她还会像以前一样和我要好吗？一定不会了。 </p></blockquote><p>文中很多心理描写，真实的展示人物心路历程，更好的揭示出人物性格特点，使人物形象更丰富。</p><h4 id="环境描写"><a href="#环境描写" class="headerlink" title="环境描写"></a>环境描写</h4><blockquote><p>我一个人慢慢地走在路上。月亮出来了，冷冷的，我不禁打了个寒战。路上一点声音也没有。</p></blockquote><p>这是我记忆最深的一句话了，只记得老沈当时把这句夸上了天，我也很喜欢，“我一个人慢慢地走在路上”用了动词表现我的难过，“月亮出来了，冷冷的，我不禁打了个寒战，路上一点声音都没有”通过环境的凄冷烘托出我内心的难过无助。真的直接绝杀“记叙文”。</p><h4 id="其实本文不是每一句或是每一段单独使用各种手法，而是都相结合起来，描写语言的同时，也有动作、心理、环境、肖像。同时也有倒叙、叙事等手法，是写作手法的典范，真的值得学习，我很喜欢，而且题材很接近生活，很有可能就在发生在我们身边，很容易引起共鸣。"><a href="#其实本文不是每一句或是每一段单独使用各种手法，而是都相结合起来，描写语言的同时，也有动作、心理、环境、肖像。同时也有倒叙、叙事等手法，是写作手法的典范，真的值得学习，我很喜欢，而且题材很接近生活，很有可能就在发生在我们身边，很容易引起共鸣。" class="headerlink" title="其实本文不是每一句或是每一段单独使用各种手法，而是都相结合起来，描写语言的同时，也有动作、心理、环境、肖像。同时也有倒叙、叙事等手法，是写作手法的典范，真的值得学习，我很喜欢，而且题材很接近生活，很有可能就在发生在我们身边，很容易引起共鸣。"></a>其实本文不是每一句或是每一段单独使用各种手法，而是都相结合起来，描写语言的同时，也有动作、心理、环境、肖像。同时也有倒叙、叙事等手法，是写作手法的典范，真的值得学习，我很喜欢，而且题材很接近生活，很有可能就在发生在我们身边，很容易引起共鸣。</h4>]]></content>
    
    
    <categories>
      
      <category>生活派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>requests库及正则表达式</title>
    <link href="/2023/10/17/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/request%E5%BA%93%E5%8F%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/10/17/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/request%E5%BA%93%E5%8F%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="requests库及正则表达式"><a href="#requests库及正则表达式" class="headerlink" title="requests库及正则表达式"></a>requests库及正则表达式</h1><h3 id="安装requests库"><a href="#安装requests库" class="headerlink" title="安装requests库"></a>安装requests库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install requests<br></code></pre></td></tr></table></figure><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><p>requests库中使用get方法发出get请求并返回相应的请求信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>r = requests.get(<span class="hljs-string">&#x27;http://www.kuwo.cn&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(r))<br><br><span class="hljs-comment">#结果&lt;class &#x27;requests.models.Response&#x27;&gt;</span><br><span class="hljs-comment">#r是一个对象，属于requests.models.Response类</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">r.status_code</td><td align="center">检查请求是否成功</td></tr><tr><td align="center">r.content</td><td align="center">转换为二进制</td></tr><tr><td align="center">r.text</td><td align="center">转化为文本</td></tr><tr><td align="center">r.encoding</td><td align="center">定义编码类型</td></tr></tbody></table><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>使用request.get()得到网页源码，需要从网页源码中提取数据。</p><p>正则表达式是处理字符串的强大工具，可以使用正则表达式提取数据。</p><p>正则表达式使用复杂，看文字描述理解起来很困难，所以在下面放个小视频，建议慢速观看呵呵^_^</p><p><a href="https://www.bilibili.com/video/BV1da4y1p7iZ/?spm_id_from=333.337.search-card.all.click&vd_source=13f8789728a122069a44137b57d359a9">正则表达式小视频</a></p><p><a href="https://regex101.com/">正则表达式在线测试</a></p><table><thead><tr><th align="center">模式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\w</td><td align="center">匹配字母、数字下划线</td></tr><tr><td align="center">\W</td><td align="center">非字母、数字、下划线</td></tr><tr><td align="center">\s</td><td align="center">匹配任意空白字符，等价于[\t\n\r\f]</td></tr><tr><td align="center">\S</td><td align="center">非空白字符</td></tr><tr><td align="center">\d</td><td align="center">匹配任意数字，等价于[0-9]</td></tr><tr><td align="center">\D</td><td align="center">非数字</td></tr><tr><td align="center">\A</td><td align="center">匹配字符串开头</td></tr><tr><td align="center">\Z</td><td align="center">匹配字符串结尾，若有换行，匹配换行前的结束字符</td></tr><tr><td align="center">\z</td><td align="center">若有换行，同时匹配换行字符</td></tr><tr><td align="center">\G</td><td align="center">匹配最后匹配完成的位置</td></tr><tr><td align="center">\n</td><td align="center">匹配一个换行符</td></tr><tr><td align="center">\t</td><td align="center">匹配一个制表符</td></tr><tr><td align="center">^</td><td align="center">匹配一行字符串的开头</td></tr><tr><td align="center">.</td><td align="center">匹配任意字符，除了换行符</td></tr><tr><td align="center">$</td><td align="center">匹配一行字符串的结尾</td></tr><tr><td align="center">[…]</td><td align="center">用来表示一组字符，单独列出，例如[amk]用来匹配a、m或k</td></tr><tr><td align="center">[^…]</td><td align="center">匹配不在[]的字符</td></tr><tr><td align="center">*</td><td align="center">匹配0个或多个表达式</td></tr><tr><td align="center">+</td><td align="center">匹配一个或多个表达式</td></tr><tr><td align="center">?</td><td align="center">匹配0个或1个前面正则表达式定义的片段，非贪婪模式</td></tr><tr><td align="center">{n}</td><td align="center">精确匹配n个前面的表达式</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配n到m次由前面正则表达式定义的片段，贪婪模式</td></tr><tr><td align="center">a|b</td><td align="center">匹配a或b</td></tr><tr><td align="center">()</td><td align="center">匹配括号内的表达式</td></tr></tbody></table><p>下面介绍python的正则表达式库re，利用这个库能很容易使用正则表达式</p><ol><li><p>match方法：检查字符串和正则表达式是否匹配</p><p> match方法从字符串<strong>起始位置</strong>开始匹配正则表达式，如果匹配则返回成功结果，如果不匹配则返回None</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>content = <span class="hljs-string">&#x27;hello 123 456 fine&#x27;</span><br><span class="hljs-comment">#第一个参数传递正则表达式，第二个传入字符串</span><br>result = re.match(<span class="hljs-string">&#x27;^hello\s\d&#123;3&#125;\s\d&#123;3&#125;\s\w&#123;4&#125;&#x27;</span>,content)<br><span class="hljs-comment">#结果返回1个对象包括两个方法，group方法输出匹配到的内容，span方法输出匹配的范围</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#&lt;re.Match object; span=(0, 18), match=&#x27;hello 123 456 fine&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(result.group())<br><span class="hljs-built_in">print</span>(result.span())<br><span class="hljs-comment">#hello 123 456 fine</span><br><span class="hljs-comment">#(0, 18)</span><br><br><span class="hljs-comment">#想要提取字符串的一部分可以在正则表达式中插入括号，在给group方法传递参数提取</span><br>result = re.match(<span class="hljs-string">&#x27;^hello\s\d&#123;3&#125;\s\d&#123;3&#125;\s（\w&#123;4&#125;）&#x27;</span>,content)<br><span class="hljs-comment">#group的数字表示输出正则表达式第几个括号匹配的结果</span><br><span class="hljs-built_in">print</span>(group(<span class="hljs-number">1</span>))<br><span class="hljs-comment">#fine</span><br><br><span class="hljs-comment">#还可以使用正则表达式通用匹配.*，使表达式不那么繁琐</span><br><span class="hljs-comment">#&#x27;.&#x27;表示可以匹配任意字符，注意不包括换行符！！！</span><br><span class="hljs-comment">#&#x27;*&#x27;代表匹配前面字符无限次</span><br><span class="hljs-comment">#将上面例子改写</span><br>result = re.match(<span class="hljs-string">&#x27;^hello.*fine$&#x27;</span>,content)<br><br><span class="hljs-comment">#贪婪和非贪婪</span><br>content = <span class="hljs-string">&#x27;hello 123456 fine&#x27;</span><br>result = re.match(<span class="hljs-string">&#x27;^hello.*(\d+).*fine$&#x27;</span>,content)<br><span class="hljs-built_in">print</span>(result.group(<span class="hljs-number">1</span>)) <span class="hljs-comment">#6</span><br><span class="hljs-comment">#我们想输出123456但运行结果为6，因为.*尽可能匹配多的字符，称为贪婪匹配</span><br><span class="hljs-comment">#我们需要使用.*?这样就变为非贪婪</span><br>result = re.match(<span class="hljs-string">&#x27;^hello.*？(\d+).*fine$&#x27;</span>,content)<br><span class="hljs-built_in">print</span>(result.group(<span class="hljs-number">1</span>)) <span class="hljs-comment">#123456</span><br><br><span class="hljs-comment">#修饰符</span><br><span class="hljs-comment">#上面说到.*匹配不包括换行符，若字符中存在换行符怎么办</span><br><span class="hljs-comment">#我们需要使用修饰符,re.S</span><br>content = <span class="hljs-string">&#x27;&#x27;&#x27;hello 123456</span><br><span class="hljs-string">fine</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>result = re.match(<span class="hljs-string">&#x27;^hello.*fine$&#x27;</span>,content,re.S)<br><span class="hljs-built_in">print</span>(result.group())<br><span class="hljs-comment">#还有re.I(使匹配对大小写不敏感)等</span><br><br><span class="hljs-comment">#转意匹配</span><br><span class="hljs-comment">#字符串中有&#x27;.&#x27;等符号如何匹配，需要用到&#x27;\&#x27;</span><br>content = <span class="hljs-string">&#x27;(酷狗)www.kugou.com&#x27;</span><br>result = re.match(<span class="hljs-string">&#x27;\(酷狗\)www\.kugou\.com&#x27;</span>,content)<br><span class="hljs-built_in">print</span>(result.group())<br></code></pre></td></tr></table></figure></li><li><p>search方法：不同于match，它不是从头开始匹配，它会<strong>扫描整个字符串</strong>，然后返回第一个匹配成功的结果，如果没有返回None。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">content = <span class="hljs-string">&#x27;no hello 123456 fine&#x27;</span><br>result1 = re.search(<span class="hljs-string">&#x27;hello.*fine$&#x27;</span>,content)<br>result2 = re.match(<span class="hljs-string">&#x27;hello.*fine$&#x27;</span>,content)<br><span class="hljs-built_in">print</span>(result1)<br><span class="hljs-comment">#&lt;re.Match object; span=(3, 20), match=&#x27;hello 123456 fine&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(result2)<br><span class="hljs-comment">#None</span><br></code></pre></td></tr></table></figure></li><li><p>findall方法：search只返回第一个匹配成功的结果，findall可以返回所有匹配成功的结果。</p></li><li><p>sub方法：用来修改文本，例如去掉字符中的空格，类似于replace函数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">content = <span class="hljs-string">&#x27;no hello 123456 fine&#x27;</span><br><span class="hljs-comment">#去掉空格和数字</span><br>result = re.sub(<span class="hljs-string">&#x27;\s&#x27;</span>|<span class="hljs-string">&#x27;\d&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#nohellofine</span><br></code></pre></td></tr></table></figure></li><li><p>compile方法：将正则字符串变为对象，方便以后复用</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">content1 = <span class="hljs-string">&#x27;2023-10-30 13:20&#x27;</span><br>content2 = <span class="hljs-string">&#x27;2023-10-30 13:21&#x27;</span><br>content3 = <span class="hljs-string">&#x27;2023-10-30 13:22&#x27;</span><br><span class="hljs-comment">#去掉末尾具体时间</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;\d&#123;2&#125;:\d&#123;2&#125;&#x27;</span>)<br>result1 = re.sub(pattern,content1)<br>result2 = re.sub(pattern,content2)<br>result3 = re.sub(pattern,content3)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络爬虫概述</title>
    <link href="/2023/10/17/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/10/17/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="网络爬虫概述"><a href="#网络爬虫概述" class="headerlink" title="网络爬虫概述"></a>网络爬虫概述</h1><h2 id="什么是网络爬虫"><a href="#什么是网络爬虫" class="headerlink" title="什么是网络爬虫"></a>什么是网络爬虫</h2><p>网络爬虫是一个自动提取网页的程序，通过计算机模拟人机交互。</p><h2 id="爬虫的工作原理"><a href="#爬虫的工作原理" class="headerlink" title="爬虫的工作原理"></a>爬虫的工作原理</h2><ul><li>获取数据：爬虫根据URL向服务器发出请求，然后返回数据。request库，request.get(‘URL’)</li><li>解析数据：爬虫把服务器返回的数据解析成我们能看懂的数据。Beautifulsoup库（静态网页），jason库（动态网页）</li><li>提取数据：爬虫从中提取出我们需要的数据。Beautifulsoup库（静态网页），jason库（动态网页）</li><li>存储数据：爬虫把有用的数据保存起来。openpyxl库等</li></ul><h2 id="网络爬虫的分类"><a href="#网络爬虫的分类" class="headerlink" title="网络爬虫的分类"></a>网络爬虫的分类</h2><ul><li>通用爬虫：抓取系统的重要组成部分，爬取整个页面信息</li><li>聚焦爬虫：建立在通用爬虫基础上，只爬取页面中特定的一部分</li><li>增量式爬虫：监测网站中数据更新情况，只爬取更新的数据</li><li>深层网络爬虫：大部分内容不能通过静态链接获取的、隐藏在搜索表单后的，只有用户提交一些关键词才能获得的 Web 页面。</li></ul><h2 id="反爬机制"><a href="#反爬机制" class="headerlink" title="反爬机制"></a>反爬机制</h2><ol><li>大数据时代，数据是宝贵的财富，企业为了阻止自己网站数据被爬走而建立反爬机制；</li><li>简单低级的网络爬虫采集速度快，它们能很快的爬取数据，甚至请求过度影响服务器不能正常工作。</li><li>反爬机制是把双刃剑，一方面可以保护企业，另一方面机制过于严格会导致用户正常使用。</li><li>反爬机制重点针对简单粗暴的数据采集。</li></ol><p>Robots协议：互联网爬虫公认的一项道德规范，并没有纳入法律，全称“网络爬虫排除标准”，这个协议告诉哪些可以爬哪些不可以爬。域名后加上&#x2F;robots.txt就可以查看协议。</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值型向量和运算</title>
    <link href="/2023/10/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%80%BC%E5%9E%8B%E5%90%91%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97/"/>
    <url>/2023/10/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%80%BC%E5%9E%8B%E5%90%91%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="数值型向量和运算"><a href="#数值型向量和运算" class="headerlink" title="数值型向量和运算"></a>数值型向量和运算</h1><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>指直接写在程序中的值，包括数值、字符串等。</p><ul><li>数值型：包括整型、单精度、双精度等，R中一般不需要区分。</li><li>字符型：支持中文</li><li>逻辑型：TRUE和FALSE，表示真和假，注意 <strong>大小写</strong></li><li>缺失值用NA表示</li><li>支持复数类型</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量用来保存输入的值或者计算得到的值。在R中变量可以保存所有的数据类型。</p><p>变量都有变量名，<strong>R变量名必须以字母、数字下划线组成，变量名的第一个字符不能取数字，变量名区分大小写。</strong></p><p>用赋值（&lt;-）的方法定义变量名,也可以写成&#x3D;，但是&lt;-更直观。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">x1 <span class="hljs-operator">&lt;-</span> 1<br>x2 <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="R的数据结构"><a href="#R的数据结构" class="headerlink" title="R的数据结构"></a>R的数据结构</h3><p>包括<strong>向量、矩阵、数据框、多维数组、列表等</strong>，数据中元素、行、列还可以用名字访问，最基本的是向量类型。</p><h2 id="数值型向量及其运算"><a href="#数值型向量及其运算" class="headerlink" title="数值型向量及其运算"></a>数值型向量及其运算</h2><p>向量：将若干个基础类型形同的值存储在一起。各个元素可以按序号访问。如果将若干个数值存储在一起可以用序号访问，就叫做一个数值型向量</p><p>用c()函数把多个元素或向量组合成一个向量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">x1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-operator">:</span><span class="hljs-number">9</span><span class="hljs-punctuation">)</span><span class="hljs-comment">#表示1到2和7到9的整数组成的向量</span><br>y <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span>x<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>length(x) 可以求 x 的长度。长度为零的向量表示为 numeric(0)。numeric() 函数可以用来初始化一个指定元素个数而元素都等于零的数值型向量，如 numeric(10) 会生成元素为 10 个零的向量.</p><h4 id="向量与标量的运算"><a href="#向量与标量的运算" class="headerlink" title="向量与标量的运算"></a>向量与标量的运算</h4><p>等于每个元素与标量的运算</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span> <br>x <span class="hljs-operator">+</span> <span class="hljs-number">2</span><br><span class="hljs-comment">## 3 12</span><br></code></pre></td></tr></table></figure><p>若有缺失值，运算结果仍缺失。</p><h4 id="等长向量运算"><a href="#等长向量运算" class="headerlink" title="等长向量运算"></a>等长向量运算</h4><p>等于对应元素两两运算</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">x1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>x2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>x1 <span class="hljs-operator">+</span> x2<br><span class="hljs-comment">## 5 12</span><br></code></pre></td></tr></table></figure><h4 id="不等长向量运算"><a href="#不等长向量运算" class="headerlink" title="不等长向量运算"></a>不等长向量运算</h4><p>等于每次从头重复利用短的一个（长度必须是倍数关系）</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">x1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br>x2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">7</span><span class="hljs-punctuation">)</span><br>x1 <span class="hljs-operator">+</span> x2<br><span class="hljs-comment">## [1] 11 23 15 27</span><br></code></pre></td></tr></table></figure><p>如果向量长度不是倍数关系，会报错</p><h4 id="向量化函数"><a href="#向量化函数" class="headerlink" title="向量化函数"></a>向量化函数</h4><p>对向量进行函数运算，会对每个元素进行运算</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqrt</span>(c(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>))<br><span class="hljs-comment"># 1.0 2.0</span><br></code></pre></td></tr></table></figure><p>常用的数学函数：</p><ul><li><p>舍入：ceiling, floor, round, signif, trunc, zapsmall</p></li><li><p>符号函数 sign</p></li><li><p>绝对值 abs</p></li><li><p>平方根 sqrt</p></li><li><p>对数与指数函数 log, exp, log10, log2</p></li><li><p>三角函数 sin, cos, tan</p></li><li><p>反三角函数 asin, acos, atan, atan2</p></li><li><p>双曲函数 sinh, cosh, tanh</p></li><li><p>反双曲函数 asinh, acosh, atanh</p></li></ul><h4 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h4><p>sort(x) 返回排序结果。rev(x) 返回把各元素排列次序反转后的结果。order(x) 返回排序用的下标。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>sort<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1 2 3</span><br>rev<span class="hljs-punctuation">(</span>sort<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 3 2 1</span><br>order<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 2 3 1</span><br>x<span class="hljs-punctuation">[</span>order<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 1 2 3</span><br></code></pre></td></tr></table></figure><h4 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h4><p>sum(求和), mean(求平均值), var(求样本方差), sd(求样本标准差), min(求最小值), max(求最大值), range(求最小值和最大值) 等函数称为统计函数，把输入向量看作样本，计算样本统计量。prod 求所有元素的乘积。cumsum 和 cumprod 计算累加和累乘积。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 6</span><br>mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 2</span><br><span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1</span><br><span class="hljs-built_in">cumsum</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1 3 6</span><br><span class="hljs-built_in">cumprod</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1 2 6</span><br></code></pre></td></tr></table></figure><h4 id="seq-、rep-规则序列生成函数"><a href="#seq-、rep-规则序列生成函数" class="headerlink" title="seq()、rep()规则序列生成函数"></a>seq()、rep()规则序列生成函数</h4><p>seq 函数是冒号运算符的推广。rep() 函数用来产生重复数值。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">seq<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1 2 3 4 5</span><br>seq<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span>by <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1 3 5</span><br><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1 1 3 3 3 3</span><br><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>each <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1 1 3 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R语言入门</title>
    <link href="/2023/10/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/R%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    <url>/2023/10/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/R%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="R语言入门"><a href="#R语言入门" class="headerlink" title="R语言入门"></a>R语言入门</h1><p>简单的实现一些命令样例，有过编程经历会很简单，像学过C、C++、Python等。</p><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-number">1</span><span class="hljs-operator">+</span><span class="hljs-number">2</span><br><span class="hljs-comment">#3</span><br><br><span class="hljs-number">5</span> <span class="hljs-operator">+</span> <span class="hljs-punctuation">(</span><span class="hljs-number">2.3</span> <span class="hljs-operator">-</span> <span class="hljs-number">1.123</span><span class="hljs-punctuation">)</span><span class="hljs-operator">*</span><span class="hljs-number">3.2</span><span class="hljs-operator">/</span><span class="hljs-number">1.1</span> <span class="hljs-operator">+</span> <span class="hljs-number">1.23E3</span><br><span class="hljs-comment">#1238.418</span><br></code></pre></td></tr></table></figure><p>井号表示注释，这里我标识输出结果。1.23E3表示科学计数法，表示1.23*10^3。</p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><h4 id="平方根、指数、对数"><a href="#平方根、指数、对数" class="headerlink" title="平方根、指数、对数"></a>平方根、指数、对数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">sqrt</span><span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 2</span><br><span class="hljs-built_in">exp</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 2.718282</span><br>log10<span class="hljs-punctuation">(</span><span class="hljs-number">10000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 4</span><br><br></code></pre></td></tr></table></figure><p>sqrt()表示开根号，exp表示e^1，log是取对数。</p><h4 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">round</span><span class="hljs-punctuation">(</span><span class="hljs-number">1.1234</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1.12</span><br><span class="hljs-built_in">round</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1.9876</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># -1.99</span><br><span class="hljs-built_in">floor</span><span class="hljs-punctuation">(</span><span class="hljs-number">1.1234</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1</span><br><span class="hljs-built_in">floor</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1.1234</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># -2</span><br><span class="hljs-built_in">ceiling</span><span class="hljs-punctuation">(</span><span class="hljs-number">1.1234</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 2</span><br><span class="hljs-built_in">ceiling</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1.1234</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># -1</span><br></code></pre></td></tr></table></figure><p>round()表示四舍五入，floor()表示向下取整，ceiling()表示向下取整。</p><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">pi</span><br><span class="hljs-comment"># 3.14159</span><br><span class="hljs-built_in">sin</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-operator">/</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 0.5</span><br><span class="hljs-built_in">cos</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-operator">/</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 0.8660254</span><br><span class="hljs-built_in">tan</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-operator">/</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 1</span><br><span class="hljs-built_in">asin</span><span class="hljs-punctuation">(</span><span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 0.5235988</span><br><span class="hljs-built_in">acos</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">sqrt</span><span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 0.5235988</span><br><span class="hljs-built_in">atan</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">sqrt</span><span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 0.5235988</span><br></code></pre></td></tr></table></figure><p>pi表示圆周率，sin表示正弦，cos表示余弦，tan表示正切，前面加上a表示反函数。</p><h4 id="分布函数"><a href="#分布函数" class="headerlink" title="分布函数"></a>分布函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">dnorm<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 0.05399097</span><br>pnorm<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 0.9772499</span><br>qnorm<span class="hljs-punctuation">(</span><span class="hljs-number">0.98</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 2.053749</span><br>qt<span class="hljs-punctuation">(</span><span class="hljs-number">1</span> <span class="hljs-operator">-</span> <span class="hljs-number">0.05</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 2.228139</span><br></code></pre></td></tr></table></figure><p>dnorm()表示标准正态分布密度，pnorm()表示标准正态分布函数，qnorm()表示标准正态分布分位数函数。求自由度为 10 的 t 检验的双侧临界值。其中 qt(y,df) 表示自由度为 df 的 t 分布的分位数函数。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">print<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 2</span><br>cat<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;sin(pi/2)=&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">sin</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># sin(pi/2)= 1</span><br></code></pre></td></tr></table></figure><p>print()是最常用的输出方式，cat()函数显示多项内容，包括数值和文本。’\n’表示换行符。</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R语言介绍</title>
    <link href="/2023/10/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/R%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/10/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/R%E7%AC%94%E8%AE%B0/R%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="R语言介绍"><a href="#R语言介绍" class="headerlink" title="R语言介绍"></a>R语言介绍</h1><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><p>R来自S语言，R是一个自由软件，GPL授权，与S语言有基本相同的功能和统计功能。</p><h2 id="R的特点"><a href="#R的特点" class="headerlink" title="R的特点"></a>R的特点</h2><ul><li>自由软件，免费、开源，支持各种操作系统</li><li>完整程序设计语言，基于函数和对象，可自定义函数，可以调入C、C++等函数</li><li>具有完善的数据类型，如向量、矩阵、因子、数据框，支持缺失值，代码简洁可读</li><li>支持复杂算法描述，图形功能强</li><li>实现很多经典、现代的统计方法，如参数检验、线性回归、方差分析、判别、聚类等。</li><li>有很多扩展包和函数库</li><li>支持对象类和类方法，面向对象</li><li>动态类型语言，解释执行，速度较慢</li><li></li></ul><h2 id="R下载安装"><a href="#R下载安装" class="headerlink" title="R下载安装"></a>R下载安装</h2><p><a href="https://www.r-project.org/">R的官方网站</a>下载，官网在海外，通过海底电缆下载速度慢，可以使用<a href="http://mirror.bjtu.edu.cn/cran/">镜像网站</a>下载。</p><p>R的图形界面可以使用<a href="https://www.rstudio.com/">Rstudio</a></p><p>整个安装过程都是一路next，无脑操作，只是注意选择稳定的版本和合适的版本。</p><p>建议学习Rstudio基本结构，熟悉使用流程：<a href="https://zhuanlan.zhihu.com/p/72804912">Rstudio使用教程</a></p><h2 id="R的扩展包安装"><a href="#R的扩展包安装" class="headerlink" title="R的扩展包安装"></a>R的扩展包安装</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment">#安装后打开Rstudio可以输入以下命令安装</span><br><span class="hljs-comment">#指定镜像网站下载可以加快速度</span><br>options（repos<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>CRAN<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://mirror.tuna.tsinghuaedu.cn/CRAN/&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;sos&quot;</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>sos<span class="hljs-punctuation">)</span><span class="hljs-comment">#导入下载的库</span><br><br><span class="hljs-comment">#更新扩展包</span><br>update.packages<span class="hljs-punctuation">(</span>checkBuilt<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span>ask<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页基础知识</title>
    <link href="/2023/10/14/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/%E7%BD%91%E9%A1%B5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/10/14/%E5%AD%A6%E4%B9%A0%E6%B4%BE/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/%E7%BD%91%E9%A1%B5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="网页基础知识"><a href="#网页基础知识" class="headerlink" title="网页基础知识"></a>网页基础知识</h1><h2 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h2><p>URI：Uniform Resource Identifier 即统一资源标志符</p><p>URL：Uniform Resource Locator 即统一字符定位符</p><p>通过一个链接，便可以从互联网找到某个资源，这个链接就是URI&#x2F;URL</p><p>URL是URI的子集，除了URL，URI还有一个子集</p><p>URN：Uniform Resource Name 即统一资源名称，其只为资源命名而不定位。</p><p><em>URI &#x3D; URN + URL</em></p><p>URL的组成格式：scheme:&#x2F;&#x2F;[username:password@]hostname[:port][&#x2F;path]][;parameters][?query][#fragment]</p><p>【】内的内容代表非必要部分</p><ul><li>scheme:协议，例如http，https，ftp等</li><li>username，password：用户名和密码，某些情况下需要用户名和密码才能访问URL</li><li>hostname：主机地址，可以是域名或者IP地址</li><li>port：端口，可以默认不显示</li><li>Path:路径，指网络资源在服务器的指定地址</li><li>parameters：参数，用来访问某个资源时的附加信息</li><li>query：查询，用来查询资源</li><li>fragment：片段，对资源的补充描述</li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>中文名“超文本传输协议”，是客户端与服务端进行数据交互的一种形式。</p><p>用于从网络传输超文本数据到本地浏览器的传送协议，它能保证高效而准确的传送超文本内容。</p><ul><li>User-Agent：请求发出者的身份信息。</li><li>Connection：请求完毕后断开(close)连接还是保持(keep alive)连接。</li><li>Content-type：服务器响应回客户端的数据类型。</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>安全版的HTTP，在HTTP下加入SSL层。</p><p>加密方式：</p><ul><li>对称密钥加密（不安全）</li><li>非对称密钥加密（不安全）</li><li>证书密钥加密（最安全）</li></ul><h2 id="HTTP请求过程"><a href="#HTTP请求过程" class="headerlink" title="HTTP请求过程"></a>HTTP请求过程</h2><p>过程实际上在浏览器地址栏输入URL回车后，浏览器向网站所在服务器发出一个请求，网站接到请求后处理解析，再返回浏览器。</p><p>打开网页开发者模式，选择Network监听组件（可以在当前访问页面，显示所有网络请求和响应），观察其中一个请求</p><p><img src="/images/http%E8%AF%B7%E6%B1%82.png" alt="http请求"></p><p>其中摘要（General）部分：</p><ul><li>Request URL（URL）：请求的URL</li><li>Status Code（状态）：响应状态码</li><li>Remote Adress（地址）：远程服务器的地址和端口</li></ul><p>其中请求部分：</p><ol><li>请求方法：get和post<ul><li>get请求如在百度搜引擎查询一个信息，请求的参数包含在URL中可以看见，提交的数据最多只能有1024字节</li><li>post请求例如登陆表单提交信息，请求的参数包含在一个表单中传输看不见，数据量没有限制</li></ul></li><li>请求的网址：唯一确定客户想要的网址</li><li>请求头：如上图第二个部分所示：<ul><li>Accept：报头域，指定客户端可以接受哪些类型信息</li><li>Accept-Languag：指定客户端可以接受的语言类型</li><li>Accept-Encodin：指定客户端可以接受的编码类型</li><li>Host：指定请求资源的主机IP或端口号</li><li>Cookie：网站辨别用户，当我们刷新或者查看该网站其他页面时，我们都处于登陆状态就是Cookies的功劳</li><li>Referer：标识请求从哪里发出</li><li>User-Agent：使服务器识别客户端的信息，常用来伪装爬虫</li></ul></li><li>请求体：一般承载的是post请求中的表单数据，对于get一般为空</li></ol><p>其中响应部分：</p><ol><li>如上图第三个部分<ul><li>Date：标识响应时间</li><li>Content-Encoding：响应内容的编码</li><li>Server：包含服务器的信息</li><li>Content-Type：返回的数据类型</li><li>Set-Cookie：设置Cookie</li></ul></li><li>响应体：包含服务器返回的具体数据，可以在上图的预览中查看，Google在preview查看。我们主要通过响应体获取动态网页Jason数据和网页源码。</li></ol><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>超文本标记语言，一种用于创建网页的标准标记语言</p><p>标记语言：将文本及文本以外的信息组合在一起的语言</p><p>例如本博客所有文章采用的markdown语言以及Latex排版。</p><p>网站源码使用浏览器开发者模式打开。</p><p><em>考虑到本文不长，还是记一下html语言学习哈哈哈</em></p><h4 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h4><p>通过&lt;h1&gt;-&lt;h6&gt;标签来定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>  这是我的博客<br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="HTML段落"><a href="#HTML段落" class="headerlink" title="HTML段落"></a>HTML段落</h4><p>通过&lt;p&gt;标签定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  第一个段落<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h4><p>通过&lt;a&gt;标签来定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;https://3-methylindole.github.io&quot;</span>&gt;</span>我的博客链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>href 属性中指定链接的地址</p><h4 id="HTML图像"><a href="#HTML图像" class="headerlink" title="HTML图像"></a>HTML图像</h4><p>通过&lt;img&gt;标签定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">decoding</span>=<span class="hljs-string">&#x27;async&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;/images/爬虫logo.png&#x27;</span> <span class="hljs-attr">alt:</span>&#x27;爬虫<span class="hljs-attr">logo</span>&#x27; <span class="hljs-attr">width</span> = <span class="hljs-string">&#x27;250&#x27;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&#x27;250&#x27;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>src属性：指定文件路径</p><p>alt属性：图片无法显示时替代的文本</p><p>附：[html菜鸟教程][<a href="https://www.runoob.com/html/html-tutorial.html]">https://www.runoob.com/html/html-tutorial.html]</a></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>层叠样式表，为HTML定义布局</p><p>css通过改变HTML中标签的样式来定义布局</p><p>利用属性选择器改变标签样式</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>脚本语言，实现用户与网页的互动</p><p>和CSS一样让网页更美观。</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu文件管理</title>
    <link href="/2023/10/09/%E5%AD%A6%E4%B9%A0%E6%B4%BE/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Ubuntu%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2023/10/09/%E5%AD%A6%E4%B9%A0%E6%B4%BE/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Ubuntu%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu文件管理"><a href="#Ubuntu文件管理" class="headerlink" title="Ubuntu文件管理"></a>Ubuntu文件管理</h1><h2 id="几种文件系统介绍"><a href="#几种文件系统介绍" class="headerlink" title="几种文件系统介绍"></a>几种文件系统介绍</h2><p><strong>文件系统是解决如何在存储设备上存储数据的一套方法</strong></p><p>目前windows操作系统常用的文件系统</p><ul><li>FAT：兼容性最好，最大仅支持2GB分区。</li><li>FAT32：兼容性好，单个文件不能超过4GB，不支持512MB以下容量的U盘。</li><li>exFAT：专为闪存和U盘设计，主要是为了解决FAT32不支持4G或更大文件的问题而推出的。</li><li>NTFS：windows NT核心和高级服务器网络操作系统环境的文件系统，支持任意大小的U盘。</li></ul><p>Linux常用的操作系统</p><ul><li>Ext</li><li>Ext2</li><li>Ext3</li><li>Ext4</li></ul><h2 id="文件系统的概念"><a href="#文件系统的概念" class="headerlink" title="文件系统的概念"></a>文件系统的概念</h2><p>一切都是文件，实现设备无关性。</p><p>UNIX系统把每个硬件都看成是一个文件，通常称为设备文件，这样用户就可以通过读写文件的方式实现对硬件的访问，而Linux正是重写UNIX而来的。</p><ul><li><p>物理磁盘到文件系统</p><p>  硬盘有数个盘片，每个盘片有两面，每面有一个磁头</p><p>  盘片被划分为多个扇形区域即扇区</p><p>  同一盘片的不同半径的同心轨道称为磁道</p><p>  不同盘片相同半径构成的圆柱面称为柱面</p><p>  扇区、磁道和磁头构成了硬盘结构的基本参数</p><p>  这些参数可以计算硬盘容量：</p><p>  <strong>存储容量&#x3D;磁头数*磁道数*每道扇区数*每扇区字节数</strong></p><p>  Linux将磁盘分为三个区域进行管理</p><ul><li>超级块：存放文件系统本身的结构信息，例如记录每个区域的大小，存放未被使用的磁盘块信息</li><li>i-点表：每个i-节点就对应一个文件&#x2F;目录的结构</li><li>数据区：文件的内容保存在这里</li></ul></li><li><p>存储介质</p><p>  用来存储数据的物理设备：硬盘、光盘</p></li><li><p>磁盘分区</p><p>  将硬盘分割为大小不一的多个区域，以便规划和满足实际的需要</p></li><li><p>格式化</p><p>  创建新的文件系统的一个过程，先进行磁盘分区，再进行文件系统的创建或格式化</p></li><li><p>挂载</p><p>  激活一个文件系统</p></li></ul><h2 id="文件与目录的定义"><a href="#文件与目录的定义" class="headerlink" title="文件与目录的定义"></a>文件与目录的定义</h2><p>Linux以文件表示所有的逻辑实体和非逻辑实体</p><ul><li>逻辑实体：文件与目录</li><li>非逻辑实体：泛指硬盘、终端机和打印机等</li></ul><p>Linux文件名由字母、标点和数字构成，中间不能有空格、转意符和有关shell的关键符</p><p>Linux文件系统以根目录最为重要，根目录下有：</p><ul><li>&#x2F;etc：系统所需要的配置文件和管理文件</li><li>&#x2F;dev：存放装置文件，是访问外部设备的一个端口，包含所有在系统中使用的外部设备</li><li>&#x2F;boot：与系统激活的相关文件，系统启动时要用到的</li><li>&#x2F;home：登陆用户的主目录</li><li>&#x2F;lib：函数库，几乎所有的应用程序都会用到</li><li>&#x2F;root：系统管理用户root的主目录，超级用户的主目录</li><li>&#x2F;bin：存放一些系统启动时所需要的普通程序和系统程序，及一些经常被其他程序调用的程序，是linux常用外部命令的存放处</li></ul><h2 id="文件结构、类型和属性"><a href="#文件结构、类型和属性" class="headerlink" title="文件结构、类型和属性"></a>文件结构、类型和属性</h2><ol><li><p>文件结构</p><p> 文件存放在磁盘等存储设备上的组织方法，Linux采用的是树形结构，最上面是根目录。</p><p> linux文件路径有两种表示方法</p><ul><li>绝对路径：从根目录开始的路径</li><li>相对路径：以“.”或“..”开始的，“.”表示用户当前操作处的目录，“..”表示上级目录</li></ul></li><li><p><strong>文件类型</strong></p><p> 普通文件：使用ls -l查看文件属性，其属性左侧第一列为“-”</p><p> 纯文本文件：属于普通文件，使用cat、vi直接查看文件内容</p><p> 目录文件：使用ls -l查看文件属性，其属性左侧第一列为“d”</p><p> 链接文件：分为符号链接和硬链接，符号链接相当于win的快捷方式，使用ls -l查看文件属性，符号链接属性左侧第一列为“l”</p><p> 设备文件：使用ls -l查看文件属性，字符设备文件属性左侧第一列为“c”，块设备文件为“b”</p><p> 套接字文件：使用ls -l查看文件属性，其属性左侧第一列为“s”</p><p> 管道文件：使用ls -l查看文件属性，其属性左侧第一列为“p”</p></li><li><p>文件属性</p><p> 读（r&#x2F;4）写（w&#x2F;2）执行（x&#x2F;1）</p><p> 可以设置任意组合</p></li></ol><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><h4 id="显示文件命令"><a href="#显示文件命令" class="headerlink" title="显示文件命令"></a>显示文件命令</h4><ol><li><p>cat：串接文件或显示文件内容，也可以从标准输入设备读取数据并将其结果重定向到新文件中，达到新建文件的目的</p><ul><li><p>串接输入内容到文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat -&gt;a.txt<br>cat &gt;a.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">从输入设备输入到文件，若文件不存在则新建</span><br>cat &gt;a.txt&lt;&lt;EOF<br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入EOF则退出编辑</span><br></code></pre></td></tr></table></figure></li><li><p>显示文件内容到屏幕</p></li></ul><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-n或- number</td><td align="center">由1开始对所有行编号</td></tr><tr><td align="center">-b</td><td align="center">对空行不编号</td></tr><tr><td align="center">-s</td><td align="center">遇到连续两行空行代还为一行</td></tr><tr><td align="center">-E</td><td align="center">在每行结束显示$</td></tr></tbody></table><ul><li><p>显示文件内容到文件</p><p>  格式1:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat a1.txt a3.txt&gt;a3.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;表示重定向，若a3.txt不存在则新建</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">若a3.txt内容存在则会被清空</span><br></code></pre></td></tr></table></figure><p>  格式2：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat a1.txt a3.txt&gt;&gt;a3.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;&gt;表示追加重定向，加到a3.txt尾部</span>     <br><span class="hljs-meta prompt_">#</span><span class="language-bash">a3.txt文件内容不会被清空</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>more：显示输出的内容，然后根据窗口的大小进行<strong>分页显示</strong>，在终端底部打印“-More-”及已显示占总文本的百分比</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">f或&lt;空格&gt;</td><td align="center">显示下一页</td></tr><tr><td align="center">&lt;回车&gt;</td><td align="center">显示下一行</td></tr><tr><td align="center">q或Q</td><td align="center">退出</td></tr><tr><td align="center">+number</td><td align="center">从number行开始显示</td></tr><tr><td align="center">-number</td><td align="center">每屏只显示number行</td></tr><tr><td align="center">+&#x2F;pattern</td><td align="center">从文件中的第一个pattern的前两行开始显示</td></tr><tr><td align="center">-c</td><td align="center">从顶部清屏开始显示</td></tr><tr><td align="center">-d</td><td align="center">出现提示</td></tr><tr><td align="center">-s</td><td align="center">把连续多个空行显示一行</td></tr><tr><td align="center">-u</td><td align="center">把文件内容的下划线去掉</td></tr></tbody></table> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">more +2 test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">从第二行开始显示</span><br>more -2 test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">每屏只显示两行</span><br>more +/2 test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">从文件中出现的第一个“2”的前两行开始显示</span><br>more -dc test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示提示，并从终端顶部开始显示</span><br></code></pre></td></tr></table></figure></li><li><p>less：显示输出的内容，根据窗口大小分页显示</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-m</td><td align="center">显示读取文件的百分比</td></tr><tr><td align="center">-M</td><td align="center">显示百分比，行号，总行数</td></tr><tr><td align="center">-N</td><td align="center">每行前输出行号</td></tr><tr><td align="center">-s</td><td align="center">连续多个空白行显示为一个</td></tr><tr><td align="center">-c</td><td align="center">从上到下刷新屏幕并显示</td></tr><tr><td align="center">-f</td><td align="center">强制打开文件</td></tr><tr><td align="center">-i</td><td align="center">搜索时忽略大小写，除非搜索串中存在大写字母</td></tr><tr><td align="center">-I</td><td align="center">搜索时忽略大小写，除非搜索串中存在小写字母</td></tr></tbody></table></li><li><p>head：显示文件前n行&#x2F;段，不带选项默认10行</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-n</td><td align="center">显示前n行</td></tr><tr><td align="center">-c</td><td align="center">显示前c个字节</td></tr></tbody></table> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">head -n 5 test1<br>head -5 test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示前5行内容</span><br>head -n -5 test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示文件除后五行以外所有内容</span><br>head -c 5 test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示前五个字节</span><br>head -c 25 test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示除了最后25个字节以外的所有内容</span><br></code></pre></td></tr></table></figure></li><li><p>tail：显示文件最后n行，默认是10</p></li><li><p><strong>echo</strong>：在显示器上显示一段文字，输出字符串间以空白字符隔开，并在最后加上换行符</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-n</td><td align="center">不输出末尾换行符</td></tr><tr><td align="center">-e</td><td align="center">启用反斜线转意</td></tr><tr><td align="center">\a</td><td align="center">发出警报声</td></tr><tr><td align="center">\c</td><td align="center">最后不加上换行符</td></tr><tr><td align="center">\f</td><td align="center">换行但光标人停留在原来位置</td></tr><tr><td align="center">\nnn</td><td align="center">插入八进制所代表的ASCII字符</td></tr><tr><td align="center">\b</td><td align="center">退格</td></tr><tr><td align="center">\ \</td><td align="center">反斜线</td></tr><tr><td align="center">\n</td><td align="center">另起一行</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\t</td><td align="center">插入tab</td></tr><tr><td align="center">\v</td><td align="center">垂直制表符</td></tr></tbody></table></li><li><p>od：进制输出</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">od -b test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">八进制输出</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="显示目录及文件"><a href="#显示目录及文件" class="headerlink" title="显示目录及文件"></a>显示目录及文件</h4><ol><li><p>ls：列出目录的内容，list的简写</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">显示所有文件</td></tr><tr><td align="center">-A</td><td align="center">显示所有文件，但不显示上一级目录</td></tr><tr><td align="center">-b</td><td align="center">显示当前工作目录下的目录</td></tr><tr><td align="center">-l</td><td align="center">显示出文件的详细信息</td></tr><tr><td align="center">-F</td><td align="center">附加文件类别，符号在文件名最后</td></tr><tr><td align="center">-d</td><td align="center">如果参数是目录，其下文件不显示</td></tr><tr><td align="center">-t</td><td align="center">文件按创建时间依次显示</td></tr><tr><td align="center">-R</td><td align="center">递归显示目录，若目录下有文件，则以下文件也会显示</td></tr><tr><td align="center">-i</td><td align="center">显示文件索引节点信息</td></tr><tr><td align="center">-r</td><td align="center">将文件以相反次序显示（默认英文字母顺序）</td></tr></tbody></table> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l work<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将work目录下的详细文件显示出来</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一列显示文件类型</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二列显示文件数目</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第三列显示文件所有者</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第四列显示所属的组名字</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第五列显示文件字节数</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第六-八列显示上次修改时间</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第九列显示文件名</span><br></code></pre></td></tr></table></figure></li><li><p>pwd：显示当前工作目录的完整路径</p></li><li><p>cd：改变当前工作目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ..<br><span class="hljs-meta prompt_">#</span><span class="language-bash">返回上一级</span><br>cd ～<br><span class="hljs-meta prompt_">#</span><span class="language-bash">回到用户主目录</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="文件创建、删除命令"><a href="#文件创建、删除命令" class="headerlink" title="文件创建、删除命令"></a>文件创建、删除命令</h4><ol><li><p>touch：生成空文件和修改文件存取时间</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-d</td><td align="center">以yyyymmdd的形式修改时间</td></tr><tr><td align="center">-a</td><td align="center">只更改存取时间</td></tr><tr><td align="center">-c</td><td align="center">不建立任何文档</td></tr><tr><td align="center">-m</td><td align="center">只更改变动时间</td></tr><tr><td align="center">-r</td><td align="center">将指定文档时间设成参考文档的时间</td></tr></tbody></table> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch t1 t2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建新文件t1，t2</span><br>touch -r a t1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将t1的文件时间更改为和文件a一样</span><br>touch -d &quot;2020-08-22 20:25:30&quot; a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将a的时间更改为指定的时间</span><br></code></pre></td></tr></table></figure></li><li><p>rm：删除指定文件</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">强制删除</td></tr><tr><td align="center">-i</td><td align="center">删除前出现提示</td></tr><tr><td align="center">-r</td><td align="center">递归删除目录及其内容</td></tr><tr><td align="center">-I</td><td align="center">删除超过三个文件或递归删除前需要确认</td></tr></tbody></table> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -i *.doc<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除所有的.doc文件，删除前会有提示</span><br>rm -ri documents<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除目录documents及其子目录和子目录中的所有文件，删除前会有逐个提示</span><br>rm -rI documents<br><span class="hljs-meta prompt_">#</span><span class="language-bash">一次性确认全部删除</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="目录创建删除命令"><a href="#目录创建删除命令" class="headerlink" title="目录创建删除命令"></a>目录创建删除命令</h4><ol><li><p>mkdir：目录创建</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-p</td><td align="center">依次创建目录</td></tr><tr><td align="center">-m</td><td align="center">设置权限模式</td></tr><tr><td align="center">-v</td><td align="center">显示创建过程信息</td></tr></tbody></table> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir test<br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前目录创建子目录<span class="hljs-built_in">test</span></span><br>mkdir -p t/t1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建子目录t，并在t下创建子目录t1</span><br>mkdir -vp scf/&#123;lib/,bin/,doc/&#123;info.product&#125;&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时创建多个用户并显示过程</span><br></code></pre></td></tr></table></figure><p> -m用来设置权限，读（4）写（2）执行（1），它们的和表达了对该目录的权限，例如7表示可以读、写和执行。</p><p> -m参数的含义</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">600</td><td align="center">只有所有者可以读和写</td></tr><tr><td align="center">644</td><td align="center">所有者读和写，组用户只能读</td></tr><tr><td align="center">666</td><td align="center">每个人都有读写的权利</td></tr><tr><td align="center">700</td><td align="center">所有者可以读写执行</td></tr><tr><td align="center">777</td><td align="center">每个人可以读写执行</td></tr></tbody></table> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -m 777 test<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建目录<span class="hljs-built_in">test</span>，每个人都有读写执行的权限</span><br></code></pre></td></tr></table></figure></li><li><p>rmdir：删除空目录，有文件需要先删除文件</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-p</td><td align="center">当子目录被删除后，若父目录为空则一起删除</td></tr><tr><td align="center">-v</td><td align="center">显示删除步骤</td></tr></tbody></table></li></ol><h4 id="复制、移动命令"><a href="#复制、移动命令" class="headerlink" title="复制、移动命令"></a>复制、移动命令</h4><p>1.cp：将文件目录复制到另一个文件中</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu界面</title>
    <link href="/2023/10/09/%E5%AD%A6%E4%B9%A0%E6%B4%BE/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Ubuntu%20Linux%E7%95%8C%E9%9D%A2/"/>
    <url>/2023/10/09/%E5%AD%A6%E4%B9%A0%E6%B4%BE/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Ubuntu%20Linux%E7%95%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-Linux-界面"><a href="#Ubuntu-Linux-界面" class="headerlink" title="Ubuntu Linux 界面"></a>Ubuntu Linux 界面</h1><h2 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h2><ul><li><p>unity桌面环境（Ubuntu默认）</p><p>  <img src="/images/Ubuntu%E9%BB%98%E8%AE%A4%E6%A1%8C%E9%9D%A2.png" alt="Ubuntu默认桌面"></p></li><li><p>设置软件更新源</p><ul><li>选择最快的更新源，系统会自动从这些网站下载所需软件。</li></ul></li><li><p>安装开放xfce4或KEF桌面</p><ul><li>sudo apt update</li><li>sudo apt-get install xfce4</li><li>sudo apt-get install ubuntu-desktop</li></ul></li></ul><h2 id="字符界面"><a href="#字符界面" class="headerlink" title="字符界面"></a>字符界面</h2><h3 id="什么是字符界面"><a href="#什么是字符界面" class="headerlink" title="什么是字符界面"></a>什么是字符界面</h3><ol><li><p>字符界面是一种操作系统的输入和输出界面</p></li><li><p>命令行占用系统资源少、性能稳定且安全</p></li></ol><h3 id="进入字符界面"><a href="#进入字符界面" class="headerlink" title="进入字符界面"></a>进入字符界面</h3><p>打开一个终端窗口</p><blockquote><p>mac快捷键：control + option + t</p><p>win快捷键：control + alt + t</p></blockquote><p>首先看到shell提示符，一般包括用户登录名、机器名、当前所在的工作目录和提示符号</p><p><img src="/images/ubuntu%E7%BB%88%E7%AB%AF.png" alt="ubuntu终端"></p><p>以普通用户登录xiao登录名为xiao-virtual-machine的主机，当前工作目录是~,表示&#x2F;home&#x2F;xiao，提示符号为$</p><p><strong>使用命令su由普通用户转为超级用户</strong></p><p><img src="/images/%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7.jpg" alt="超级用户"></p><h2 id="常用命令和功能"><a href="#常用命令和功能" class="headerlink" title="常用命令和功能"></a>常用命令和功能</h2><ol><li><p>date显示日期和时间</p></li><li><p>who查看登录系统用户</p></li><li><p>whoami查看当前登录用户的信息</p></li><li><p>Tab命令补齐（快捷操作）：当输入命令可以唯一确定目录中唯一文件时，Tab键可以快速补齐命令。</p></li><li><p>alia别名</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">临时别名（通用），关机后不再起作用</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">alias</span> <span class="hljs-built_in">ls</span>=<span class="hljs-string">&#x27;dir&#x27;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">永久别名，一直起作用</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入工作目录/home/xiao，nano编辑.bashrc文件，在文件中加入要定义的别名</span><br></code></pre></td></tr></table></figure></li><li><p>history显示历史命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">没有参数时显示整个历史列表内容</span><br>history<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用n作为参数的作用是仅最后n个历史命令会被列出</span><br>history 5<br></code></pre></td></tr></table></figure></li><li><p>PS1、PS2更改提示符</p><ul><li>第一级提示符默认$</li><li>第二级提示符默认&gt;</li></ul><p> 用户也可以使用一些事先已经定义好的特殊字符</p><table><thead><tr><th align="center">特殊字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\ !</td><td align="center">显示该命令的历史编号</td></tr><tr><td align="center">\ #</td><td align="center">显示Shell激活后，当前命令的历史编号</td></tr><tr><td align="center">\ $</td><td align="center">显示一个$，如果用户是root，显示#</td></tr><tr><td align="center">\ \</td><td align="center">显示一个反斜杠</td></tr><tr><td align="center">\ d</td><td align="center">显示当前日期</td></tr><tr><td align="center">\ h</td><td align="center">显示运行该shell的计算机主机名</td></tr><tr><td align="center">\ n</td><td align="center">打印一个跨行符</td></tr><tr><td align="center">\ s</td><td align="center">显示正在运行的shell的名称</td></tr><tr><td align="center">\ t</td><td align="center">显示当前时间</td></tr><tr><td align="center">\ u</td><td align="center">显示当前用户的用户名</td></tr><tr><td align="center">\ W</td><td align="center">显示当前工作目录基准名（只显示最后一个目录）</td></tr><tr><td align="center">\ w</td><td align="center">显示当前工作目录（显示全部目录）</td></tr></tbody></table><p> <strong>例：把当前提示符更改为%，再使用特殊字符更改回原提示符</strong></p><p> <img src="/images/Ubuntu%E4%BE%8B1.png" alt="Ubuntu例1"></p></li></ol><h2 id="字符界面安装软件"><a href="#字符界面安装软件" class="headerlink" title="字符界面安装软件"></a>字符界面安装软件</h2><h3 id="APT管理软件"><a href="#APT管理软件" class="headerlink" title="APT管理软件"></a>APT管理软件</h3><p>  APT是Advance Packaging Tool的缩写，即高级包管理工具，<strong>使用时需要确保连接网络</strong>。</p><ol><li><p>软件更新升级</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo apt-get upgrade</span><br></code></pre></td></tr></table></figure></li><li><p>软件安装</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo apt-get install 软件包名</span><br></code></pre></td></tr></table></figure></li><li><p>软件移除</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo apt-get remove 软件包名</span><br></code></pre></td></tr></table></figure></li><li><p>搜索软件包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo apt-cache search 软件包名</span><br></code></pre></td></tr></table></figure></li><li><p>显示该软件包的依赖</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo apt-cache depends 软件包名</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="dpkg命令"><a href="#dpkg命令" class="headerlink" title="dpkg命令"></a>dpkg命令</h3><p>dpkg是用来安装.deb文件，但不会解决模块间的依赖关系，且不会关心Ubuntu的软件仓库内的软件，可以用于安装<strong>本地</strong>的deb文件,<strong>不需要连接网络</strong>。</p><ol><li><p>安装deb包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo dpkg -i deb 包名</span><br></code></pre></td></tr></table></figure></li><li><p>列出系统所有安装的软件包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo dpkg -l</span><br></code></pre></td></tr></table></figure></li><li><p>列出软件包详细的状态信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo dpkg -S 包名</span><br></code></pre></td></tr></table></figure></li><li><p>列出属于软件包的文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo dpkg -L 包名</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="字符界面下的关机重启"><a href="#字符界面下的关机重启" class="headerlink" title="字符界面下的关机重启"></a>字符界面下的关机重启</h2><h3 id="Ubuntu的运行级别"><a href="#Ubuntu的运行级别" class="headerlink" title="Ubuntu的运行级别"></a>Ubuntu的运行级别</h3><ol><li><p>查看命令：<em>runlevel</em></p></li><li><p>运行级别含义0:关机，1:单用户模式（用于维护系统），2-5:图形界面的多用户模式（等价的），6:重新启动。</p></li><li><p>修改Ubuntu系统的运行级别：修改&#x2F;etc&#x2F; init&#x2F; rc-sysinit.conf文件中的env_DEFAULT_RUNLEVEL的值。</p></li></ol><h3 id="从图形界面进入命令行界面"><a href="#从图形界面进入命令行界面" class="headerlink" title="从图形界面进入命令行界面"></a>从图形界面进入命令行界面</h3><p>开机直接进入命令行模式：</p><ul><li>打开文件：sudo gedit &#x2F;etc&#x2F; default&#x2F;grub</li><li>将GRUB_CMDLINE_DEFAULT一行中的quiet splash（图形），修改为quiet splash text（命令行），保存退出。</li><li>重新生成GRUB的启动菜单配置文件sudo update-grub</li><li>重启系统，进入命令方式 sudo reboot</li></ul><h3 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">shutdown安全关机命令</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo shutdown -H <span class="hljs-comment">#默认70s后关机，等价于halt</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo shutdown -h <span class="hljs-comment">#默认70s后关机，等价于halt或者poweroff</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo shutdown -h 16:00 <span class="hljs-comment">#指定时间关机</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo shutdown -h +10 I am down <span class="hljs-comment">#十分钟后有提示的关机</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo shutdown -t 10 <span class="hljs-comment">#10分钟后关机，默认一分钟</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo shutdown -r now <span class="hljs-comment">#立即重新启动</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo shutdown -h now <span class="hljs-comment">#立即关机</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo shutdown -c <span class="hljs-comment">#取消正在执行的关机</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">halt立即关机命令（不建议使用）</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo halt -n <span class="hljs-comment">#关机前不执行同步操作</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo halt -f <span class="hljs-comment">#强制直接关机</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo halt -p <span class="hljs-comment">#关机时调用poweroff的动作</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">poweroff关闭系统后关闭电源的操作</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo poweroff -halt <span class="hljs-comment">#停止机器</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo poweroff -reboot <span class="hljs-comment">#重启机器</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo poweroff -p <span class="hljs-comment">#关闭电源</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sudo poweroff -f <span class="hljs-comment">#直接关机</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">init</span><br>init 0 #关机<br>init 6 #重启<br></code></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><p>判断题</p><p> <strong>（1）</strong>Ubuntu在2010年5月推出Unity桌面环境。(对)</p><p> <strong>（2）</strong>Chromium浏览器图标下的LibreOffice Writer图标相当于Office中的Excel。（错）LibreOffice是与其他主要办公室软件相容的自由软件，可在Windows、Linux、Macintosh平台上运行。<br> 其中，LibreOffice Writer相当于Office中的Word；LibreOffice Calc相当于Office中的Excel；LibreOffice Impress相当于Office中的PPT。</p><p> <strong>（3）</strong>Ubuntu系统的工具软件在安装前需要先更新，提供更新软件的网站就是更新源。(对)</p><p> <strong>（4）</strong>GNOME（GNU Network Object Model Environment）是GNU计划的一部分。（对）</p><p> <strong>（5）</strong>在Ubuntu Linux 16.04的桌面中有一个默认浏览器，即Firefox。（对）</p><p> <strong>（6）</strong>超级用户的提示符是$，普通用户的提示符是#（错） 超级用户的用户名为#</p><p> <strong>（7）</strong>init 0 可以重新启动机器。（错）init 0为关机。</p><p> <strong>（8）</strong>init 6 可以关闭机器。（错）init 6为重启。</p><p> <strong>（9）</strong>init 1 可以重新启动机器。（错）init 1为单用户模式，只root用户进行维护。</p><p> <strong>（10）</strong>Putty不支持IPv6连接，只支持IPv4连接。（错）</p></li><li><p>简答题</p><p> <strong>（1）</strong>请简述字符界面的优点。<br> 占用系统资源少、性能稳定且安全。</p><p> <strong>（2）</strong>简述shutdown、halt、reboot、init命令的相同点与不同点。<br> 相同点：都可以达到关机或重启系统的目的。</p><p> 不同点：命令内部的工作过程不同。</p><p> shutdown安全的关机命令：系统管理员会通知所有登录的用户系统将要关闭且login指令会被冻结，即新的用户不能再登录。根据使用的参数不同，可以直接关机或延迟一定时间的关机或重启。</p><p> halt立即关机命令：即调用shutdown -h命令。执行halt命令时，将杀死应用进程，执行sync（同步内存和磁盘的数据）系统调用，文件系统写操作完成后就会停止内核。</p><p> reboot重新启动机器命令：工作过程和halt一样，不过，reboot是重启，halt是关机。</p><p> poweroff关闭系统后关闭电源命令：关闭计算机OS且关闭系统电源。poweroff就是指向halt命令的软连接。</p><p> init:是一个由内核启动的用户级进程，内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，通过启动一个用户级程序init的方式完成引导进程。init定义了7个运行级别，init 0为停机或关机；init 1为单用户模式，只root用户进行维护；<br> init 2为多用户模式，不能使用NFS(Net File System)；init 3为完全多用户模式（标准的运行级别）；init 4为安全模式；init 5为图形化（即图形界面）；init 6为重启。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu系统介绍</title>
    <link href="/2023/10/08/%E5%AD%A6%E4%B9%A0%E6%B4%BE/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Ubuntu%20Linux%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/10/08/%E5%AD%A6%E4%B9%A0%E6%B4%BE/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Ubuntu%20Linux%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-Linux系统介绍"><a href="#Ubuntu-Linux系统介绍" class="headerlink" title="Ubuntu Linux系统介绍"></a>Ubuntu Linux系统介绍</h1><h2 id="什么是虚拟机"><a href="#什么是虚拟机" class="headerlink" title="什么是虚拟机"></a>什么是虚拟机</h2><p>指可以像真实机器一样可以运行程序的计算机软件，通过软件模拟具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p><h2 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux"></a>什么是Linux</h2><ul><li>Linux是一套免费使用和自由传播的类UNIX操作系统。</li><li>Linux是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。</li><li>LInux能运行主要的UNIX工具软件、应用程序和网络协议，支持32位和64位硬件。</li><li>LInux是一个性能稳定的多用户网络操作系统。</li><li>Linux本身只表示内核，但现实际用于形容基于内核且使用GNU各种工具和数据库的OS。</li></ul><h2 id="Linux产生过程"><a href="#Linux产生过程" class="headerlink" title="Linux产生过程"></a>Linux产生过程</h2><ul><li><p>1984年，GNU计划和自由软件基金会开发一个称为GNU的类UNIX系统，是自由软件的完整OS。</p></li><li><p>20世纪90年代初，GNU项目开发出的许多高质量的免费软件为LinuxOS的开发创造合适的环境。</p></li><li><p>1987年，MinixOS被开发且学习之风在各大学盛行。</p></li><li><p>1991年初，Linux系统创始者不满足于Minix的现有性能，打算开发一个新的免费OS</p></li><li><p>1991年4月，Linux系统创始者成功将Bash移植到Minix中。</p></li><li><p><strong>1991年10月5日，Linux内核系统正式诞生。</strong></p></li></ul><h2 id="Linux的特点"><a href="#Linux的特点" class="headerlink" title="Linux的特点"></a>Linux的特点</h2><ul><li><p>完全免费</p></li><li><p>多用户、多线程</p><ul><li>各个用户对自己文件设备有特殊权利</li><li>多个程序可以同时独立运行</li></ul></li><li><p>良好的界面</p><ul><li>字符界面+图形化界面</li></ul></li><li><p>支持多种平台</p><ul><li>多处理器平台运行x86、680x0、Sparc</li></ul></li><li><p>安全性和可靠性好</p></li><li><p>具有优秀的开发工具</p></li><li><p>有很好的网络支持和文件系统支持</p></li></ul><h2 id="Linux的组成"><a href="#Linux的组成" class="headerlink" title="Linux的组成"></a>Linux的组成</h2><ul><li><p>内核：是运行程序和管理磁盘和打印机的核心程序，分为存储管理、CPU和进程管理、文件系统、设备管理和驱动、网络通信、系统的初始化和系统调用等部分。</p></li><li><p>Shell：系统的用户界面，提供了用户和内核进行交互操作的一种接口，是一个命令解释器。</p><ul><li>Bourne Shell</li><li>BASH（Linux默认）</li><li>Korn Shell</li><li>C Shell</li></ul></li><li><p>文件系统：文件存放在磁盘等存储设备上的组织方法。</p></li><li><p>应用程序：指一套的称为应用程序的程序集，如文本编辑器、编程语言、数据库等。</p></li></ul><h2 id="Linux内核版本"><a href="#Linux内核版本" class="headerlink" title="Linux内核版本"></a>Linux内核版本</h2><p>内核是系统的心脏，提供了一个在裸设备与应用程序之间的抽象层。</p><p>版本号命名方式：“主版本号.次版本号.修正号”，例如2.6.22</p><p>其中，次版本号为偶数是稳定版，为奇数是测试版。</p><h2 id="Linux的发型版本"><a href="#Linux的发型版本" class="headerlink" title="Linux的发型版本"></a>Linux的发型版本</h2><p>将内核、源代码和应用程序组织构成一个稳定的操作系统。</p><ul><li>Ubuntu：以Debian GNU&#x2F;Linux不稳定分支为开发基础，首个版本于2004年10月20日发布。每6个月发布一个新版。</li><li>Red Hat Linux：Red Hat是最成功的Linux发行版本之一。安装和使用简单。</li><li>Debian Linux：迄今为止最遵循GNU规范的Linux系统。使用特有的软件包管理工具dpkg，使得安装，升级，删除和管理软件变得简单。是完全由网络上的Linux爱好者负责维护的发行套件。</li><li>红旗Linux</li><li>Mandriva Linux</li><li>Suse Linux</li></ul><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ol><li><p>判断题</p><ul><li>Linux操作系统诞生于1991年8月。（错，诞生于10月）</li><li>Linux是一个开放源的操作系统。（对）</li><li>Linux是一个类Unix操作系统。（对）</li><li>Linux是一个多用户系统，也是一个多任务操作系统。（对）</li><li>Ubuntu每一年发布一个新版本。（错，每六个月）</li><li>Ubuntukylin-16.04包含Office套件。（对）</li><li>Ubuntukylin-16.04默认的桌面环境是GNOME。（错）<ul><li>Ubuntu发行版从11.04版起，放弃了GNOME桌面环境，改为Unity并每6个月会发布一个新版本。</li></ul></li></ul></li><li><p>简答题</p><p> Ubuntu Linux 的特点是什么？</p><ol><li>所有系统相关的任务均需使用sudo指令</li><li>系统易用，标准安装完成后（或Live CD启动完成后）就可立即投入使用</li><li>为Unity7新增一套用户桌面，增加了生动的应用图标、主题的登录及锁屏页面。</li><li>与Debian使用相同的deb软件包格式，可安装通用和兼容的绝大多数为Debian编译的软件包。</li><li>优化升级Dash，用户操作更便利。</li><li>新增微信网页版应用。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>折腾派的由来</title>
    <link href="/2022/06/03/%E6%8A%98%E8%85%BE%E6%B4%BE/%E6%8A%98%E8%85%BE%E6%B4%BE%E7%9A%84%E6%9D%A5%E7%94%B1/"/>
    <url>/2022/06/03/%E6%8A%98%E8%85%BE%E6%B4%BE/%E6%8A%98%E8%85%BE%E6%B4%BE%E7%9A%84%E6%9D%A5%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么会有“折腾派”"><a href="#为什么会有“折腾派”" class="headerlink" title="为什么会有“折腾派”"></a>为什么会有“折腾派”</h2><p>众所周知，我是一个爱折腾的人，这在我的简介里也是有写的，相信大家来看这篇文章时，也都是抱着简介里“爱折腾”来的。</p><p>为什么我会做一个“折腾派”，我之所以做这个，是想把自己折腾出的东西分享给大家，让大家在做跟我类似的东西时，能少走一些不必要的弯路，节约时间，提高效率。</p><p>“爱折腾”有好也有坏，好处是你能探索出来很多新东西，得到自己意想不到的结果，也让自己很有成就感。坏处是，在折腾的同时也会浪费很多时间。</p><p>举个例子吧，其实这个博客就是我“爱折腾”捣鼓出来的，原本我完全可以在csdn、qq动态、微信朋友圈里分享自己的东西，但是我想拥有属于自己的一个平台，于是我开始折腾自己的博客搭建，我是一个懵懵懂懂的大一计算机新手，以前也是没有接触过编程，更不用说是前端的操作，但是我凭着爱折腾的劲，把我的博客搭建起来，并且不断让自己的网站美化，这是一个浪费时间的过程，但做出来也是一个很有成就感的结果，并且对自己以后的学习生活有一定的促进作用。</p><p>做自己的“折腾派”，记录自己，提升自己，帮助他人，是一个很好的过程！</p>]]></content>
    
    
    <categories>
      
      <category>折腾派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爱折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再见五月 你好六月</title>
    <link href="/2022/06/03/%E7%94%9F%E6%B4%BB%E6%B4%BE/%E5%86%8D%E8%A7%81%E4%BA%94%E6%9C%88%EF%BC%8C%E4%BD%A0%E5%A5%BD%E5%85%AD%E6%9C%88/"/>
    <url>/2022/06/03/%E7%94%9F%E6%B4%BB%E6%B4%BE/%E5%86%8D%E8%A7%81%E4%BA%94%E6%9C%88%EF%BC%8C%E4%BD%A0%E5%A5%BD%E5%85%AD%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天是端午节，先祝大家端午安康、幸福吉祥。</p><p>端午节，学校给放了三天假，封校大学生的放假当然也只能是一觉自然醒，所以我理所当然的饭点才起床，待我去食堂时，粽子早被一抢而空，于是我只能吃下面的平常菜了。</p><p><img src="/images/%E5%8D%88%E9%A5%AD.jpg" alt="午饭"></p><p>一个人在节假日时吃午饭，“每逢佳节倍思亲”的感觉越发浓烈，从开学到现在就没几次出过校，也与父母错过好几次见面机会，心里一直祈祷可以出校玩玩，可以回家看看。吃着吃着，突然猛的想起我的博客来，我已经快一个月没有上我的小破站，想想当时费好大劲才建起了，我现在居然把它给忘了，不禁暗暗自责起来。想想现在刚好六月初，又是端午节，五月除了期末考试复习生产了一篇文章，就再也没有过了，那我今天索性就写一篇记录生活的随笔吧，正好映合我建站时的初衷。吃饭之际，我正好回想了自己五月干了些什么，在六月之际又准备干什么。</p><p>夜晚我背上背包，走进图书馆坐定，细品<del>统一</del>绿茶，带上耳机，开始自己的随笔，伴随着仲夏的燥热，由此有了以下内容。</p><p><img src="/images/%E5%9B%BE%E4%B9%A6%E9%A6%86.jpg" alt="图书馆"></p><h2 id="再见五月"><a href="#再见五月" class="headerlink" title="再见五月"></a>再见五月</h2><p>五月之所以没有整理小破站，没有生产什么文章，当然也是有原因的。五月，我准备了四场考试，分别是体育考试、python期末考试、语文考试和人工智能考试。</p><p>体育考试还算完美，我的体育选课是乒乓球，我很爱乒乓球这项运动，从小学至今一直在打乒乓球，至今还记得我的第一块729乒乓球拍在哪儿买的、花多少钱买的，并保留至今，虽很少再将它拿出来驰骋疆场，但是我想一直保留它作为纪念。乒乓球考试是最简单的推挡，一分钟60个满分，有两次考试机会，我和我的搭档（感谢Xu Wu）发挥良好，第一场互推55个，老师给了90分<del>我认为应该给95</del>,第二次机会由于我们过于追求速度，中途断球了，也失去了节奏，就没再继续打下去，90分也算不错吧。说到乒乓球，不得不提2021奥运会马龙和奥恰的精彩比赛，奥恰作为德国的实力干将，却一次也没有赢过马龙，这一场比赛实在是精彩，最后双双打到局点，最后一球定胜负，战况焦灼，最后危急关头，马龙成功打败奥恰，顺利晋级决赛，创造11连胜奥恰，奥恰打完球拍从手中滑落，瘫倒在地，而马龙也呼出内心的呐喊，振臂高呼：“他赢不了我”，由衷佩服马龙这位老将，不论实力还是心态，都是强大的六边形战士，希望自己也能一直有“他赢不了我”的心态，在困难面前不低头，披荆斩棘，勇往直前。</p><p>python期末考试算是这四场我最紧张的考试吧，毕竟自己也是很喜欢python，花了很多时间在python上，不过最后还是考的不是很满意吧，总是有些细节自己没有学习到或者记住，其中有道编程题有问题也很是影响我的心情，不过考试终究也是一场测验罢了，找到自己的薄弱环节，再多多学习就好。</p><p>语文考试除了作文也算没什么比较折磨人的了，最后作文让以“平衡”写一篇文章，想到我上次写作文还是在高考，这个题目属实有点儿难为到我了，我在人与人、物与物、人与物到万物之间的平衡大做文章，把平衡当作一种美，也算是把字数填满了，结果如何，且看造化了吧。</p><p>人工智能导论是一门科普性质的课，考试是开卷模式，也只怪老师把“开卷”通知的晚了点，自己也复习一段时间了，不过不出所料，题目果然是很难搜到的东西，也算是有点搞人心态吧。总的来说，既然四门都已考完，再多想成绩也没什么意义了吧，接下来要做的是做好后面的考试。</p><p>五月对于我来说最重要的也不是复习这四门科目吧，这个五月对于我来说应该有着特殊意义，我参加了含金量巨高的第八届全国大学生互联网+创新创业大赛，是一个大学A类赛事，我保证试一试水的心态参加的，就想在大一试一下为大二做好准备，不过开始是这么想的，做着做着心里就有了一些变化，我想我这么用心的带团队一起做项目，好歹也得拿个奖吧。现在回想确实挺累的，从一开始拉人组建团队（感谢指导老师：Yong Yao和我一起并肩作战的好队友：Wenxuan Xu，Danni Wei，Yifei Du，Jie Ding，Tongyao Zhou），对要做什么项目无头无绪，到后来杀出一条血路，决定打造一款web app——HeartShine，到最后提交了一份一万多字的项目计划书，熬了很多夜，付出了很多时间。因为五月底要交项目，我们五月中旬才定下要做什么项目，做项目计划书的时间非常紧。项目计划书一共八章，最后几天是一直写到晚上一点，我们写好了给指导老师订正。指导老师也是以身作则，给我们订正了很多次，给了很多建议，陪我们一起熬到一点多，给我们改计划书，内心也是有要坚持下去的动力，同时感谢我的好朋友Yinglong Cheng和Zhengxiong Wu，为我提供了很多竞赛的相关材料，没有你们我最后也写不出这份计划书。</p><p><img src="/images/%E9%A1%B9%E7%9B%AElogo.jpg" alt="项目logo"></p><p>除了竞赛的个人荣誉，就是班级荣誉了——活力团支部，非常不巧的时，夹杂着考试和竞赛的五月，又迎来了活力团支部的评选，最重要的是我的团队两位女生要去策划节目，只剩下我们三个大男人主攻计划书，还要去排练节目，当时也很是崩溃，当班级第一次晋级后，我打心里是不想再继续第二场表演了，但是作为一班之长，不带头冲锋，以身作则，也实在是不合情理，说到数据二班，我不得不自豪一波，数据二班在院里是真的c，几乎稳在红黑榜的红榜榜首，力战院里15个班，大家也是非常的团结，一起为班里做贡献，不论是学习，还是纪律，永远都会是院里最优秀的班级！当然，活力团支部的结果，那必然是功夫不负有心人，我们再一次成功晋级，打入校赛，那也意味着六月我们要再次排练节目，为了班级荣誉，冲冲冲吧！</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E4%BA%8C%E7%8F%AD%E5%90%88%E7%85%A7.jpg" alt="数据二班合照"></p><p>总的来说，五月是很充实的一个月，我觉得自己过的非常有意义，重要的是又学到了很多东西，又锻炼了自己的毅力。</p><h2 id="你好六月"><a href="#你好六月" class="headerlink" title="你好六月"></a>你好六月</h2><p>六月又是新的一个月，从六一儿童节，让室友把别人摊位的照明灯当礼物给我买回来，我觉得我已经要快乐一个月，尽管室友一直吐槽我好<del>恶心</del>,不过我也确实很需要她那个台灯emm，对不住摆摊的两位小姐姐了吧哈哈哈。</p><p>六月我有很多展望，新的一个月，我也很想继续去做一些竞赛，不断提升自己的能力，当然，六月的到来也意味着考试周即将到来，六月里所有科目都将考完，我也将开始新一轮的考试复习，所以六月我可能也不会继续更新新文章。</p><p>六月中下旬也将是互联网+竞赛校赛的选拔，若我们成功晋级校赛金银铜的选拔，我们还将继续准备项目路演答辩。六月也会迎来活力团支部校赛评定，在此希望数据二班再获佳绩吧！</p><p>听闻六月七号是高三学生面对的高考，在端午佳节一并祝福高三学子才华出“粽”、一举高“粽”！</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>执笔至此，图书馆也将闭馆，想想也罢，今天就写到这儿吧，本人也没有什么很高的文学素养，文章没有那些华丽的辞藻，读起来也是枯燥无味，但也是作者心里想说的一些东西吧，过去的时间再回首，未来的生活再展望，活在当下，及时行乐，继续好好努力吧！</p><p><img src="/images/%E5%A4%9C%E6%99%9A.jpg" alt="夜晚"></p>]]></content>
    
    
    <categories>
      
      <category>生活派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>致青春</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2022/06/03/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/06/03/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="python面向对象"><a href="#python面向对象" class="headerlink" title="python面向对象"></a>python面向对象</h3><p>Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。</p><h3 id="面向对象技术简介"><a href="#面向对象技术简介" class="headerlink" title="面向对象技术简介"></a>面向对象技术简介</h3><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖，也称为方法的重写。</li><li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassName</span>:<br>   <span class="hljs-string">&#x27;类的帮助信息&#x27;</span>   <span class="hljs-comment">#类文档字符串</span><br>    class_suite  <span class="hljs-comment">#类体</span><br><span class="hljs-comment">#class_suite 由类成员，方法，数据属性组成。</span><br></code></pre></td></tr></table></figure><p>简单实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>   <span class="hljs-string">&#x27;所有员工的基类&#x27;</span><br>   empCount = <span class="hljs-number">0</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += <span class="hljs-number">1</span><br>   <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayCount</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount)<br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayEmployee</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name : &quot;</span>, self.name,  <span class="hljs-string">&quot;, Salary: &quot;</span>, self.salary)<br></code></pre></td></tr></table></figure><ul><li>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。</li><li>第一种方法__init__方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</li><li>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</li><li>self 代表的是类的实例，代表当前对象的地址，而 <strong>self.<strong>class</strong></strong> 则指向类。</li><li>类必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。self 不是 python 关键字，我们把他换成其他也是可以正常执行的</li></ul><h3 id="创建实例对象和访问类的属性"><a href="#创建实例对象和访问类的属性" class="headerlink" title="创建实例对象和访问类的属性"></a>创建实例对象和访问类的属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>   <span class="hljs-string">&#x27;所有员工的基类&#x27;</span><br>   empCount = <span class="hljs-number">0</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += <span class="hljs-number">1</span><br>   <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayCount</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount)<br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayEmployee</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span>(Name : <span class="hljs-string">&quot;, self.name,  &quot;</span>, Salary: <span class="hljs-string">&quot;, self.salary)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">#创建 Employee 类的第一个对象</span><br><span class="hljs-string">emp1 = Employee(&quot;</span>Zara<span class="hljs-string">&quot;, 2000)</span><br><span class="hljs-string">#创建 Employee 类的第二个对象</span><br><span class="hljs-string">emp2 = Employee(&quot;</span>Manni<span class="hljs-string">&quot;, 5000)</span><br><span class="hljs-string">#访问类的属性</span><br><span class="hljs-string">emp1.displayEmployee()</span><br><span class="hljs-string">emp2.displayEmployee()</span><br><span class="hljs-string">print(&quot;</span>Total Employee %d<span class="hljs-string">&quot; % Employee.empCount)</span><br><span class="hljs-string"></span><br><span class="hljs-string">#可以修改类的属性</span><br><span class="hljs-string">emp1.age = 7  # 添加一个 &#x27;age&#x27; 属性</span><br><span class="hljs-string">emp1.age = 8  # 修改 &#x27;age&#x27; 属性</span><br><span class="hljs-string">del emp1.age  # 删除 &#x27;age&#x27; 属性</span><br></code></pre></td></tr></table></figure><h3 id="python内置属性"><a href="#python内置属性" class="headerlink" title="python内置属性"></a>python内置属性</h3><ul><li><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成） </li><li><strong>doc</strong> :类的文档字符串 </li><li><strong>name</strong>: 类名 </li><li><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod） </li><li><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li></ul><h3 id="对象销毁"><a href="#对象销毁" class="headerlink" title="对象销毁"></a>对象销毁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"> self, x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span></span>):<br>      self.x = x<br>      self.y = y<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>      class_name = self.__class__.__name__<br>      <span class="hljs-built_in">print</span> class_name, <span class="hljs-string">&quot;销毁&quot;</span><br> <br>pt1 = Point()<br>pt2 = pt1<br>pt3 = pt1<br><span class="hljs-built_in">print</span>（<span class="hljs-built_in">id</span>(pt1), <span class="hljs-built_in">id</span>(pt2), <span class="hljs-built_in">id</span>(pt3)）<span class="hljs-comment"># 打印对象的id</span><br><span class="hljs-comment">#销毁对象</span><br><span class="hljs-keyword">del</span> pt1<br><span class="hljs-keyword">del</span> pt2<br><span class="hljs-keyword">del</span> pt3<br></code></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><ul><li>当我们创建一个新类时，我们可以重用一个现有的类并继承一个现有类的所有功能，然后添加一点来创建我们的新类</li><li>另一种形式的存储和重用</li><li>一次写入可在后面多次修改和重用</li><li>新类（子类）具有旧类（父类）的所有功能，还可以添加更多自己的功能</li><li>“子类”是类的更专业的版本，它从父类继承属性和行为，并可以引入自己的属性和行为</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>:        <span class="hljs-comment"># 定义父类</span><br>   parentAttr = <span class="hljs-number">100</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;调用父类构造函数&quot;</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">parentMethod</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;调用父类方法&#x27;</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setAttr</span>(<span class="hljs-params">self, attr</span>):<br>      Parent.parentAttr = attr<br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getAttr</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;父类属性 :&quot;</span>, Parent.parentAttr<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>(<span class="hljs-title class_ inherited__">Parent</span>): <span class="hljs-comment"># 定义子类</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;调用子类构造方法&quot;</span><br> <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">childMethod</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;调用子类方法&#x27;</span><br> <br>c = Child()          <span class="hljs-comment"># 实例化子类</span><br>c.childMethod()      <span class="hljs-comment"># 调用子类的方法</span><br>c.parentMethod()     <span class="hljs-comment"># 调用父类方法</span><br>c.setAttr(<span class="hljs-number">200</span>)       <span class="hljs-comment"># 再次调用父类的方法 - 设置属性值</span><br>c.getAttr()          <span class="hljs-comment"># 再次调用父类的方法 - 获取属性值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python期末练习</title>
    <link href="/2022/05/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/python%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/05/15/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/python%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="应用continue，累加1–100之间能被3整除的整数"><a href="#应用continue，累加1–100之间能被3整除的整数" class="headerlink" title="应用continue，累加1–100之间能被3整除的整数"></a>应用continue，累加1–100之间能被3整除的整数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#应用continue，累加1--100之间能被3整除的整数</span><br><span class="hljs-comment">#1.设置一个和值变量</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-comment">#2.使用for循环遍历出1-100之间的数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>):<br><span class="hljs-comment">#3.不满足被3整除的条件就跳过，循环继续执行</span><br><span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-built_in">sum</span> += i<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h3 id="输入三位数逆序输出"><a href="#输入三位数逆序输出" class="headerlink" title="输入三位数逆序输出"></a>输入三位数逆序输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入三位数逆序输出</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个三位数：&#x27;</span>)<br><span class="hljs-built_in">print</span>(a[::-<span class="hljs-number">1</span>])<br><br></code></pre></td></tr></table></figure><h3 id="1，2，3，4，5，6，7，8八个数字组成多少个不相同且不重复的两位数"><a href="#1，2，3，4，5，6，7，8八个数字组成多少个不相同且不重复的两位数" class="headerlink" title="1，2，3，4，5，6，7，8八个数字组成多少个不相同且不重复的两位数"></a>1，2，3，4，5，6，7，8八个数字组成多少个不相同且不重复的两位数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1，2，3，4，5，6，7，8八个数字组成不相同且不重复的两位数</span><br>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>([i*<span class="hljs-number">10</span> + j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> l <span class="hljs-keyword">if</span> i != j]))<br></code></pre></td></tr></table></figure><h3 id="统计句子中各字符出现频数"><a href="#统计句子中各字符出现频数" class="headerlink" title="统计句子中各字符出现频数"></a>统计句子中各字符出现频数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计句子中各字符出现频数</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个句子：&#x27;</span>)<br>d = &#123;&#125;<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> &#123;i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a&#125;:<br>    d.update(&#123;j:<span class="hljs-number">0</span>&#125;)<br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> m <span class="hljs-keyword">in</span> d.keys():<br>        d[m] += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><h3 id="第一个字符串中删除第二个字符串"><a href="#第一个字符串中删除第二个字符串" class="headerlink" title="第一个字符串中删除第二个字符串"></a>第一个字符串中删除第二个字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一个字符串中删除第二个字符串</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入第一个字符串: &#x27;</span>)<br>b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入第二个字符串: &#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> b:<br>        <span class="hljs-keyword">if</span> j == i:<br>            a = a.replace(j,<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h3 id="规则n边形的点的坐标"><a href="#规则n边形的点的坐标" class="headerlink" title="规则n边形的点的坐标"></a>规则n边形的点的坐标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算规则n边形的点的坐标</span><br><span class="hljs-comment">#列表存储给定的坐标公式</span><br><span class="hljs-comment">#不理解出题意图到底是要干什么。。。</span><br></code></pre></td></tr></table></figure><h3 id="原列表为素数直接加入新列表，否则平方加入新列表"><a href="#原列表为素数直接加入新列表，否则平方加入新列表" class="headerlink" title="原列表为素数直接加入新列表，否则平方加入新列表"></a>原列表为素数直接加入新列表，否则平方加入新列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#原列表为素数直接加入新列表，否则平方加入新列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isprime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;素数返回素数，非素数返回平方&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> n**<span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n//<span class="hljs-number">2</span>+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> n % j == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> n**<span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n<br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(isprime,a)))<br></code></pre></td></tr></table></figure><h3 id="原列表为偶数直接加入新列表，否则三次方加入"><a href="#原列表为偶数直接加入新列表，否则三次方加入" class="headerlink" title="原列表为偶数直接加入新列表，否则三次方加入"></a>原列表为偶数直接加入新列表，否则三次方加入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">iseven</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;偶数返回偶数，奇数三次方加入&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n**<span class="hljs-number">3</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(iseven,a)))<br></code></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#异常处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prompt_integer</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">try</span>:<br>        b = <span class="hljs-built_in">int</span>(a)<br>        <span class="hljs-keyword">return</span> b<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;重新输入&#x27;</span>)<br><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个整数：&#x27;</span>)<br>prompt_integer(a)<br></code></pre></td></tr></table></figure><h3 id="字典练习"><a href="#字典练习" class="headerlink" title="字典练习"></a>字典练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#字典练习</span><br>li = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>,<span class="hljs-number">88</span>,<span class="hljs-number">99</span>,<span class="hljs-number">90</span>]<br>dic = &#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x &lt; <span class="hljs-number">66</span>,li)),<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> y: y &gt; <span class="hljs-number">66</span>,li))&#125;<br><span class="hljs-built_in">print</span>(dic)<br></code></pre></td></tr></table></figure><h3 id="字典套字典"><a href="#字典套字典" class="headerlink" title="字典套字典"></a>字典套字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字典套字典</span><br>cities =  &#123;<span class="hljs-string">&#x27;wuhan&#x27;</span>:&#123;<span class="hljs-string">&#x27;country&#x27;</span>:<span class="hljs-string">&#x27;China&#x27;</span>,<br>                    <span class="hljs-string">&#x27;populations&#x27;</span>:<span class="hljs-number">0</span>,<br>                    <span class="hljs-string">&#x27;fact&#x27;</span>:<span class="hljs-number">0</span>&#125;,<br>           <span class="hljs-string">&#x27;shanghai&#x27;</span>:&#123;<span class="hljs-string">&#x27;country&#x27;</span>:<span class="hljs-string">&#x27;China&#x27;</span>,<br>                        <span class="hljs-string">&#x27;populations&#x27;</span>:<span class="hljs-number">0</span>,<br>                        <span class="hljs-string">&#x27;fact&#x27;</span>:<span class="hljs-number">0</span>&#125;,<br>           <span class="hljs-string">&#x27;guangzhou&#x27;</span>:&#123;<span class="hljs-string">&#x27;country&#x27;</span>:<span class="hljs-string">&#x27;China&#x27;</span>,<br>                         <span class="hljs-string">&#x27;populations&#x27;</span>:<span class="hljs-number">0</span>,<br>                         <span class="hljs-string">&#x27;fact&#x27;</span>:<span class="hljs-number">0</span>&#125;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cities.keys():<br>    <span class="hljs-built_in">print</span>(i,end = <span class="hljs-string">&#x27;:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> m,n <span class="hljs-keyword">in</span> cities[i].items():<br>        <span class="hljs-built_in">print</span>(m,n,end = <span class="hljs-string">&#x27;,&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cal.txt&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-comment">#设计算法...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tkinter控件基本属性</title>
    <link href="/2022/04/19/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/tkinter%E6%8E%A7%E4%BB%B6%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/04/19/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/tkinter%E6%8E%A7%E4%BB%B6%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>下表列出了 Tkinter 中常用的 15 个控件：</p><table><thead><tr><th>控件类型</th><th>控件名称</th><th>控件作用</th></tr></thead><tbody><tr><td>Button</td><td>按钮</td><td>点击按钮时触发&#x2F;执行一些事件（函数）</td></tr><tr><td>Canvas</td><td>画布</td><td>提供绘制图，比如直线、矩形、多边形等</td></tr><tr><td>Checkbutton</td><td>复选框</td><td>多项选择按钮，用于在程序中提供多项选择框</td></tr><tr><td>Entry</td><td>文本框输入框</td><td>用于接收单行文本输入</td></tr><tr><td>Frame</td><td>框架（容器）控件</td><td>定义一个窗体（根窗口也是一个窗体），用于承载其他控件，即作为其他控件的容器</td></tr><tr><td>Lable</td><td>标签控件</td><td>用于显示单行文本或者图片</td></tr><tr><td>LableFrame</td><td>容器控件</td><td>一个简单的容器控件，常用于复杂的窗口布局。</td></tr><tr><td>Listbox</td><td>列表框控件</td><td>以列表的形式显示文本</td></tr><tr><td>Menu</td><td>菜单控件</td><td>菜单组件（下拉菜单和弹出菜单）</td></tr><tr><td>Menubutton</td><td>菜单按钮控件</td><td>用于显示菜单项</td></tr><tr><td>Message</td><td>信息控件</td><td>用于显示多行不可编辑的文本，与 Label控件类似，增加了自动分行的功能</td></tr><tr><td>messageBox</td><td>消息框控件</td><td>定义与用户交互的消息对话框</td></tr><tr><td>OptionMenu</td><td>选项菜单</td><td>下拉菜单</td></tr><tr><td>PanedWindow</td><td>窗口布局管理组件</td><td>为组件提供一个框架，允许用户自己划分窗口空间</td></tr><tr><td>Radiobutton</td><td>单选框</td><td>单项选择按钮，只允许从多个选项中选择一项</td></tr><tr><td>Scale</td><td>进度条控件</td><td>定义一个线性“滑块”用来控制范围，可以设定起始值和结束值，并显示当前位置的精确值</td></tr><tr><td>Spinbox</td><td>高级输入框</td><td>Entry 控件的升级版，可以通过该组件的上、下箭头选择不同的值</td></tr><tr><td>Scrollbar</td><td>滚动条</td><td>默认垂直方向，鼠标拖动改变数值，可以和 Text、Listbox、Canvas等控件配合使用</td></tr><tr><td>Text</td><td>多行文本框</td><td>接收或输出多行文本内容</td></tr><tr><td>Toplevel</td><td>子窗口</td><td>在创建一个独立于主窗口之外的子窗口，位于主窗口的上一层，可作为其他控件的容器</td></tr></tbody></table><p>在后续内容中，我们会陆续对上表中涉及的控件进行介绍。当然，除了上述控件外，还有一些高级控件，比如 PanedWindow、messagebox、LableFrame、Spinbox，在后续章节也会讲解。</p><h2 id="控件基本属性"><a href="#控件基本属性" class="headerlink" title="控件基本属性"></a>控件基本属性</h2><p>从上表来看，每个控件都有着各自不同的功能，即使有些控件功能相似，但它们的适用场景也不同。</p><p>在 Tkinter 中不同的控件受到各自参数的约束（即参数），所有控件既有相同属性，也有各自独有的属性。本节内容，先对这些控件的共用属性做简单介绍，如下表所示：</p><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>anchor</td><td>定义控件或者文字信息在窗口内的位置</td></tr><tr><td>bg</td><td>bg 是 background 的缩写，用来定义控件的背景颜色，参数值可以颜色的十六进制数，或者颜色英文单词</td></tr><tr><td>bitmap</td><td>定义显示在控件内的位图文件</td></tr><tr><td>borderwidth</td><td>定于控件的边框宽度，单位是像素</td></tr><tr><td>command</td><td>该参数用于执行事件函数，比如单击按钮时执行特定的动作，可将执行用户自定义的函数</td></tr><tr><td>cursor</td><td>当鼠标指针移动到控件上时，定义鼠标指针的类型，字符换格式，参数值有 crosshair（十字光标）watch（待加载圆圈）plus（加号）arrow（箭头）等</td></tr><tr><td>font</td><td>若控件支持设置标题文字，就可以使用此属性来定义，它是一个数组格式的参数 (字体,大小，字体样式)</td></tr><tr><td>fg</td><td>fg 是 foreground 的缩写，用来定义控件的前景色，也就是字体的颜色</td></tr><tr><td>height</td><td>该参数值用来设置控件的高度，文本控件以字符的数目为高度（px），其他控件则以像素为单位</td></tr><tr><td>image</td><td>定义显示在控件内的图片文件</td></tr><tr><td>justify</td><td>定义多行文字的排列方式，此属性可以是 LEFT&#x2F;CENTER&#x2F;RIGHT</td></tr><tr><td>padx&#x2F;pady</td><td>定义控件内的文字或者图片与控件边框之间的水平&#x2F;垂直距离</td></tr><tr><td>relief</td><td>定义控件的边框样式，参数值为FLAT（平的）&#x2F;RAISED（凸起的）&#x2F;SUNKEN（凹陷的）&#x2F;GROOVE（沟槽桩边缘）&#x2F;RIDGE（脊状边缘）</td></tr><tr><td>text</td><td>定义控件的标题文字</td></tr><tr><td>state</td><td>控制控件是否处于可用状态，参数值默认为 NORMAL&#x2F;DISABLED，默认为 NORMAL（正常的）</td></tr><tr><td>width</td><td>用于设置控件的宽度，使用方法与 height 相同</td></tr></tbody></table><p>注意：对于上述属性先做大体的了</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2022/04/07/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/"/>
    <url>/2022/04/07/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>数学中的函数</p><ul><li>只是描述变量之间的关系变化</li></ul><p>编程中的函数</p><ul><li>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</li><li>函数能提高应用的模块性，代码的重复利用率，以及提高代码阅读性，降低维护成本；</li><li>当然，编程中的函数也可描述变量之间的计算（一些特定的函数）</li></ul><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>关键字：函数代码块以 def 关键词开头</li><li>函数名：后接函数标识符名称和圆括号()</li><li>参数列表：任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数体：实现特定功能的代码块</li><li>返回值：return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li><li>函数内容以冒号起始，并且缩进。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li></ul><p>定义语法：</p><p>def functionname( parameters ):</p><p>···”函数_文档字符串”</p><p>···function_suite</p><p>···return [expression]</p><p>函数先定义才可以被调用，如同变量先声明后使用。一个函数只可以定义一次，但可以多次调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义函数实现简单的四则运算</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span><br>    a = x + y<br>    <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><p>函数调用语句格式：</p><p>函数名</p><p>实际变量列表（实参列表），如果存在； 如是无参数，直接一对小括号 ()</p><p>如果存在返回值，可通过 赋值语句进行保存与某变量中  a  &#x3D; input()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入第一个整数: &quot;</span>))<br>b = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入第二个整数: &quot;</span>))<br>c = myadd(a, b)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h3 id="assert调试"><a href="#assert调试" class="headerlink" title="assert调试"></a>assert调试</h3><p>ASSERT ()是一个调试程序时经常使用的宏，在程序运行时它计算括号内的表达式，如果表达式为FALSE (0), 程序将报告错误，并终止执行。 如果表达式不为0，则继续执行后面的语句。</p><p>每个assert只检验一个条件,因为同时检验多个条件时,如果断言失败,无法直观的判断是哪个条件失败</p><p>语法格式如下：</p><p>assert expression</p><p>assert expression [, arguments]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> myadd(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>) == <span class="hljs-number">8</span><br><span class="hljs-keyword">assert</span> myadd(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>) == <span class="hljs-number">13</span>,<span class="hljs-string">&#x27;运算错误&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="函数调用时的传参类型"><a href="#函数调用时的传参类型" class="headerlink" title="函数调用时的传参类型"></a>函数调用时的传参类型</h3><p>位置参数：位置参数(必备)须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p><p>关键字参数：显式地指定参数的值：使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p><p>默认参数：可以在函数定义的时候给参数设定默认值。</p><p>不定长参数：可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述几种参数不同，声明时不会命名。使用变量名加 *，可以使函数接受不定数目的参数，其中，加了星号 *的变量名会存放所有未命名的变量参数,相当于元组类型，**表示参数数目不定，相当于一个字典，关键词和值对应于键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span><br>    a = x + y<br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-built_in">print</span>(myadd(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<span class="hljs-comment">#位置参数</span><br><span class="hljs-built_in">print</span>(myadd(x=<span class="hljs-number">2</span>, y=<span class="hljs-number">3</span>))<span class="hljs-comment">#关键字参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quad</span>(<span class="hljs-params">x, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">return</span> a * x ** <span class="hljs-number">2</span> + b * x + c<br>quad(<span class="hljs-number">2.0</span>)<span class="hljs-comment">#默认参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd2</span>(<span class="hljs-params">x, *args</span>):<br>    <span class="hljs-string">&quot;不定长参数实例&quot;</span><br>    total = x<br><br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:<br>        total += arg<br><br>    <span class="hljs-keyword">return</span> total<br><span class="hljs-built_in">print</span>(myadd2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<span class="hljs-comment">#不定长参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">*args, **kwargs</span>):<br>    <span class="hljs-built_in">print</span>(args, kwargs)<br><br>foo(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, x=<span class="hljs-string">&#x27;bar&#x27;</span>, z=<span class="hljs-number">10</span>)<span class="hljs-comment">#不定长参数</span><br><span class="hljs-comment">#输出：(2, 3) &#123;&#x27;x&#x27;: &#x27;bar&#x27;, &#x27;z&#x27;: 10&#125;</span><br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>在数学与计算机科学中，递归(Recursion)是指在函数的定义中使用函数自身的方法。实际上，递归，顾名思义，其包含了两个意思：<code>递</code>和<code>归</code>，这正是递归思想的精华所在。</p><p>递：递归的问题必须可以分解为若干规模较小，与原问题相同的子问题，这些子问题可以用相同的解题思路解决&#96;归： 这些问题的演化过程是一个从小到大、由远及近的过程，并且会有一个明确的终点，一旦到了这个明确的终点后，就需要从原路返回到原点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#经典应用：欧几里得算法</span><br><span class="hljs-comment">#任意两个数 a 和 b，从大数中减去小数，这两个数的 最大公约数GCD 保持不变</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>) :<br>    <span class="hljs-keyword">if</span> a &lt; b :<br>        <span class="hljs-keyword">return</span> gcd(a,b-a)<br>    <span class="hljs-keyword">elif</span> b &lt; a :<br>        <span class="hljs-keyword">return</span> gcd(a-b,b)<br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">return</span> a<br>gcd(<span class="hljs-number">68</span>,<span class="hljs-number">119</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嵌套</title>
    <link href="/2022/03/31/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%AD%97%E5%85%B8/%E5%AD%97%E5%85%B8%EF%BC%8C%E5%88%97%E8%A1%A8%E7%9A%84%E5%B5%8C%E5%A5%97/"/>
    <url>/2022/03/31/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%AD%97%E5%85%B8/%E5%AD%97%E5%85%B8%EF%BC%8C%E5%88%97%E8%A1%A8%E7%9A%84%E5%B5%8C%E5%A5%97/</url>
    
    <content type="html"><![CDATA[<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>在字典中嵌套列表，在列表中嵌套字典，在字典中嵌套字典，在列表中嵌套列表（二维列表）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在字典中存储列表</span><br>a = &#123;<span class="hljs-string">&#x27;电影名&#x27;</span>: [<span class="hljs-string">&#x27;雄狮少年&#x27;</span>, <span class="hljs-string">&#x27;孤味&#x27;</span>, <span class="hljs-string">&#x27;你好，李焕英&#x27;</span>, <span class="hljs-string">&#x27;悬崖之上&#x27;</span>, <span class="hljs-string">&#x27;拆弹专家2&#x27;</span>],<br>        <span class="hljs-string">&#x27;导演&#x27;</span>: [<span class="hljs-string">&#x27;孙海鹏&#x27;</span>, <span class="hljs-string">&#x27;许勇杰&#x27;</span>, <span class="hljs-string">&#x27;贾玲&#x27;</span>, <span class="hljs-string">&#x27;张艺谋&#x27;</span>, <span class="hljs-string">&#x27;邱礼涛&#x27;</span>],<br>        <span class="hljs-string">&#x27;评分&#x27;</span>: [<span class="hljs-string">&#x27;8.3&#x27;</span>, <span class="hljs-string">&#x27;8.0&#x27;</span>, <span class="hljs-string">&#x27;7.7&#x27;</span>, <span class="hljs-string">&#x27;7.6&#x27;</span>, <span class="hljs-string">&#x27;7.5&#x27;</span>],<br>        <span class="hljs-string">&#x27;片长&#x27;</span>: [<span class="hljs-string">&#x27;104&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;128&#x27;</span>, <span class="hljs-string">&#x27;120&#x27;</span>, <span class="hljs-string">&#x27;121&#x27;</span>],<br>        <span class="hljs-string">&#x27;语言&#x27;</span>: [<span class="hljs-string">&#x27;汉化普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>],<br>        <span class="hljs-string">&#x27;上映日期&#x27;</span>: [<span class="hljs-string">&#x27;2021&#x27;</span>, <span class="hljs-string">&#x27;2020&#x27;</span>, <span class="hljs-string">&#x27; 2021&#x27;</span>, <span class="hljs-string">&#x27;2021&#x27;</span>, <span class="hljs-string">&#x27;2020&#x27;</span>]&#125;<br><span class="hljs-comment">#在字典中嵌套字典</span><br>b = &#123;<br>    <span class="hljs-string">&#x27;name1&#x27;</span>:&#123;<br>        <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<br>        <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;zhi&#x27;</span>,<br>        <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;ying&#x27;</span>&#125;,<br><br>     <span class="hljs-string">&#x27;name2&#x27;</span>:&#123;<br>         <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<br>         <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;wen&#x27;</span>,<br>         <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xuan&#x27;</span>&#125;&#125;<br><span class="hljs-comment">#二维列表,矩阵</span><br>c = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>     [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],<br>     [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br>c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>c[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="字典嵌套列表，判断某个值是否在字典中的列表中"><a href="#字典嵌套列表，判断某个值是否在字典中的列表中" class="headerlink" title="字典嵌套列表，判断某个值是否在字典中的列表中"></a>字典嵌套列表，判断某个值是否在字典中的列表中</h3><p>不能直接用in判断是否在字典嵌套的所有列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-string">&#x27;电影名&#x27;</span>: [<span class="hljs-string">&#x27;雄狮少年&#x27;</span>, <span class="hljs-string">&#x27;孤味&#x27;</span>, <span class="hljs-string">&#x27;你好，李焕英&#x27;</span>, <span class="hljs-string">&#x27;悬崖之上&#x27;</span>, <span class="hljs-string">&#x27;拆弹专家2&#x27;</span>],<br>        <span class="hljs-string">&#x27;导演&#x27;</span>: [<span class="hljs-string">&#x27;孙海鹏&#x27;</span>, <span class="hljs-string">&#x27;许勇杰&#x27;</span>, <span class="hljs-string">&#x27;贾玲&#x27;</span>, <span class="hljs-string">&#x27;张艺谋&#x27;</span>, <span class="hljs-string">&#x27;邱礼涛&#x27;</span>],<br>        <span class="hljs-string">&#x27;评分&#x27;</span>: [<span class="hljs-string">&#x27;8.3&#x27;</span>, <span class="hljs-string">&#x27;8.0&#x27;</span>, <span class="hljs-string">&#x27;7.7&#x27;</span>, <span class="hljs-string">&#x27;7.6&#x27;</span>, <span class="hljs-string">&#x27;7.5&#x27;</span>],<br>        <span class="hljs-string">&#x27;片长&#x27;</span>: [<span class="hljs-string">&#x27;104&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;128&#x27;</span>, <span class="hljs-string">&#x27;120&#x27;</span>, <span class="hljs-string">&#x27;121&#x27;</span>],<br>        <span class="hljs-string">&#x27;语言&#x27;</span>: [<span class="hljs-string">&#x27;汉化普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>, <span class="hljs-string">&#x27;汉语普通话&#x27;</span>],<br>        <span class="hljs-string">&#x27;上映日期&#x27;</span>: [<span class="hljs-string">&#x27;2021&#x27;</span>, <span class="hljs-string">&#x27;2020&#x27;</span>, <span class="hljs-string">&#x27; 2021&#x27;</span>, <span class="hljs-string">&#x27;2021&#x27;</span>, <span class="hljs-string">&#x27;2020&#x27;</span>]&#125;<br><span class="hljs-comment"># 错误示例</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;雄狮少年&#x27;</span> <span class="hljs-keyword">in</span> a.keys()：<br><span class="hljs-comment"># 正确示例</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;雄狮少年&#x27;</span> <span class="hljs-keyword">in</span> a[<span class="hljs-string">&#x27;电影名&#x27;</span>]：<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2022/03/29/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88/"/>
    <url>/2022/03/29/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合（set）属于python无序可变序列，使用一对大括号作为定界符，元素之间使用逗号分隔，同一个集合内的每个元素都是唯一的，不允许重复，集合中只能包含数字、字符串、元组等不可变类型的数据，而不能包含列表、字典、集合等可变类型的数据</p><h3 id="集合对象的创建与删除"><a href="#集合对象的创建与删除" class="headerlink" title="集合对象的创建与删除"></a>集合对象的创建与删除</h3><p>1.直接给集合赋值</p><p>2.使用set（）创建，set（）将列表、元组、字符串、range对象等其他可迭代对象转化为集合，如果有重复元素只保留一个</p><p>3.用del删除整个集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#集合对象的创建和删除</span><br>s = &#123;<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br>s = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">del</span> s<br></code></pre></td></tr></table></figure><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><p>1.add（）增加新元素，如果元素已存在，则被忽略</p><p>2.update（）用于合并另外一个集合中的元素到当前集合中，并自动去除重复元素</p><p>3.pop（）用于随机删除一个元素并返回集合中的一个元素</p><p>4.remove（）删除集合中的元素</p><p>5.discard（）用于从集合中删除一个特定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#集合元素增加和删除</span><br>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>a.add(<span class="hljs-number">4</span>)<br>a.update(&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;)<br>a.discard(<span class="hljs-number">1</span>)<br>a.remove(<span class="hljs-number">1</span>)<br>a.pop()<br></code></pre></td></tr></table></figure><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><p>并集｜</p><p>交集&amp;</p><p>差集 -</p><p>对称差集 </p><p>&lt; &gt; &gt;&#x3D; &lt;&#x3D;作用于集合时表示集合之间的包含关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 集合运算</span><br>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>b = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>a &amp; b <span class="hljs-comment">#交集</span><br>a | b <span class="hljs-comment">#并集</span><br>a - b <span class="hljs-comment">#差集</span><br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; &lt; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125; <span class="hljs-comment">#真子集</span><br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; &lt;= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-comment">#子集</span><br></code></pre></td></tr></table></figure><ul><li>集合中的每个元素都是独一无二的,这一特点在某些情况下使用会使问题简单化</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用字典</title>
    <link href="/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%AD%97%E5%85%B8/%E4%BD%BF%E7%94%A8%E5%AD%97%E5%85%B8/"/>
    <url>/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%AD%97%E5%85%B8/%E4%BD%BF%E7%94%A8%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<p>Python 内置了字典(dict)的支持，使用键-值（key-value）存储，具有极快的查找速度。字典是另一种可变容器模型，且可存储任意类型对象。字典的每个键值对(key&#x3D;&gt;value)用冒号(:)分割，每对之间用逗号(,)分割，整个字典包括在花括号({})中 ，语法格式如下： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;key1 : value1, key2 : value2 &#125;<br></code></pre></td></tr></table></figure><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建字典</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br>name = &#123;&#125;<br>name = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure><p><img src="/images/hexo2.jpg"></p><h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#删除键值对</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br><span class="hljs-keyword">del</span> name[<span class="hljs-number">1</span>]<br>name<br></code></pre></td></tr></table></figure><p><img src="/images/hexo3.jpg"></p><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#修改字典中的值</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>&#125;<br>name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;xiong&#x27;</span><br><span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><p><img src="/images/hexo4.jpg"></p><h3 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#删除键值对</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br><span class="hljs-keyword">del</span> name[<span class="hljs-number">1</span>]<br>name<br></code></pre></td></tr></table></figure><p><img src="/images/hexo5.jpg"></p><p>删除的键值会永远消失</p><h3 id="使用get（）来访问值"><a href="#使用get（）来访问值" class="headerlink" title="使用get（）来访问值"></a>使用get（）来访问值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用get（）来访问值</span><br>name = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;xie&#x27;</span>&#125;<br>names = name.get(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>)<br>names<br></code></pre></td></tr></table></figure><p><img src="/images/hexo6.jpg"></p><p>get()的第一个参数用于指定键，是必不可少的，第二个参数为指定的键不存在时要返回的值，是可选的，如果指定的键可能不存在，应该考虑使用方法get(),如果说没有指定第二个参数且指定的键不存在，返回值为None。</p><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><p>for循环; items(); keys(); sorted(); values()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#for循环遍历字典</span><br><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;man&#x27;</span>&#125;<br><br><span class="hljs-comment">#遍历所有键值对 items()</span><br><span class="hljs-comment">#items()返回一个包含键和值的列表</span><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键：&#x27;</span>,k)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;值：&#x27;</span>,v)<br>    <br><span class="hljs-comment">#遍历字典中所有键 key()</span><br><span class="hljs-comment">#keys()其实返回的是一个列表，其中包含字典中的所有键</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键：&#x27;</span>,k)<br>    <br><span class="hljs-comment">#按特定的顺序方式返回键 sorted()</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dict</span>.keys()):<br>    <span class="hljs-built_in">print</span>(k)<br>    <br><span class="hljs-comment">#遍历字典中所有值 values()</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.values():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;值：&#x27;</span>，v)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择结构</title>
    <link href="/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E5%92%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/"/>
    <url>/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E5%92%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="单分支结构：if语句"><a href="#单分支结构：if语句" class="headerlink" title="单分支结构：if语句"></a>单分支结构：if语句</h3><p>Python中if语句的语法格式如下：</p><blockquote><p><font color="blue">if</font>  <font color="orange">&lt;条件&gt;</font>:</p></blockquote><blockquote><blockquote><p>语句块</p></blockquote></blockquote><ul><li>语句块是<font color="blue">if</font>条件满足后执行的一个或多个语句序列</li><li>语句块中语句通过与<font color="blue">if</font>所在行形成缩进表达包含关系</li><li><font color="blue">if</font>语句首先评估<font color="orange">&lt;条件&gt;</font>的结果值，如果结果为<font color="red">True</font>，则执行语句块里的语句序列，然后控制转向程序的下一条语句。如果结果为<font color="lightgreen">False</font>，语句块里的语句会被跳过。</li><li><font color="blue">if</font>语句中语句块执行与否依赖于条件判断。但无论什么情况，控制都会转到<font color="blue">if</font>语句后与该语句同级别的下一条语句</li><li><font color="blue">if</font>语中<font color="orange">&lt;条件&gt;</font>部分可以使用任何能够产生<font color="red">True</font>或<font color="lightgreen">False</font>的语句</li><li>形成判断条件最常见的方式是采用关系操作符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#判断输入的数是不是正数</span><br>x = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hey!&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is positive&quot;</span>)<br>’‘’<br>在这里，如果 x &gt; <span class="hljs-number">0</span> 为 <span class="hljs-literal">False</span> ，那么程序将不会执行两条 <span class="hljs-built_in">print</span> 语句。<br>虽然都是用 <span class="hljs-keyword">if</span> 关键词定义判断，但与C，Java等语言不同，Python不使用 &#123;&#125; 将 <span class="hljs-keyword">if</span> 语句控制的区域包含起来。<br>‘’‘<br></code></pre></td></tr></table></figure><h3 id="二分支结构：if-else语句"><a href="#二分支结构：if-else语句" class="headerlink" title="二分支结构：if-else语句"></a>二分支结构：if-else语句</h3><p>Python中if-else语句用来形成二分支结构，语法格式如下：</p><blockquote><p>if  &lt;条件&gt;:</p></blockquote><blockquote><blockquote><p>  &lt;语句块1&gt;</p></blockquote></blockquote><blockquote><p>else:</p></blockquote><blockquote><blockquote><p>  &lt;语句块2&gt;</p></blockquote></blockquote><ul><li>&lt;语句块1&gt;是在if条件满足后执行的一个或多个语句序列</li><li>&lt;语句块2&gt;是if条件不满足后执行的语句序列</li><li>二分支语句用于区分&lt;条件&gt;的两种可能True或者False，分别形成执行路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">PM = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入PM2.5数值: &quot;</span>))<br><span class="hljs-keyword">if</span> PM &gt;= <span class="hljs-number">75</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空气存在污染，请小心！&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空气没有污染，可以开展户外运动!&quot;</span>)<br></code></pre></td></tr></table></figure><p>二分支结构还有一种更简洁的表达方式，适合通过判断返回特定值，语法格式如下：</p><p>&lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">PM = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入PM2.5数值: &quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空气&#123;&#125;污染!&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;存在&quot;</span> <span class="hljs-keyword">if</span> PM &gt;= <span class="hljs-number">75</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;没有&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="多分支结构：if-elif-else"><a href="#多分支结构：if-elif-else" class="headerlink" title="多分支结构：if-elif-else"></a>多分支结构：if-elif-else</h3><p>Python的if-elif-else描述多分支结构，语句格式如下：</p><blockquote><p>if &lt;条件1&gt;:</p></blockquote><blockquote><blockquote><p>   &lt;语句块1&gt;</p></blockquote></blockquote><blockquote><p>elif &lt;条件2&gt;:</p></blockquote><blockquote><blockquote><p>   &lt;语句块2&gt;</p></blockquote></blockquote><blockquote><p>… </p></blockquote><blockquote><p>else: </p></blockquote><blockquote><blockquote><p>   &lt;语句块N&gt;</p></blockquote></blockquote><ul><li>多分支结构是二分支结构的扩展，这种形式通常用于设置同一个判断条件的多条执行路径。</li><li>Python依次评估寻找第一个结果为True的条件，执行该条件下的语句块，同时结束后跳过整个if-elif-else结构，执行后面的语句。如果没有任何条件成立，else下面的语句块被执行。</li><li>elif 的个数没有限制，可以是1个或者多个，也可以没有。</li><li>else 最多只有1个，也可以没有，即else子句是可选的。</li><li>可以使用 and ， or , not 等关键词结合多个判断条件。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#经典应用：判断某一年份是否为闰年</span><br>year = <span class="hljs-number">1900</span><br><span class="hljs-keyword">if</span> year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a leap year!&quot;</span>)<br><span class="hljs-comment"># 两个条件都满足才执行</span><br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a leap year!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is not a leap year.&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="值的测试"><a href="#值的测试" class="headerlink" title="值的测试"></a>值的测试</h3><p>Python不仅仅可以使用布尔型变量作为条件，它可以直接在if中使用任何表达式作为条件</p><p>大部分表达式的值都会被当作True，但以下表达式值会被当作False：</p><ul><li>False</li><li>None</li><li>0</li><li>空字符串，空列表，空字典，空集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>]<br><span class="hljs-keyword">if</span> mylist:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表不为空&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表为空&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>元组</title>
    <link href="/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%85%83%E7%BB%84/"/>
    <url>/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%85%83%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义元组</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br>name = ()<br>name = (<span class="hljs-number">1</span>,)<br>name = <span class="hljs-built_in">tuple</span>()<br><span class="hljs-comment">#遍历元组中的所有值</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment">#修改元组变量</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>)<br>name<br></code></pre></td></tr></table></figure><h3 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h3><p>元组是轻量级别的列表，功能不如列表强大，如果元组中只有一个元素，则必须在末尾增加一个逗号，试图修改元组的操作是被禁止的,元组的访问速度比列表更快，元组比列表更安全，元组可做字典的键和集合的元素，而列表不可以.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义元组</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br>name = ()<br>name = (<span class="hljs-number">1</span>,)<br>name = <span class="hljs-built_in">tuple</span>()<br><span class="hljs-comment">#遍历元组中的所有值</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h3 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h3><p>给元组变量重新赋值是允许的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#修改元组变量</span><br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>)<br>name = (<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>)<br>name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>列表</title>
    <link href="/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%88%97%E8%A1%A8/%E5%88%97%E8%A1%A8/"/>
    <url>/2022/03/20/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E5%88%97%E8%A1%A8/%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。Python有6个序列的内置类型，但最常见的是列表和元组。序列都可以进行的操作包括索引，切片，加，乘，检查成员。此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。列表的数据项不需要具有相同的类型。</p><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建列表</span><br>a = []<br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a = <span class="hljs-built_in">list</span>()<br><span class="hljs-comment">#range（）创建数字列表</span><br>a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><hr><h2 id="访问列表中的值"><a href="#访问列表中的值" class="headerlink" title="访问列表中的值"></a>访问列表中的值</h2><p>与字符串的索引一样，列表索引从0开始,使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;physics&#x27;</span>, <span class="hljs-string">&#x27;chemistry&#x27;</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">2000</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span> ]<br> <br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;list1[0]: &quot;</span>, list1[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;list2[1:5]: &quot;</span>, list2[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>以上输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1[<span class="hljs-number">0</span>]:  physics<br>list2[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]:  [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><hr><h2 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h2><p>你可以对列表的数据项进行修改或更新，你也可以使用append()、insert()、extend()方法来添加列表项，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在列表末尾添加元素</span><br>name.append[<span class="hljs-string">&#x27;li&#x27;</span>]<br><span class="hljs-comment">#在列表中插入元素</span><br>name.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;li&#x27;</span>)<br><span class="hljs-comment">#目标列表元素添加到本列表末尾</span><br>a = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a的地址:&#x27;</span>,a)<br>b = [<span class="hljs-number">40</span>,<span class="hljs-number">50</span>]<br>a.extend(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a列表的元素&#x27;</span>,a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a的地址:&#x27;</span>,<span class="hljs-built_in">id</span>(a))<br></code></pre></td></tr></table></figure><hr><h2 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h2><p>可以使用 del 语句、remove()、pop()、clear()来删除列表的元素，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#del列表删除元素</span><br><span class="hljs-keyword">del</span> name[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#pop删除元素</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>name = names.pop()<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(names)<br><span class="hljs-comment">#根据值删除元素</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>name = names.remove(<span class="hljs-string">&#x27;xiao&#x27;</span>)<br>names<br><span class="hljs-comment">#清空列表元素</span><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>name.clear()<br>name<br></code></pre></td></tr></table></figure><hr><h2 id="Python列表脚本操作符"><a href="#Python列表脚本操作符" class="headerlink" title="Python列表脚本操作符"></a>Python列表脚本操作符</h2><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p><p>如下所示：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h2 id="Python列表切片"><a href="#Python列表切片" class="headerlink" title="Python列表切片"></a>Python列表切片</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>从start开始（包括start），到end结束（不包括end），step表示切片的步长</p><p>[start: end: step]</p><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><p>1.要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引</p><p>2.使用copy()复制列表</p><p>Python 的列表截取实例如下：</p><p>L &#x3D; [‘Google’, ‘Runoob’, ‘Taobao’] </p><p>L[2]&#x3D; ‘Taobao’ </p><p>L[-2] &#x3D;’Runoob’ </p><p>L[1:] &#x3D;[‘Runoob’, ‘Taobao’]</p><p>描述：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">L[2]</td><td align="left">‘Taobao’</td><td align="left">读取列表中第三个元素</td></tr><tr><td align="left">L[-2]</td><td align="left">‘Runoob’</td><td align="left">读取列表中倒数第二个元素</td></tr><tr><td align="left">L[1:]</td><td align="left">[‘Runoob’, ‘Taobao’]</td><td align="left">从第二个元素开始截取列表</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用切片获取列表部分元素</span><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>]<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(name[:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>:])<br><span class="hljs-built_in">print</span>(name[:])<br><span class="hljs-built_in">print</span>(name[-<span class="hljs-number">2</span>:-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment">#使用切片为列表增加元素</span><br>num = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>]<br>num[:<span class="hljs-number">0</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] <span class="hljs-comment"># 在列表头部插入多个元素</span><br>num[<span class="hljs-number">3</span>:<span class="hljs-number">3</span>] = [<span class="hljs-number">4</span>] <span class="hljs-comment"># 在列表中间位置插入元素</span><br>num[<span class="hljs-built_in">len</span>(num):] = [<span class="hljs-number">9</span>] <span class="hljs-comment">#在列表尾部插入元素</span><br><br><span class="hljs-comment">#使用切片替换和修改列表中的元素</span><br>num = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>num[:<span class="hljs-number">3</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <br>num[<span class="hljs-number">4</span>:] = [<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]<br>num[::<span class="hljs-number">2</span>] = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>] <span class="hljs-comment"># 隔一个修改一个</span><br><br><span class="hljs-comment">#使用切片删除元素</span><br>num = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>num[:<span class="hljs-number">3</span>] = [] <span class="hljs-comment">#删除列表前三个元素</span><br><span class="hljs-keyword">del</span> num[:<span class="hljs-number">3</span>]<br><span class="hljs-keyword">del</span> num[::<span class="hljs-number">2</span>] <span class="hljs-comment">#隔一个删一个</span><br><br><span class="hljs-comment">#遍历切片</span><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment">#复制列表</span><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>]<br>names = name[:]<br><span class="hljs-built_in">print</span>(names)<br><br>name = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;xu&#x27;</span>,<span class="hljs-string">&#x27;xiong&#x27;</span>,<span class="hljs-string">&#x27;xie&#x27;</span>]<br>names = name.copy()<br>names<br></code></pre></td></tr></table></figure><h2 id="Python列表函数-amp-方法"><a href="#Python列表函数-amp-方法" class="headerlink" title="Python列表函数&amp;方法"></a>Python列表函数&amp;方法</h2><p>Python包含以下函数:</p><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-list-cmp.html">cmp(list1, list2)</a> 比较两个列表的元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-list-len.html">len(list)</a> 列表元素个数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-list-max.html">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-list-min.html">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-list-list.html">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法:</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">[list.pop(<a href="https://www.runoob.com/python/att-list-pop.html">index&#x3D;-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-list-reverse.html">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python/att-list-sort.html">list.sort(cmp&#x3D;None, key&#x3D;None, reverse&#x3D;False)</a> 对原列表进行排序</td></tr></tbody></table><h2 id="对数字列表执行简单的统计计算"><a href="#对数字列表执行简单的统计计算" class="headerlink" title="对数字列表执行简单的统计计算"></a>对数字列表执行简单的统计计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(a)) <span class="hljs-comment">#统计最小值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(a)) <span class="hljs-comment">#统计最大值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(a)) <span class="hljs-comment">#求和</span><br></code></pre></td></tr></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><p>sort()对列表永久排序</p><p>sorted()对列表临时排序</p><p>倒着打印列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sort()对列表永久排序</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>names.sort()<br><span class="hljs-built_in">print</span>(names)<br>names.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(names)<br><span class="hljs-comment">#sorted()对列表临时排序</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(names))<br><span class="hljs-built_in">print</span>(names)<br><span class="hljs-comment">#倒着打印列表</span><br>names = [<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>,<span class="hljs-string">&#x27;ying&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>]<br>names.reverse()<br>names<br></code></pre></td></tr></table></figure><h2 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h2><h4 id="列表解析-x2F-列表推导式"><a href="#列表解析-x2F-列表推导式" class="headerlink" title="列表解析&#x2F;列表推导式"></a>列表解析&#x2F;列表推导式</h4><p>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素，列表推导式可以使用非常简洁的方式对列表或其他可迭代对象的元素进行遍历、过滤或再次计算，快速生成满足需求的新列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">[expression <span class="hljs-keyword">for</span> expr1 <span class="hljs-keyword">in</span> sequence1 <span class="hljs-keyword">if</span> condition1<br>            <span class="hljs-keyword">for</span> expr2 <span class="hljs-keyword">in</span> sequence2 <span class="hljs-keyword">if</span> condition2<br>            <span class="hljs-keyword">for</span> expr3 <span class="hljs-keyword">in</span> sequence3 <span class="hljs-keyword">if</span> condition3<br>            ...<br>            <span class="hljs-keyword">for</span> exprN <span class="hljs-keyword">in</span> sequenceN <span class="hljs-keyword">if</span> conditionN]<br><span class="hljs-comment">#列表解析/列表推导式</span><br>squares = [value**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)]<br><span class="hljs-comment">#例：使用列表推导式实现嵌套列表（二维列表）的平铺</span><br>a = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br>b = [j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i]<br><span class="hljs-comment">#例：在列表推导式中使用if过滤不符合条件的元素</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>b = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">5</span>]<br><span class="hljs-comment">#例：在列表推导式中同时遍历多个列表或可迭代对象</span><br>[(x,y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-keyword">if</span> x ==<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>] <span class="hljs-keyword">if</span> y != x]<br><span class="hljs-comment">#对包含多个循环的列表推导式，要清楚多个循环的执行顺序和嵌套关系</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串格式化</title>
    <link href="/2022/02/27/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/2022/02/27/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="f字符串"><a href="#f字符串" class="headerlink" title="f字符串"></a>f字符串</h3><p>f字符串，亦称为格式化<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>常量（formatted string literals），是Python3.6新引入的一种字符串格式化方法，f-字符串在形式上是以 f 或 F 修饰符引领的字符串（f’xxx’ 或 F’xxx’），以大括号 {} 标明被替换的字段；f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式：f字符串在功能方面不逊于传统的%-formatting语句和str.format()函数，同时性能又优于二者，且使用起来也更加简洁明了，因此对于Python3.6及以后的版本，推荐使用f-string进行字符串格式化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">first_name = <span class="hljs-string">&quot;ada&quot;</span><br><br>last_name = <span class="hljs-string">&quot;lovelace&quot;</span><br><br>full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span>&quot;</span><br><br><span class="hljs-built_in">print</span>(full_name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello,<span class="hljs-subst">&#123;full_name.title()&#125;</span>&quot;</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">1234</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;a is <span class="hljs-subst">&#123;a:^#10X&#125;</span>&#x27;</span>      <span class="hljs-comment"># 居中，宽度10位，十六进制整数（大写字母），显示0X前缀</span><br><span class="hljs-string">&#x27;a is   0X4D2   &#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">1234.5678</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;b is <span class="hljs-subst">&#123;b:&lt;+<span class="hljs-number">10.2</span>f&#125;</span>&#x27;</span>    <span class="hljs-comment"># 左对齐，宽度10位，显示正号（+），定点数格式，2位小数</span><br><span class="hljs-string">&#x27;b is +1234.57  &#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>c = <span class="hljs-number">12345678</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;c is <span class="hljs-subst">&#123;c:015,d&#125;</span>&#x27;</span>      <span class="hljs-comment"># 高位补零，宽度15位，十进制整数，使用,作为千分分割位</span><br><span class="hljs-string">&#x27;c is 000,012,345,678&#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>d = <span class="hljs-number">0.5</span> + <span class="hljs-number">2.5j</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;d is <span class="hljs-subst">&#123;d:<span class="hljs-number">30.3</span>e&#125;</span>&#x27;</span>      <span class="hljs-comment"># 宽度30位，科学计数法，3位小数</span><br><span class="hljs-string">&#x27;d is           5.000e-01+2.500e+00j&#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datetime<br><span class="hljs-meta">&gt;&gt;&gt; </span>e = datetime.datetime.today()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;the time is <span class="hljs-subst">&#123;e:%Y-%m-%d (%a) %H:%M:%S&#125;</span>&#x27;</span>   <span class="hljs-comment"># datetime时间格式</span><br><span class="hljs-string">&#x27;the time is 2018-07-14 (Sat) 20:46:02&#x27;</span><br></code></pre></td></tr></table></figure><p>![截屏2022-03-23 下午8.27.56](&#x2F;Users&#x2F;xiaozhiying&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2022-03-23 下午8.27.56.png)</p><h3 id="format格式化字符串"><a href="#format格式化字符串" class="headerlink" title="format格式化字符串"></a>format格式化字符串</h3><p>Python用字符串的format()方法来格式化字符串。</p><p>具体用法如下，字符串中花括号 {} 的部分会被format传入的参数替代，传入的值可以是字符串，也可以是数字或者别的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><br><span class="hljs-comment">#可以用数字指定传入参数的相对位置</span><br><span class="hljs-string">&#x27;&#123;2&#125; &#123;1&#125; &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><br><span class="hljs-comment">#还可以指定传入参数的名称</span><br><span class="hljs-string">&#x27;&#123;color&#125; &#123;n&#125; &#123;x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(n=<span class="hljs-number">10</span>, x=<span class="hljs-number">1.5</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br><br><span class="hljs-comment">#可以在一起混用</span><br><span class="hljs-string">&#x27;&#123;color&#125; &#123;0&#125; &#123;x&#125; &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, x = <span class="hljs-number">1.5</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br><br><span class="hljs-comment">#可以用&#123;&lt;相对位置&gt;:&lt;格式&gt;&#125;指定输出格式</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi<br><span class="hljs-string">&#x27;&#123;0:10&#125;&#123;1:10d&#125; &#123;2:10.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span> * pi)<br><br></code></pre></td></tr></table></figure><h3 id="使用旧式的-方法进行格式化"><a href="#使用旧式的-方法进行格式化" class="headerlink" title="使用旧式的 % 方法进行格式化"></a>使用旧式的 % 方法进行格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;some numbers:&quot;</span><br>x = <span class="hljs-number">1.34</span><br>y = <span class="hljs-number">2</span><br><span class="hljs-comment"># 用百分号隔开，括号括起来</span><br>t = <span class="hljs-string">&quot;%s %f, %d&quot;</span> % (s, x, y)<br>t<br></code></pre></td></tr></table></figure><h3 id="Python字符串格式化符号"><a href="#Python字符串格式化符号" class="headerlink" title="Python字符串格式化符号"></a>Python字符串格式化符号</h3><table><thead><tr><th>符 号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整型</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f 和 %E 的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><h3 id="格式化操作符辅助指令"><a href="#格式化操作符辅助指令" class="headerlink" title="格式化操作符辅助指令"></a>格式化操作符辅助指令</h3><table><thead><tr><th>符 号</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>定义宽度或者小数点精度</td></tr><tr><td>-</td><td>用做左对齐</td></tr><tr><td>+</td><td>在正数前面显示加号( + )</td></tr><tr><td>《sp》</td><td>在正数前面显示空格</td></tr><tr><td>#</td><td>在八进制前显示零，十六进制前显示’0x’或’0X’</td></tr><tr><td>0</td><td>显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td>%</td><td>‘%%’输出一个单一的’%’</td></tr><tr><td>(var)</td><td>映射变量(字典参数)</td></tr><tr><td>m.n.</td><td>m显示最小总宽度,n是小数点后的位数</td></tr></tbody></table><h3 id="格式化输出浮点数"><a href="#格式化输出浮点数" class="headerlink" title="格式化输出浮点数"></a>格式化输出浮点数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">pi = <span class="hljs-number">3.141592653</span>  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%10.3f&#x27;</span> % pi)        <span class="hljs-comment"># 字段宽10，精度3  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pi = %.*f&quot;</span> % (<span class="hljs-number">3</span>,pi)) <span class="hljs-comment"># 用*从后面的元组中读取字段宽度或精度  </span><br>pi = <span class="hljs-number">3.142</span>  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%010.3f&#x27;</span> % pi)       <span class="hljs-comment">#  用0填充空白  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%-10.3f&#x27;</span> % pi)       <span class="hljs-comment">#  左对齐     </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%+f&#x27;</span> % pi)           <span class="hljs-comment">#   显示正负号</span><br></code></pre></td></tr></table></figure><h3 id="print自动换行与不换行"><a href="#print自动换行与不换行" class="headerlink" title="print自动换行与不换行"></a>print自动换行与不换行</h3><p>print 会自动在行末加上回车, 如果不需回车，只需在 print 语句的结尾添加一个end()，就可以改变它的行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br><span class="hljs-comment"># 经典应用</span><br><span class="hljs-comment">#读入层数和使用字母两个变量，打印一个倒三角</span><br><span class="hljs-comment">#注：读入字母为单字</span><br><span class="hljs-comment">#以下为示例</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">请输入你的三角高度：6</span><br><span class="hljs-string">请输入你想用的填充符：e</span><br><span class="hljs-string">以下是输出结果：</span><br><span class="hljs-string">eeeeeeeeeee</span><br><span class="hljs-string"> eeeeeeeee</span><br><span class="hljs-string">  eeeeeee</span><br><span class="hljs-string">   eeeee</span><br><span class="hljs-string">    eee</span><br><span class="hljs-string">     e</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 提示：三角底部为 层数 * 2 - 1，三角顶部为 1</span><br><span class="hljs-comment"># 提示：使用end中的空格和\n控制空格和换行</span><br><span class="hljs-comment"># 请在这里填写您的代码</span><br>h = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的三角高度:&quot;</span>))<br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你想用的填充字符：&quot;</span>)<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> h&gt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>*i + a*(h*<span class="hljs-number">2</span>-<span class="hljs-number">1</span>),end = <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    h -= <span class="hljs-number">1</span><br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="print-format用法"><a href="#print-format用法" class="headerlink" title="print.format用法"></a>print.format用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125;,&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;zhiying&#x27;</span>, <span class="hljs-number">18</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;,&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;zhiying&#x27;</span>,<span class="hljs-string">&#x27;boy&#x27;</span>,<span class="hljs-number">18</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;name&#125;,&#123;sex&#125;,&#123;age&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(age=<span class="hljs-number">32</span>,sex=<span class="hljs-string">&#x27;male&#x27;</span>,name=<span class="hljs-string">&#x27;zhiying&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="格式限定符"><a href="#格式限定符" class="headerlink" title="格式限定符"></a>格式限定符</h3><ul><li>它有着丰富的的“格式限定符”（语法是{}中带:号），比如：</li></ul><p>填充与对齐</p><ul><li>填充常跟对齐一起使用</li><li>^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度</li><li>:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:a&lt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:p^10&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运算符</title>
    <link href="/2022/02/26/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <url>/2022/02/26/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>运算符说明</th><th>Python运算符</th><th>优先级</th><th align="center">结合性</th><th>优先级顺序</th></tr></thead><tbody><tr><td>小括号</td><td>( )</td><td>19</td><td align="center">无</td><td>高 ︿  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   |  | 低</td></tr><tr><td>索引运算符</td><td>x[i] 或 x[i1: i2 [:i3]]</td><td>18</td><td align="center">左</td><td></td></tr><tr><td>属性访问</td><td>x.attribute</td><td>17</td><td align="center">左</td><td></td></tr><tr><td>乘方</td><td>**</td><td>16</td><td align="center">右</td><td></td></tr><tr><td>按位取反</td><td>~</td><td>15</td><td align="center">右</td><td></td></tr><tr><td>符号运算符</td><td>+（正号）、-（负号）</td><td>14</td><td align="center">右</td><td></td></tr><tr><td>乘除</td><td>*、&#x2F;、&#x2F;&#x2F;、%</td><td>13</td><td align="center">左</td><td></td></tr><tr><td>加减</td><td>+、-</td><td>12</td><td align="center">左</td><td></td></tr><tr><td>位移</td><td>&gt;&gt;、&lt;&lt;</td><td>11</td><td align="center">左</td><td></td></tr><tr><td>按位与</td><td>&amp;</td><td>10</td><td align="center">右</td><td></td></tr><tr><td>按位异或</td><td>^</td><td>9</td><td align="center">左</td><td></td></tr><tr><td>按位或</td><td>|</td><td>8</td><td align="center">左</td><td></td></tr><tr><td>比较运算符</td><td>&#x3D;&#x3D;、!&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;</td><td>7</td><td align="center">左</td><td></td></tr><tr><td>is 运算符</td><td>is、is not</td><td>6</td><td align="center">左</td><td></td></tr><tr><td>in 运算符</td><td>in、not in</td><td>5</td><td align="center">左</td><td></td></tr><tr><td>逻辑非</td><td>not</td><td>4</td><td align="center">右</td><td></td></tr><tr><td>逻辑与</td><td>and</td><td>3</td><td align="center">左</td><td></td></tr><tr><td>逻辑或</td><td>or</td><td>2</td><td align="center">左</td><td></td></tr><tr><td>逗号运算符</td><td>exp1, exp2</td><td>1</td><td align="center">左</td><td></td></tr></tbody></table><p>Python 中大部分运算符都具有左结合性，也就是从左到右执行；只有 ** 乘方运算符、单目运算符（例如 not 逻辑非运算符）、赋值运算符和三目运算符例外，它们具有右结合性，也就是从右向左执行。</p><h2 id="lt-lt-左移运算符"><a href="#lt-lt-左移运算符" class="headerlink" title="&lt;&lt;左移运算符"></a>&lt;&lt;左移运算符</h2><p>Python 左移运算符<code>&lt;&lt;</code>用来把操作数的各个二进制位全部左移若干位，高位丢弃，低位补 0。</p><p>例如，<code>9&lt;&lt;3</code>可以转换为如下的运算：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;&lt;</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">1001</span>  <span class="hljs-string">（9</span> <span class="hljs-string">在内存中的存储）</span><br><span class="hljs-string">-----------------------------------------------------------------------------------</span><br>   <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0100 </span><span class="hljs-number">1000</span>  <span class="hljs-string">（72</span> <span class="hljs-string">在内存中的存储）</span><br></code></pre></td></tr></table></figure><p>所以<code>9&lt;&lt;3</code>的结果为 72。</p><p>又如，<code>(-9)&lt;&lt;3</code>可以转换为如下的运算：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;&lt;</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">0111</span>  <span class="hljs-string">（-9</span> <span class="hljs-string">在内存中的存储）</span><br><span class="hljs-string">-----------------------------------------------------------------------------------</span><br>   <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1011 </span><span class="hljs-number">1000</span>  <span class="hljs-string">（-72</span> <span class="hljs-string">在内存中的存储）</span><br></code></pre></td></tr></table></figure><p>所以<code>(-9)&lt;&lt;3</code>的结果为 -72</p><p>如果数据较小，被丢弃的高位不包含 1，那么左移 n 位相当于乘以 2 的 n 次方。</p><p>使用 Python 代码对上面的分析进行验证：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">print(<span class="hljs-string">&quot;%X&quot;</span> % (<span class="hljs-number">9</span>&lt;&lt;3) )print(<span class="hljs-string">&quot;%X&quot;</span> % ((<span class="hljs-name">-9</span>)&lt;&lt;3) )<br></code></pre></td></tr></table></figure><p>运行结果：<br>48<br>-48</p><h2 id="gt-gt-右移运算符"><a href="#gt-gt-右移运算符" class="headerlink" title="&gt;&gt;右移运算符"></a>&gt;&gt;右移运算符</h2><p>Python 右移运算符<code>&gt;&gt;</code>用来把操作数的各个二进制位全部右移若干位，低位丢弃，高位补 0 或 1。如果数据的最高位是 0，那么就补 0；如果最高位是 1，那么就补 1。</p><p>例如，<code>9&gt;&gt;3</code>可以转换为如下的运算：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;&gt;</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">1001</span>  <span class="hljs-string">（9</span> <span class="hljs-string">在内存中的存储）</span><br><span class="hljs-string">-----------------------------------------------------------------------------------</span><br>   <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000</span> <span class="hljs-string">--</span> <span class="hljs-number">0000 </span><span class="hljs-number">0001</span>  <span class="hljs-string">（1</span> <span class="hljs-string">在内存中的存储）</span><br></code></pre></td></tr></table></figure><p>所以<code>9&gt;&gt;3</code>的结果为 1。</p><p>又如，<code>(-9)&gt;&gt;3</code>可以转换为如下的运算：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;&gt;</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">0111</span>  <span class="hljs-string">（-9</span> <span class="hljs-string">在内存中的存储）</span><br><span class="hljs-string">-----------------------------------------------------------------------------------</span><br>   <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1111</span> <span class="hljs-string">--</span> <span class="hljs-number">1111 </span><span class="hljs-number">1110</span>  <span class="hljs-string">（-2</span> <span class="hljs-string">在内存中的存储）</span><br></code></pre></td></tr></table></figure><p>所以<code>(-9)&gt;&gt;3</code>的结果为 -2</p><p>如果被丢弃的低位不包含 1，那么右移 n 位相当于除以 2 的 n 次方（但被移除的位中经常会包含 1）。</p><p>使用 Python 代码对上面的分析进行验证：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">print(<span class="hljs-string">&quot;%X&quot;</span> % (<span class="hljs-number">9</span>&gt;&gt;3) )print(<span class="hljs-string">&quot;%X&quot;</span> % ((<span class="hljs-name">-9</span>)&gt;&gt;3) )<br></code></pre></td></tr></table></figure><p>运行结果：<br>1<br>-2</p>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串操作</title>
    <link href="/2022/02/26/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/02/26/%E5%AD%A6%E4%B9%A0%E6%B4%BE/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><p>字符串可以使用+、—、*进行拼接操作</p><ul><li>字符串和字符串可以拼接，但是不能直接和其他数据进行拼接，需要用 <code>str()</code> 来转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello &#x27;</span> + <span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-string">&#x27;hello&#x27;</span> * <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="split分割操作"><a href="#split分割操作" class="headerlink" title="split分割操作"></a>split分割操作</h3><p>s.split()将s按照空格（包括多个空格，制表符\t，换行符\n等）分割，并返回所有分割得到的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">line = <span class="hljs-string">&quot;1 2 3 4  5&quot;</span><br>numbers = line.split() <span class="hljs-comment">#默认按空格分隔</span><br><span class="hljs-built_in">print</span>(numbers)<br></code></pre></td></tr></table></figure><p>s.split(sep)以给定的sep为分隔符对s进行分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">line = <span class="hljs-string">&quot;1,2,3,4,5&quot;</span><br>numbers = line.split(<span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-comment">#如果有写分隔符，按指示分隔符分隔</span><br><span class="hljs-built_in">print</span>(numbers)<br></code></pre></td></tr></table></figure><h3 id="join连接操作"><a href="#join连接操作" class="headerlink" title="join连接操作"></a>join连接操作</h3><p>与分割相反，s.join(str_sequence)的作用是以s为连接符将字符串序列str_sequence中的元素连接起来，并返回连接后得到的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">number = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-string">&#x27; &#x27;</span>.join(number) <span class="hljs-comment"># 产生新的字符串，原本s并没有被修改</span><br><span class="hljs-built_in">print</span>(number)<br>news = <span class="hljs-string">&#x27;,&#x27;</span>.join(number)<br><span class="hljs-built_in">print</span>(news)<br></code></pre></td></tr></table></figure><h3 id="replace替换操作"><a href="#replace替换操作" class="headerlink" title="replace替换操作"></a>replace替换操作</h3><p>s.replace(part1, part2)将字符串s中指定的部分part1替换成想要的部分part2，并返回新的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello world&quot;</span><br>s.replace(<span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>)<br><span class="hljs-comment">#此时，s的值并没有变化，替换方法只是生成了一个新的字符串。</span><br></code></pre></td></tr></table></figure><h3 id="count统计操作"><a href="#count统计操作" class="headerlink" title="count统计操作"></a>count统计操作</h3><p>s.count(sub) 返回子字符串在字符串中出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">web = <span class="hljs-string">&#x27;http://www.dolphin-labs.com/&#x27;</span><br>web.count(<span class="hljs-string">&#x27;w&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="去除多余空格"><a href="#去除多余空格" class="headerlink" title="去除多余空格"></a>去除多余空格</h3><p>s.strip()返回一个将s两端的多余空格除去的新字符串。</p><p>s.lstrip()返回一个将s开头的多余空格除去的新字符串。</p><p>s.rstrip()返回一个将s结尾的多余空格除去的新字符串。</p><ul><li>还可以使用replace去掉空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;  hello world   &quot;</span><br>s.strip()<br>s.lstrip()<br>s.rstrip()<br>s.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="大小写转化"><a href="#大小写转化" class="headerlink" title="大小写转化"></a>大小写转化</h3><p>s.upper()方法返回一个将s中的字母全部大写的新字符串。</p><p>s.lower()方法返回一个将s中的字母全部小写的新字符串。</p><p>s.title()方法返回一个将s中的首字母大写的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;hello world&quot;</span>.upper()<br><span class="hljs-string">&quot;HELLO WORLD&quot;</span>.lower()<br><span class="hljs-string">&quot;hello world&quot;</span>.title()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习笔记（基础）</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
